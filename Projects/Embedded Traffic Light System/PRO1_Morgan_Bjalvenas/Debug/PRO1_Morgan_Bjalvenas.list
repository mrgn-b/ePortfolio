
PRO1_Morgan_Bjalvenas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08008b48  08008b48  00018b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cc4  08008cc4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008cc4  08008cc4  00018cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ccc  08008ccc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ccc  08008ccc  00018ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cd0  08008cd0  00018cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002050  20000070  08008d44  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020c0  08008d44  000220c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001daec  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004017  00000000  00000000  0003dbcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001950  00000000  00000000  00041be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013aa  00000000  00000000  00043538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002987c  00000000  00000000  000448e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e6a6  00000000  00000000  0006e15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fef34  00000000  00000000  0008c804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006cb8  00000000  00000000  0018b738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001923f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b30 	.word	0x08008b30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008b30 	.word	0x08008b30

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySemaphoreLEDs */
  BinarySemaphoreLEDsHandle = osSemaphoreNew(1, 1, &BinarySemaphoreLEDs_attributes);
 80004d0:	4a18      	ldr	r2, [pc, #96]	; (8000534 <MX_FREERTOS_Init+0x68>)
 80004d2:	2101      	movs	r1, #1
 80004d4:	2001      	movs	r0, #1
 80004d6:	f005 f800 	bl	80054da <osSemaphoreNew>
 80004da:	4603      	mov	r3, r0
 80004dc:	4a16      	ldr	r2, [pc, #88]	; (8000538 <MX_FREERTOS_Init+0x6c>)
 80004de:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e0:	4a16      	ldr	r2, [pc, #88]	; (800053c <MX_FREERTOS_Init+0x70>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4816      	ldr	r0, [pc, #88]	; (8000540 <MX_FREERTOS_Init+0x74>)
 80004e6:	f004 ff4b 	bl	8005380 <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a15      	ldr	r2, [pc, #84]	; (8000544 <MX_FREERTOS_Init+0x78>)
 80004ee:	6013      	str	r3, [r2, #0]

  /* creation of TrafficLightFSM */
  TrafficLightFSMHandle = osThreadNew(traffic_light_FSM, NULL, &TrafficLightFSM_attributes);
 80004f0:	4a15      	ldr	r2, [pc, #84]	; (8000548 <MX_FREERTOS_Init+0x7c>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	4815      	ldr	r0, [pc, #84]	; (800054c <MX_FREERTOS_Init+0x80>)
 80004f6:	f004 ff43 	bl	8005380 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a14      	ldr	r2, [pc, #80]	; (8000550 <MX_FREERTOS_Init+0x84>)
 80004fe:	6013      	str	r3, [r2, #0]

  /* creation of PedestrianLight */
  PedestrianLightHandle = osThreadNew(pedestrian_light1, NULL, &PedestrianLight_attributes);
 8000500:	4a14      	ldr	r2, [pc, #80]	; (8000554 <MX_FREERTOS_Init+0x88>)
 8000502:	2100      	movs	r1, #0
 8000504:	4814      	ldr	r0, [pc, #80]	; (8000558 <MX_FREERTOS_Init+0x8c>)
 8000506:	f004 ff3b 	bl	8005380 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <MX_FREERTOS_Init+0x90>)
 800050e:	6013      	str	r3, [r2, #0]

  /* creation of PL1Toggle */
  PL1ToggleHandle = osThreadNew(PL1_toggle, NULL, &PL1Toggle_attributes);
 8000510:	4a13      	ldr	r2, [pc, #76]	; (8000560 <MX_FREERTOS_Init+0x94>)
 8000512:	2100      	movs	r1, #0
 8000514:	4813      	ldr	r0, [pc, #76]	; (8000564 <MX_FREERTOS_Init+0x98>)
 8000516:	f004 ff33 	bl	8005380 <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a12      	ldr	r2, [pc, #72]	; (8000568 <MX_FREERTOS_Init+0x9c>)
 800051e:	6013      	str	r3, [r2, #0]

  /* creation of PL2Toggle */
  PL2ToggleHandle = osThreadNew(PL2_toggle, NULL, &PL2Toggle_attributes);
 8000520:	4a12      	ldr	r2, [pc, #72]	; (800056c <MX_FREERTOS_Init+0xa0>)
 8000522:	2100      	movs	r1, #0
 8000524:	4812      	ldr	r0, [pc, #72]	; (8000570 <MX_FREERTOS_Init+0xa4>)
 8000526:	f004 ff2b 	bl	8005380 <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a11      	ldr	r2, [pc, #68]	; (8000574 <MX_FREERTOS_Init+0xa8>)
 800052e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	08008c6c 	.word	0x08008c6c
 8000538:	200000b8 	.word	0x200000b8
 800053c:	08008bb8 	.word	0x08008bb8
 8000540:	08000579 	.word	0x08000579
 8000544:	200000a4 	.word	0x200000a4
 8000548:	08008bdc 	.word	0x08008bdc
 800054c:	08000589 	.word	0x08000589
 8000550:	200000a8 	.word	0x200000a8
 8000554:	08008c00 	.word	0x08008c00
 8000558:	08000ad1 	.word	0x08000ad1
 800055c:	200000ac 	.word	0x200000ac
 8000560:	08008c24 	.word	0x08008c24
 8000564:	08000d05 	.word	0x08000d05
 8000568:	200000b0 	.word	0x200000b0
 800056c:	08008c48 	.word	0x08008c48
 8000570:	08000e49 	.word	0x08000e49
 8000574:	200000b4 	.word	0x200000b4

08000578 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1); // does nothing
 8000580:	2001      	movs	r0, #1
 8000582:	f004 ff8f 	bl	80054a4 <osDelay>
 8000586:	e7fb      	b.n	8000580 <StartDefaultTask+0x8>

08000588 <traffic_light_FSM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_traffic_light_FSM */
void traffic_light_FSM(void *argument)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN traffic_light_FSM */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(100) ; // 100 ms task period
 8000590:	2364      	movs	r3, #100	; 0x64
 8000592:	60fb      	str	r3, [r7, #12]
	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8000594:	f006 fd3c 	bl	8007010 <xTaskGetTickCount>
 8000598:	4603      	mov	r3, r0
 800059a:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
	  switch(currentState){
 800059c:	4b7d      	ldr	r3, [pc, #500]	; (8000794 <traffic_light_FSM+0x20c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	f000 8202 	beq.w	80009aa <traffic_light_FSM+0x422>
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	f300 8283 	bgt.w	8000ab2 <traffic_light_FSM+0x52a>
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d003      	beq.n	80005b8 <traffic_light_FSM+0x30>
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	f000 8111 	beq.w	80007d8 <traffic_light_FSM+0x250>
 80005b6:	e27c      	b.n	8000ab2 <traffic_light_FSM+0x52a>
	  case NorthSouth : // if current state is NorthSouth

		  if(BinarySemaphoreLEDsHandle != NULL){
 80005b8:	4b77      	ldr	r3, [pc, #476]	; (8000798 <traffic_light_FSM+0x210>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d035      	beq.n	800062c <traffic_light_FSM+0xa4>
			  // if semaphore in available, and northSouth LEDs have not been initialized
			  if (northSouthInitialized == false && osSemaphoreAcquire(BinarySemaphoreLEDsHandle, osWaitForever) == osOK){
 80005c0:	4b76      	ldr	r3, [pc, #472]	; (800079c <traffic_light_FSM+0x214>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	f083 0301 	eor.w	r3, r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d02e      	beq.n	800062c <traffic_light_FSM+0xa4>
 80005ce:	4b72      	ldr	r3, [pc, #456]	; (8000798 <traffic_light_FSM+0x210>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f04f 31ff 	mov.w	r1, #4294967295
 80005d6:	4618      	mov	r0, r3
 80005d8:	f005 f808 	bl	80055ec <osSemaphoreAcquire>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d124      	bne.n	800062c <traffic_light_FSM+0xa4>

				  // Access shared LEDs
				  //initialize LEDs
				  reset_traffic_leds(trafficLeds);
 80005e2:	486f      	ldr	r0, [pc, #444]	; (80007a0 <traffic_light_FSM+0x218>)
 80005e4:	f000 ffe0 	bl	80015a8 <reset_traffic_leds>
				  set_red_traffic_led(trafficLeds, true, 1);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2101      	movs	r1, #1
 80005ec:	486c      	ldr	r0, [pc, #432]	; (80007a0 <traffic_light_FSM+0x218>)
 80005ee:	f001 f8cd 	bl	800178c <set_red_traffic_led>
				  set_red_traffic_led(trafficLeds, true, 3);
 80005f2:	2203      	movs	r2, #3
 80005f4:	2101      	movs	r1, #1
 80005f6:	486a      	ldr	r0, [pc, #424]	; (80007a0 <traffic_light_FSM+0x218>)
 80005f8:	f001 f8c8 	bl	800178c <set_red_traffic_led>
				  set_green_traffic_led(trafficLeds, true, 2);
 80005fc:	2202      	movs	r2, #2
 80005fe:	2101      	movs	r1, #1
 8000600:	4867      	ldr	r0, [pc, #412]	; (80007a0 <traffic_light_FSM+0x218>)
 8000602:	f001 fa2b 	bl	8001a5c <set_green_traffic_led>
			  	  set_green_traffic_led(trafficLeds, true, 4);
 8000606:	2204      	movs	r2, #4
 8000608:	2101      	movs	r1, #1
 800060a:	4865      	ldr	r0, [pc, #404]	; (80007a0 <traffic_light_FSM+0x218>)
 800060c:	f001 fa26 	bl	8001a5c <set_green_traffic_led>

			  	  //set north and south lane LEDs as initialized
			  	  northSouthInitialized = true;
 8000610:	4b62      	ldr	r3, [pc, #392]	; (800079c <traffic_light_FSM+0x214>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
			  	  eastWestInitialized = false;
 8000616:	4b63      	ldr	r3, [pc, #396]	; (80007a4 <traffic_light_FSM+0x21c>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
			  	  orangeInitialized = false;
 800061c:	4b62      	ldr	r3, [pc, #392]	; (80007a8 <traffic_light_FSM+0x220>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]

			  	  // access over, release semaphore for LEDs
			  	  osSemaphoreRelease(BinarySemaphoreLEDsHandle);
 8000622:	4b5d      	ldr	r3, [pc, #372]	; (8000798 <traffic_light_FSM+0x210>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f005 f832 	bl	8005690 <osSemaphoreRelease>
			  }
		  }

		  // if PL2Toggle timer equals (pedestrianDelay - orangeDelay) and walking delay has passed
		  if (PL2Toggle == true && toggle2Timer >= (pedestrianDelay - orangeDelay) && TLFSMTimer >= walkingDelay){
 800062c:	4b5f      	ldr	r3, [pc, #380]	; (80007ac <traffic_light_FSM+0x224>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d019      	beq.n	8000668 <traffic_light_FSM+0xe0>
 8000634:	4b5e      	ldr	r3, [pc, #376]	; (80007b0 <traffic_light_FSM+0x228>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4b5e      	ldr	r3, [pc, #376]	; (80007b4 <traffic_light_FSM+0x22c>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	4619      	mov	r1, r3
 8000640:	4b5d      	ldr	r3, [pc, #372]	; (80007b8 <traffic_light_FSM+0x230>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	1acb      	subs	r3, r1, r3
 8000646:	429a      	cmp	r2, r3
 8000648:	db0e      	blt.n	8000668 <traffic_light_FSM+0xe0>
 800064a:	4b5c      	ldr	r3, [pc, #368]	; (80007bc <traffic_light_FSM+0x234>)
 800064c:	881a      	ldrh	r2, [r3, #0]
 800064e:	4b5c      	ldr	r3, [pc, #368]	; (80007c0 <traffic_light_FSM+0x238>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	429a      	cmp	r2, r3
 8000654:	d308      	bcc.n	8000668 <traffic_light_FSM+0xe0>
			  // switch to Orange state
			  currentState = Orange;
 8000656:	4b4f      	ldr	r3, [pc, #316]	; (8000794 <traffic_light_FSM+0x20c>)
 8000658:	2202      	movs	r2, #2
 800065a:	701a      	strb	r2, [r3, #0]
			  previousState = NorthSouth;
 800065c:	4b59      	ldr	r3, [pc, #356]	; (80007c4 <traffic_light_FSM+0x23c>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]

			  // reset timer
			  TLFSMTimer = 0;
 8000662:	4b56      	ldr	r3, [pc, #344]	; (80007bc <traffic_light_FSM+0x234>)
 8000664:	2200      	movs	r2, #0
 8000666:	801a      	strh	r2, [r3, #0]
		  }

		  // if no cars active, and timer has surpassed walkingDelay and greenDelay
		  if((TL1_car_active() == false && TL2_car_active() == false && TL3_car_active() == false && TL4_car_active() == false)
 8000668:	f001 f82c 	bl	80016c4 <TL1_car_active>
 800066c:	4603      	mov	r3, r0
 800066e:	f083 0301 	eor.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d030      	beq.n	80006da <traffic_light_FSM+0x152>
 8000678:	f001 f834 	bl	80016e4 <TL2_car_active>
 800067c:	4603      	mov	r3, r0
 800067e:	f083 0301 	eor.w	r3, r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d028      	beq.n	80006da <traffic_light_FSM+0x152>
 8000688:	f001 f83e 	bl	8001708 <TL3_car_active>
 800068c:	4603      	mov	r3, r0
 800068e:	f083 0301 	eor.w	r3, r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2b00      	cmp	r3, #0
 8000696:	d020      	beq.n	80006da <traffic_light_FSM+0x152>
 8000698:	f001 f848 	bl	800172c <TL4_car_active>
 800069c:	4603      	mov	r3, r0
 800069e:	f083 0301 	eor.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d018      	beq.n	80006da <traffic_light_FSM+0x152>
				  && (PLTimer >= walkingDelay && PLState == West)){
 80006a8:	4b47      	ldr	r3, [pc, #284]	; (80007c8 <traffic_light_FSM+0x240>)
 80006aa:	881a      	ldrh	r2, [r3, #0]
 80006ac:	4b44      	ldr	r3, [pc, #272]	; (80007c0 <traffic_light_FSM+0x238>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d312      	bcc.n	80006da <traffic_light_FSM+0x152>
 80006b4:	4b45      	ldr	r3, [pc, #276]	; (80007cc <traffic_light_FSM+0x244>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d10e      	bne.n	80006da <traffic_light_FSM+0x152>

			  if(TLFSMTimer >= greenDelay){
 80006bc:	4b3f      	ldr	r3, [pc, #252]	; (80007bc <traffic_light_FSM+0x234>)
 80006be:	881a      	ldrh	r2, [r3, #0]
 80006c0:	4b43      	ldr	r3, [pc, #268]	; (80007d0 <traffic_light_FSM+0x248>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d308      	bcc.n	80006da <traffic_light_FSM+0x152>
				  // switch to Orange state
				  currentState = Orange;
 80006c8:	4b32      	ldr	r3, [pc, #200]	; (8000794 <traffic_light_FSM+0x20c>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	701a      	strb	r2, [r3, #0]
				  previousState = NorthSouth;
 80006ce:	4b3d      	ldr	r3, [pc, #244]	; (80007c4 <traffic_light_FSM+0x23c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]

				  // reset timer
				  TLFSMTimer = 0;
 80006d4:	4b39      	ldr	r3, [pc, #228]	; (80007bc <traffic_light_FSM+0x234>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	801a      	strh	r2, [r3, #0]
			  }
		  }

		  // if car 1 or car 3 is active and car 2 or 4 is active then wait (redDelayMax - orangeDelay) before switching to orange
		  if ((TL2_car_active() == true || TL4_car_active() == true) && (TL1_car_active() == true || TL3_car_active() == true)){
 80006da:	f001 f803 	bl	80016e4 <TL2_car_active>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d104      	bne.n	80006ee <traffic_light_FSM+0x166>
 80006e4:	f001 f822 	bl	800172c <TL4_car_active>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d023      	beq.n	8000736 <traffic_light_FSM+0x1ae>
 80006ee:	f000 ffe9 	bl	80016c4 <TL1_car_active>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d104      	bne.n	8000702 <traffic_light_FSM+0x17a>
 80006f8:	f001 f806 	bl	8001708 <TL3_car_active>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d019      	beq.n	8000736 <traffic_light_FSM+0x1ae>
			  if (TLFSMTimer >= (redDelayMax - orangeDelay) && TLFSMTimer >= walkingDelay){
 8000702:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <traffic_light_FSM+0x234>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	461a      	mov	r2, r3
 8000708:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <traffic_light_FSM+0x24c>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	4b2a      	ldr	r3, [pc, #168]	; (80007b8 <traffic_light_FSM+0x230>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	1acb      	subs	r3, r1, r3
 8000714:	429a      	cmp	r2, r3
 8000716:	db0e      	blt.n	8000736 <traffic_light_FSM+0x1ae>
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <traffic_light_FSM+0x234>)
 800071a:	881a      	ldrh	r2, [r3, #0]
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <traffic_light_FSM+0x238>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	429a      	cmp	r2, r3
 8000722:	d308      	bcc.n	8000736 <traffic_light_FSM+0x1ae>
				  currentState = Orange;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <traffic_light_FSM+0x20c>)
 8000726:	2202      	movs	r2, #2
 8000728:	701a      	strb	r2, [r3, #0]
				  previousState = NorthSouth;
 800072a:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <traffic_light_FSM+0x23c>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]

				  // reset timer
				  TLFSMTimer = 0;
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <traffic_light_FSM+0x234>)
 8000732:	2200      	movs	r2, #0
 8000734:	801a      	strh	r2, [r3, #0]
			  }
		  }

		  // if car 1 or 3 is active and car 2 and 4 is inactive and walkingDelay has passed then change directly to orange state
		  if (((TL2_car_active() == false && TL4_car_active() == false) && (TL1_car_active() == true || TL3_car_active() == true))
 8000736:	f000 ffd5 	bl	80016e4 <TL2_car_active>
 800073a:	4603      	mov	r3, r0
 800073c:	f083 0301 	eor.w	r3, r3, #1
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	f000 818d 	beq.w	8000a62 <traffic_light_FSM+0x4da>
 8000748:	f000 fff0 	bl	800172c <TL4_car_active>
 800074c:	4603      	mov	r3, r0
 800074e:	f083 0301 	eor.w	r3, r3, #1
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	f000 8184 	beq.w	8000a62 <traffic_light_FSM+0x4da>
 800075a:	f000 ffb3 	bl	80016c4 <TL1_car_active>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d105      	bne.n	8000770 <traffic_light_FSM+0x1e8>
 8000764:	f000 ffd0 	bl	8001708 <TL3_car_active>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	f000 8179 	beq.w	8000a62 <traffic_light_FSM+0x4da>
				  && TLFSMTimer >= walkingDelay){
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <traffic_light_FSM+0x234>)
 8000772:	881a      	ldrh	r2, [r3, #0]
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <traffic_light_FSM+0x238>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	429a      	cmp	r2, r3
 800077a:	f0c0 8172 	bcc.w	8000a62 <traffic_light_FSM+0x4da>
			  currentState = Orange;
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <traffic_light_FSM+0x20c>)
 8000780:	2202      	movs	r2, #2
 8000782:	701a      	strb	r2, [r3, #0]
			  previousState = NorthSouth;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <traffic_light_FSM+0x23c>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]

			  //reset timer
			  TLFSMTimer = 0;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <traffic_light_FSM+0x234>)
 800078c:	2200      	movs	r2, #0
 800078e:	801a      	strh	r2, [r3, #0]
		  }


	   break;
 8000790:	e167      	b.n	8000a62 <traffic_light_FSM+0x4da>
 8000792:	bf00      	nop
 8000794:	20000094 	.word	0x20000094
 8000798:	200000b8 	.word	0x200000b8
 800079c:	2000008c 	.word	0x2000008c
 80007a0:	20000098 	.word	0x20000098
 80007a4:	2000008d 	.word	0x2000008d
 80007a8:	2000008e 	.word	0x2000008e
 80007ac:	20000093 	.word	0x20000093
 80007b0:	200000a2 	.word	0x200000a2
 80007b4:	20000008 	.word	0x20000008
 80007b8:	20000000 	.word	0x20000000
 80007bc:	2000009c 	.word	0x2000009c
 80007c0:	20000004 	.word	0x20000004
 80007c4:	20000095 	.word	0x20000095
 80007c8:	2000009e 	.word	0x2000009e
 80007cc:	2000000c 	.word	0x2000000c
 80007d0:	20000002 	.word	0x20000002
 80007d4:	2000000a 	.word	0x2000000a
	   case EastWest : // if current state is EastWest

		   // if semaphore in available, and EastWest LEDs have not been initialized
		   if(BinarySemaphoreLEDsHandle != NULL){
 80007d8:	4ba4      	ldr	r3, [pc, #656]	; (8000a6c <traffic_light_FSM+0x4e4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d035      	beq.n	800084c <traffic_light_FSM+0x2c4>

			   if(eastWestInitialized == false && osSemaphoreAcquire(BinarySemaphoreLEDsHandle, osWaitForever) == osOK){
 80007e0:	4ba3      	ldr	r3, [pc, #652]	; (8000a70 <traffic_light_FSM+0x4e8>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	f083 0301 	eor.w	r3, r3, #1
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d02e      	beq.n	800084c <traffic_light_FSM+0x2c4>
 80007ee:	4b9f      	ldr	r3, [pc, #636]	; (8000a6c <traffic_light_FSM+0x4e4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f04f 31ff 	mov.w	r1, #4294967295
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 fef8 	bl	80055ec <osSemaphoreAcquire>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d124      	bne.n	800084c <traffic_light_FSM+0x2c4>
				   // Access shared LEDs
				   // initialize LEDs
				   reset_traffic_leds(trafficLeds);
 8000802:	489c      	ldr	r0, [pc, #624]	; (8000a74 <traffic_light_FSM+0x4ec>)
 8000804:	f000 fed0 	bl	80015a8 <reset_traffic_leds>
				   set_red_traffic_led(trafficLeds, true, 2);
 8000808:	2202      	movs	r2, #2
 800080a:	2101      	movs	r1, #1
 800080c:	4899      	ldr	r0, [pc, #612]	; (8000a74 <traffic_light_FSM+0x4ec>)
 800080e:	f000 ffbd 	bl	800178c <set_red_traffic_led>
				   set_red_traffic_led(trafficLeds, true, 4);
 8000812:	2204      	movs	r2, #4
 8000814:	2101      	movs	r1, #1
 8000816:	4897      	ldr	r0, [pc, #604]	; (8000a74 <traffic_light_FSM+0x4ec>)
 8000818:	f000 ffb8 	bl	800178c <set_red_traffic_led>
				   set_green_traffic_led(trafficLeds, true, 1);
 800081c:	2201      	movs	r2, #1
 800081e:	2101      	movs	r1, #1
 8000820:	4894      	ldr	r0, [pc, #592]	; (8000a74 <traffic_light_FSM+0x4ec>)
 8000822:	f001 f91b 	bl	8001a5c <set_green_traffic_led>
				   set_green_traffic_led(trafficLeds, true, 3);
 8000826:	2203      	movs	r2, #3
 8000828:	2101      	movs	r1, #1
 800082a:	4892      	ldr	r0, [pc, #584]	; (8000a74 <traffic_light_FSM+0x4ec>)
 800082c:	f001 f916 	bl	8001a5c <set_green_traffic_led>

				   //set east and west lane LEDs as initialized
				   northSouthInitialized = false;
 8000830:	4b91      	ldr	r3, [pc, #580]	; (8000a78 <traffic_light_FSM+0x4f0>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
				   eastWestInitialized = true;
 8000836:	4b8e      	ldr	r3, [pc, #568]	; (8000a70 <traffic_light_FSM+0x4e8>)
 8000838:	2201      	movs	r2, #1
 800083a:	701a      	strb	r2, [r3, #0]
				   orangeInitialized = false;
 800083c:	4b8f      	ldr	r3, [pc, #572]	; (8000a7c <traffic_light_FSM+0x4f4>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]

				   // access over, release semaphore for LEDs
				   osSemaphoreRelease(BinarySemaphoreLEDsHandle);
 8000842:	4b8a      	ldr	r3, [pc, #552]	; (8000a6c <traffic_light_FSM+0x4e4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f004 ff22 	bl	8005690 <osSemaphoreRelease>
			   }
		   }

		   // if PL2Toggle timer equals (pedestrianDelay - orangeDelay) and walking delay has passed
		   if (PL1Toggle == true && toggle1Timer >= (pedestrianDelay - orangeDelay) && TLFSMTimer >= walkingDelay){
 800084c:	4b8c      	ldr	r3, [pc, #560]	; (8000a80 <traffic_light_FSM+0x4f8>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d019      	beq.n	8000888 <traffic_light_FSM+0x300>
 8000854:	4b8b      	ldr	r3, [pc, #556]	; (8000a84 <traffic_light_FSM+0x4fc>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b8b      	ldr	r3, [pc, #556]	; (8000a88 <traffic_light_FSM+0x500>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	4619      	mov	r1, r3
 8000860:	4b8a      	ldr	r3, [pc, #552]	; (8000a8c <traffic_light_FSM+0x504>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	1acb      	subs	r3, r1, r3
 8000866:	429a      	cmp	r2, r3
 8000868:	db0e      	blt.n	8000888 <traffic_light_FSM+0x300>
 800086a:	4b89      	ldr	r3, [pc, #548]	; (8000a90 <traffic_light_FSM+0x508>)
 800086c:	881a      	ldrh	r2, [r3, #0]
 800086e:	4b89      	ldr	r3, [pc, #548]	; (8000a94 <traffic_light_FSM+0x50c>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	429a      	cmp	r2, r3
 8000874:	d308      	bcc.n	8000888 <traffic_light_FSM+0x300>
			   // switch to Orange state
			   currentState = Orange;
 8000876:	4b88      	ldr	r3, [pc, #544]	; (8000a98 <traffic_light_FSM+0x510>)
 8000878:	2202      	movs	r2, #2
 800087a:	701a      	strb	r2, [r3, #0]
			   previousState = EastWest;
 800087c:	4b87      	ldr	r3, [pc, #540]	; (8000a9c <traffic_light_FSM+0x514>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]

			   //reset timer
			   TLFSMTimer = 0;
 8000882:	4b83      	ldr	r3, [pc, #524]	; (8000a90 <traffic_light_FSM+0x508>)
 8000884:	2200      	movs	r2, #0
 8000886:	801a      	strh	r2, [r3, #0]
		   }

		   // if no active cars, and timer has surpassed walkingDelay and greenDelay
		   if((TL1_car_active() == false && TL2_car_active() == false && TL3_car_active() == false && TL4_car_active() == false)
 8000888:	f000 ff1c 	bl	80016c4 <TL1_car_active>
 800088c:	4603      	mov	r3, r0
 800088e:	f083 0301 	eor.w	r3, r3, #1
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d030      	beq.n	80008fa <traffic_light_FSM+0x372>
 8000898:	f000 ff24 	bl	80016e4 <TL2_car_active>
 800089c:	4603      	mov	r3, r0
 800089e:	f083 0301 	eor.w	r3, r3, #1
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d028      	beq.n	80008fa <traffic_light_FSM+0x372>
 80008a8:	f000 ff2e 	bl	8001708 <TL3_car_active>
 80008ac:	4603      	mov	r3, r0
 80008ae:	f083 0301 	eor.w	r3, r3, #1
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d020      	beq.n	80008fa <traffic_light_FSM+0x372>
 80008b8:	f000 ff38 	bl	800172c <TL4_car_active>
 80008bc:	4603      	mov	r3, r0
 80008be:	f083 0301 	eor.w	r3, r3, #1
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d018      	beq.n	80008fa <traffic_light_FSM+0x372>
				   && (PLTimer >= walkingDelay && PLState == North)){
 80008c8:	4b75      	ldr	r3, [pc, #468]	; (8000aa0 <traffic_light_FSM+0x518>)
 80008ca:	881a      	ldrh	r2, [r3, #0]
 80008cc:	4b71      	ldr	r3, [pc, #452]	; (8000a94 <traffic_light_FSM+0x50c>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d312      	bcc.n	80008fa <traffic_light_FSM+0x372>
 80008d4:	4b73      	ldr	r3, [pc, #460]	; (8000aa4 <traffic_light_FSM+0x51c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10e      	bne.n	80008fa <traffic_light_FSM+0x372>
			   if(TLFSMTimer >= greenDelay){
 80008dc:	4b6c      	ldr	r3, [pc, #432]	; (8000a90 <traffic_light_FSM+0x508>)
 80008de:	881a      	ldrh	r2, [r3, #0]
 80008e0:	4b71      	ldr	r3, [pc, #452]	; (8000aa8 <traffic_light_FSM+0x520>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d308      	bcc.n	80008fa <traffic_light_FSM+0x372>
				   // switch to Orange state
				   currentState = Orange;
 80008e8:	4b6b      	ldr	r3, [pc, #428]	; (8000a98 <traffic_light_FSM+0x510>)
 80008ea:	2202      	movs	r2, #2
 80008ec:	701a      	strb	r2, [r3, #0]
				   previousState = EastWest;
 80008ee:	4b6b      	ldr	r3, [pc, #428]	; (8000a9c <traffic_light_FSM+0x514>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	701a      	strb	r2, [r3, #0]

				   //reset timer
				   TLFSMTimer = 0;
 80008f4:	4b66      	ldr	r3, [pc, #408]	; (8000a90 <traffic_light_FSM+0x508>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	801a      	strh	r2, [r3, #0]
			   }
		   }

		   // if car 1 or car 3 is active and car 2 or 4 is active then wait (redDelayMax - orangeDelay) and walkingDelay before switching to orange
		   if ((TL2_car_active() == true || TL4_car_active() == true) && (TL1_car_active() == true || TL3_car_active() == true)){
 80008fa:	f000 fef3 	bl	80016e4 <TL2_car_active>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d104      	bne.n	800090e <traffic_light_FSM+0x386>
 8000904:	f000 ff12 	bl	800172c <TL4_car_active>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d023      	beq.n	8000956 <traffic_light_FSM+0x3ce>
 800090e:	f000 fed9 	bl	80016c4 <TL1_car_active>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d104      	bne.n	8000922 <traffic_light_FSM+0x39a>
 8000918:	f000 fef6 	bl	8001708 <TL3_car_active>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d019      	beq.n	8000956 <traffic_light_FSM+0x3ce>
			   if (TLFSMTimer >= (redDelayMax - orangeDelay) && TLFSMTimer >= walkingDelay){
 8000922:	4b5b      	ldr	r3, [pc, #364]	; (8000a90 <traffic_light_FSM+0x508>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	4b60      	ldr	r3, [pc, #384]	; (8000aac <traffic_light_FSM+0x524>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	4b57      	ldr	r3, [pc, #348]	; (8000a8c <traffic_light_FSM+0x504>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	1acb      	subs	r3, r1, r3
 8000934:	429a      	cmp	r2, r3
 8000936:	db0e      	blt.n	8000956 <traffic_light_FSM+0x3ce>
 8000938:	4b55      	ldr	r3, [pc, #340]	; (8000a90 <traffic_light_FSM+0x508>)
 800093a:	881a      	ldrh	r2, [r3, #0]
 800093c:	4b55      	ldr	r3, [pc, #340]	; (8000a94 <traffic_light_FSM+0x50c>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	429a      	cmp	r2, r3
 8000942:	d308      	bcc.n	8000956 <traffic_light_FSM+0x3ce>
				   currentState = Orange;
 8000944:	4b54      	ldr	r3, [pc, #336]	; (8000a98 <traffic_light_FSM+0x510>)
 8000946:	2202      	movs	r2, #2
 8000948:	701a      	strb	r2, [r3, #0]
				   previousState = EastWest;
 800094a:	4b54      	ldr	r3, [pc, #336]	; (8000a9c <traffic_light_FSM+0x514>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]

				   // reset timer
				   TLFSMTimer = 0;
 8000950:	4b4f      	ldr	r3, [pc, #316]	; (8000a90 <traffic_light_FSM+0x508>)
 8000952:	2200      	movs	r2, #0
 8000954:	801a      	strh	r2, [r3, #0]
			   }
		   }

		   // if car 2 or 4 is active and car 1 and 3 is inactive and walkingDelay has passed then change directly to orange state
		   if (((TL2_car_active() == true || TL4_car_active() == true) && (TL1_car_active() == false && TL3_car_active() == false))
 8000956:	f000 fec5 	bl	80016e4 <TL2_car_active>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d104      	bne.n	800096a <traffic_light_FSM+0x3e2>
 8000960:	f000 fee4 	bl	800172c <TL4_car_active>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d07d      	beq.n	8000a66 <traffic_light_FSM+0x4de>
 800096a:	f000 feab 	bl	80016c4 <TL1_car_active>
 800096e:	4603      	mov	r3, r0
 8000970:	f083 0301 	eor.w	r3, r3, #1
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	d075      	beq.n	8000a66 <traffic_light_FSM+0x4de>
 800097a:	f000 fec5 	bl	8001708 <TL3_car_active>
 800097e:	4603      	mov	r3, r0
 8000980:	f083 0301 	eor.w	r3, r3, #1
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d06d      	beq.n	8000a66 <traffic_light_FSM+0x4de>
				   && TLFSMTimer >= walkingDelay){
 800098a:	4b41      	ldr	r3, [pc, #260]	; (8000a90 <traffic_light_FSM+0x508>)
 800098c:	881a      	ldrh	r2, [r3, #0]
 800098e:	4b41      	ldr	r3, [pc, #260]	; (8000a94 <traffic_light_FSM+0x50c>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	429a      	cmp	r2, r3
 8000994:	d367      	bcc.n	8000a66 <traffic_light_FSM+0x4de>
			   currentState = Orange;
 8000996:	4b40      	ldr	r3, [pc, #256]	; (8000a98 <traffic_light_FSM+0x510>)
 8000998:	2202      	movs	r2, #2
 800099a:	701a      	strb	r2, [r3, #0]
			   previousState = EastWest;
 800099c:	4b3f      	ldr	r3, [pc, #252]	; (8000a9c <traffic_light_FSM+0x514>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]

			   //reset timer
			   TLFSMTimer = 0;
 80009a2:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <traffic_light_FSM+0x508>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	801a      	strh	r2, [r3, #0]
		   }


	   break;
 80009a8:	e05d      	b.n	8000a66 <traffic_light_FSM+0x4de>
	   case Orange :
		   if(BinarySemaphoreLEDsHandle != NULL){
 80009aa:	4b30      	ldr	r3, [pc, #192]	; (8000a6c <traffic_light_FSM+0x4e4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d042      	beq.n	8000a38 <traffic_light_FSM+0x4b0>
			   // if semaphore in available, and northSouth LEDs have not been initialized
			   if(orangeInitialized == false && osSemaphoreAcquire(BinarySemaphoreLEDsHandle, osWaitForever) == osOK){
 80009b2:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <traffic_light_FSM+0x4f4>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	f083 0301 	eor.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d03b      	beq.n	8000a38 <traffic_light_FSM+0x4b0>
 80009c0:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <traffic_light_FSM+0x4e4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295
 80009c8:	4618      	mov	r0, r3
 80009ca:	f004 fe0f 	bl	80055ec <osSemaphoreAcquire>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d131      	bne.n	8000a38 <traffic_light_FSM+0x4b0>
				   // Access shared LEDs
				   // initialize LEDs
				   reset_traffic_leds(trafficLeds);
 80009d4:	4827      	ldr	r0, [pc, #156]	; (8000a74 <traffic_light_FSM+0x4ec>)
 80009d6:	f000 fde7 	bl	80015a8 <reset_traffic_leds>
				   set_yellow_traffic_led(trafficLeds, true, 1);
 80009da:	2201      	movs	r2, #1
 80009dc:	2101      	movs	r1, #1
 80009de:	4825      	ldr	r0, [pc, #148]	; (8000a74 <traffic_light_FSM+0x4ec>)
 80009e0:	f000 ff88 	bl	80018f4 <set_yellow_traffic_led>
				   set_yellow_traffic_led(trafficLeds, true, 2);
 80009e4:	2202      	movs	r2, #2
 80009e6:	2101      	movs	r1, #1
 80009e8:	4822      	ldr	r0, [pc, #136]	; (8000a74 <traffic_light_FSM+0x4ec>)
 80009ea:	f000 ff83 	bl	80018f4 <set_yellow_traffic_led>
				   set_yellow_traffic_led(trafficLeds, true, 3);
 80009ee:	2203      	movs	r2, #3
 80009f0:	2101      	movs	r1, #1
 80009f2:	4820      	ldr	r0, [pc, #128]	; (8000a74 <traffic_light_FSM+0x4ec>)
 80009f4:	f000 ff7e 	bl	80018f4 <set_yellow_traffic_led>
				   set_yellow_traffic_led(trafficLeds, true, 4);
 80009f8:	2204      	movs	r2, #4
 80009fa:	2101      	movs	r1, #1
 80009fc:	481d      	ldr	r0, [pc, #116]	; (8000a74 <traffic_light_FSM+0x4ec>)
 80009fe:	f000 ff79 	bl	80018f4 <set_yellow_traffic_led>

				   reset_pedestrian_leds(trafficLeds);
 8000a02:	481c      	ldr	r0, [pc, #112]	; (8000a74 <traffic_light_FSM+0x4ec>)
 8000a04:	f000 fe19 	bl	800163a <reset_pedestrian_leds>
				   set_red_PL_led(trafficLeds, true, 1);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	4819      	ldr	r0, [pc, #100]	; (8000a74 <traffic_light_FSM+0x4ec>)
 8000a0e:	f001 f8d9 	bl	8001bc4 <set_red_PL_led>
				   set_red_PL_led(trafficLeds, true, 2);
 8000a12:	2202      	movs	r2, #2
 8000a14:	2101      	movs	r1, #1
 8000a16:	4817      	ldr	r0, [pc, #92]	; (8000a74 <traffic_light_FSM+0x4ec>)
 8000a18:	f001 f8d4 	bl	8001bc4 <set_red_PL_led>


				   //set orange LEDs as initialized
				   northSouthInitialized = false;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <traffic_light_FSM+0x4f0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
				   eastWestInitialized = false;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <traffic_light_FSM+0x4e8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
				   orangeInitialized = true;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <traffic_light_FSM+0x4f4>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]

				   // access over, release semaphore for LEDs
				   osSemaphoreRelease(BinarySemaphoreLEDsHandle);
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <traffic_light_FSM+0x4e4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f004 fe2c 	bl	8005690 <osSemaphoreRelease>
			   }
		   }


		   // if time in Orange state has surpassed orangeDelay
		   if(TLFSMTimer >= orangeDelay){
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <traffic_light_FSM+0x508>)
 8000a3a:	881a      	ldrh	r2, [r3, #0]
 8000a3c:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <traffic_light_FSM+0x504>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d335      	bcc.n	8000ab0 <traffic_light_FSM+0x528>
			   if(previousState == NorthSouth){ // if the previous state was NorthSouth
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <traffic_light_FSM+0x514>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d103      	bne.n	8000a54 <traffic_light_FSM+0x4cc>
				   // switch to EastWest
				   currentState = EastWest;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <traffic_light_FSM+0x510>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
 8000a52:	e002      	b.n	8000a5a <traffic_light_FSM+0x4d2>
			   } else{ // if the previous state was EastWest
				   // switch to NorthSouth
				   currentState = NorthSouth;
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <traffic_light_FSM+0x510>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
			   }

			   //reset timer
			   TLFSMTimer = 0;
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <traffic_light_FSM+0x508>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	801a      	strh	r2, [r3, #0]
		   }

		break;
 8000a60:	e026      	b.n	8000ab0 <traffic_light_FSM+0x528>
	   break;
 8000a62:	bf00      	nop
 8000a64:	e025      	b.n	8000ab2 <traffic_light_FSM+0x52a>
	   break;
 8000a66:	bf00      	nop
 8000a68:	e023      	b.n	8000ab2 <traffic_light_FSM+0x52a>
 8000a6a:	bf00      	nop
 8000a6c:	200000b8 	.word	0x200000b8
 8000a70:	2000008d 	.word	0x2000008d
 8000a74:	20000098 	.word	0x20000098
 8000a78:	2000008c 	.word	0x2000008c
 8000a7c:	2000008e 	.word	0x2000008e
 8000a80:	20000092 	.word	0x20000092
 8000a84:	200000a0 	.word	0x200000a0
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	2000009c 	.word	0x2000009c
 8000a94:	20000004 	.word	0x20000004
 8000a98:	20000094 	.word	0x20000094
 8000a9c:	20000095 	.word	0x20000095
 8000aa0:	2000009e 	.word	0x2000009e
 8000aa4:	2000000c 	.word	0x2000000c
 8000aa8:	20000002 	.word	0x20000002
 8000aac:	2000000a 	.word	0x2000000a
		break;
 8000ab0:	bf00      	nop
		default:
			// do nothing (will never reach)
		}

	  // add 100 ms to the active time in state
	  TLFSMTimer += 100;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <traffic_light_FSM+0x544>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	3364      	adds	r3, #100	; 0x64
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <traffic_light_FSM+0x544>)
 8000abc:	801a      	strh	r2, [r3, #0]

	  // delay until next period
	  vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	68f9      	ldr	r1, [r7, #12]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f006 f8d5 	bl	8006c74 <vTaskDelayUntil>
	  switch(currentState){
 8000aca:	e567      	b.n	800059c <traffic_light_FSM+0x14>
 8000acc:	2000009c 	.word	0x2000009c

08000ad0 <pedestrian_light1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pedestrian_light1 */
void pedestrian_light1(void *argument)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pedestrian_light1 */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(100) ; // 100 ms task period
 8000ad8:	2364      	movs	r3, #100	; 0x64
 8000ada:	60fb      	str	r3, [r7, #12]
	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8000adc:	f006 fa98 	bl	8007010 <xTaskGetTickCount>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
	switch(PLState){
 8000ae4:	4b7c      	ldr	r3, [pc, #496]	; (8000cd8 <pedestrian_light1+0x208>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	f000 8093 	beq.w	8000c14 <pedestrian_light1+0x144>
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	f300 80e4 	bgt.w	8000cbc <pedestrian_light1+0x1ec>
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <pedestrian_light1+0x2e>
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d046      	beq.n	8000b8a <pedestrian_light1+0xba>
 8000afc:	e0de      	b.n	8000cbc <pedestrian_light1+0x1ec>
    case North : // if current state is North

    	// if semaphore is available and North state LEDs have not been initialized
    	if(northInitialized == false && osSemaphoreAcquire(BinarySemaphoreLEDsHandle, osWaitForever) == osOK){
 8000afe:	4b77      	ldr	r3, [pc, #476]	; (8000cdc <pedestrian_light1+0x20c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	f083 0301 	eor.w	r3, r3, #1
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d024      	beq.n	8000b56 <pedestrian_light1+0x86>
 8000b0c:	4b74      	ldr	r3, [pc, #464]	; (8000ce0 <pedestrian_light1+0x210>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f04f 31ff 	mov.w	r1, #4294967295
 8000b14:	4618      	mov	r0, r3
 8000b16:	f004 fd69 	bl	80055ec <osSemaphoreAcquire>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d11a      	bne.n	8000b56 <pedestrian_light1+0x86>
    		// access shared LEDs
    		// initialize LEDs
    		reset_pedestrian_leds(trafficLeds);
 8000b20:	4870      	ldr	r0, [pc, #448]	; (8000ce4 <pedestrian_light1+0x214>)
 8000b22:	f000 fd8a 	bl	800163a <reset_pedestrian_leds>
    		set_red_PL_led(trafficLeds, true, 1);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2101      	movs	r1, #1
 8000b2a:	486e      	ldr	r0, [pc, #440]	; (8000ce4 <pedestrian_light1+0x214>)
 8000b2c:	f001 f84a 	bl	8001bc4 <set_red_PL_led>
    		set_green_PL_led(trafficLeds, true, 2);
 8000b30:	2202      	movs	r2, #2
 8000b32:	2101      	movs	r1, #1
 8000b34:	486b      	ldr	r0, [pc, #428]	; (8000ce4 <pedestrian_light1+0x214>)
 8000b36:	f001 f8a1 	bl	8001c7c <set_green_PL_led>

    		// set red pedestrian LEDs as initialized
    		northInitialized = true;
 8000b3a:	4b68      	ldr	r3, [pc, #416]	; (8000cdc <pedestrian_light1+0x20c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
    		westInitialized = false;
 8000b40:	4b69      	ldr	r3, [pc, #420]	; (8000ce8 <pedestrian_light1+0x218>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
    		toggleInitialized = false;
 8000b46:	4b69      	ldr	r3, [pc, #420]	; (8000cec <pedestrian_light1+0x21c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]

    		// access over, release semaphore for LEDs
    		osSemaphoreRelease(BinarySemaphoreLEDsHandle);
 8000b4c:	4b64      	ldr	r3, [pc, #400]	; (8000ce0 <pedestrian_light1+0x210>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f004 fd9d 	bl	8005690 <osSemaphoreRelease>
    	}

    	// if first pedestrian button is hit
    	if (PL1_switch_hit() == true){
 8000b56:	f000 fdf9 	bl	800174c <PL1_switch_hit>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d008      	beq.n	8000b72 <pedestrian_light1+0xa2>
    		// switch to Toggle state
    		PLState = Toggle;
 8000b60:	4b5d      	ldr	r3, [pc, #372]	; (8000cd8 <pedestrian_light1+0x208>)
 8000b62:	2202      	movs	r2, #2
 8000b64:	701a      	strb	r2, [r3, #0]
    		PLPreviousState = North;
 8000b66:	4b62      	ldr	r3, [pc, #392]	; (8000cf0 <pedestrian_light1+0x220>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]

    		// reset timer
    		PLTimer = 0;
 8000b6c:	4b61      	ldr	r3, [pc, #388]	; (8000cf4 <pedestrian_light1+0x224>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	801a      	strh	r2, [r3, #0]
    	}

    	// if current state of traffic light FSM is NorthSouth
    	if (currentState == NorthSouth){
 8000b72:	4b61      	ldr	r3, [pc, #388]	; (8000cf8 <pedestrian_light1+0x228>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 809b 	bne.w	8000cb2 <pedestrian_light1+0x1e2>
    		// switch to West state
    		PLState = West;
 8000b7c:	4b56      	ldr	r3, [pc, #344]	; (8000cd8 <pedestrian_light1+0x208>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]

    		// reset timer
    		PLTimer = 0;
 8000b82:	4b5c      	ldr	r3, [pc, #368]	; (8000cf4 <pedestrian_light1+0x224>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	801a      	strh	r2, [r3, #0]
    	}


    break;
 8000b88:	e093      	b.n	8000cb2 <pedestrian_light1+0x1e2>
    case West : // if current state is West

    	// if semaphore is available and West LEDs have not been initialized
    	if(westInitialized == false && osSemaphoreAcquire(BinarySemaphoreLEDsHandle, osWaitForever) == osOK){
 8000b8a:	4b57      	ldr	r3, [pc, #348]	; (8000ce8 <pedestrian_light1+0x218>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	f083 0301 	eor.w	r3, r3, #1
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d024      	beq.n	8000be2 <pedestrian_light1+0x112>
 8000b98:	4b51      	ldr	r3, [pc, #324]	; (8000ce0 <pedestrian_light1+0x210>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f004 fd23 	bl	80055ec <osSemaphoreAcquire>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d11a      	bne.n	8000be2 <pedestrian_light1+0x112>
    		// access shared LEDs
    		// initialize LEDs
    		reset_pedestrian_leds(trafficLeds);
 8000bac:	484d      	ldr	r0, [pc, #308]	; (8000ce4 <pedestrian_light1+0x214>)
 8000bae:	f000 fd44 	bl	800163a <reset_pedestrian_leds>
    		set_green_PL_led(trafficLeds, true, 1);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	484b      	ldr	r0, [pc, #300]	; (8000ce4 <pedestrian_light1+0x214>)
 8000bb8:	f001 f860 	bl	8001c7c <set_green_PL_led>
    		set_red_PL_led(trafficLeds, true, 2);
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4848      	ldr	r0, [pc, #288]	; (8000ce4 <pedestrian_light1+0x214>)
 8000bc2:	f000 ffff 	bl	8001bc4 <set_red_PL_led>

    		// set green pedestrian LEDs as initialized
    		northInitialized = false;
 8000bc6:	4b45      	ldr	r3, [pc, #276]	; (8000cdc <pedestrian_light1+0x20c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
    		westInitialized = true;
 8000bcc:	4b46      	ldr	r3, [pc, #280]	; (8000ce8 <pedestrian_light1+0x218>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
    		toggleInitialized = false;
 8000bd2:	4b46      	ldr	r3, [pc, #280]	; (8000cec <pedestrian_light1+0x21c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]

    		// access over, release semaphore for LEDs
    		osSemaphoreRelease(BinarySemaphoreLEDsHandle);
 8000bd8:	4b41      	ldr	r3, [pc, #260]	; (8000ce0 <pedestrian_light1+0x210>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f004 fd57 	bl	8005690 <osSemaphoreRelease>

    	}

    	// if second pedestrian button is hit
    	if (PL2_switch_hit() == true){
 8000be2:	f000 fdc3 	bl	800176c <PL2_switch_hit>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d008      	beq.n	8000bfe <pedestrian_light1+0x12e>
    		// switch to Toggle state
    		PLState = Toggle;
 8000bec:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <pedestrian_light1+0x208>)
 8000bee:	2202      	movs	r2, #2
 8000bf0:	701a      	strb	r2, [r3, #0]
    		PLPreviousState = West;
 8000bf2:	4b3f      	ldr	r3, [pc, #252]	; (8000cf0 <pedestrian_light1+0x220>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]

    		// reset timer
    		PLTimer = 0;
 8000bf8:	4b3e      	ldr	r3, [pc, #248]	; (8000cf4 <pedestrian_light1+0x224>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	801a      	strh	r2, [r3, #0]
    	}

    	// if current state of traffic light FSM is EastWest
    	if (currentState == EastWest){
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <pedestrian_light1+0x228>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d157      	bne.n	8000cb6 <pedestrian_light1+0x1e6>
    		// switch to North state
    		PLState = North;
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <pedestrian_light1+0x208>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]

    		// reset timer
    		PLTimer = 0;
 8000c0c:	4b39      	ldr	r3, [pc, #228]	; (8000cf4 <pedestrian_light1+0x224>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	801a      	strh	r2, [r3, #0]
    	}

    break;
 8000c12:	e050      	b.n	8000cb6 <pedestrian_light1+0x1e6>
    case Toggle : // if current state is Toggle

    	if(toggleInitialized == false && osSemaphoreAcquire(BinarySemaphoreLEDsHandle, osWaitForever) == osOK){
 8000c14:	4b35      	ldr	r3, [pc, #212]	; (8000cec <pedestrian_light1+0x21c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	f083 0301 	eor.w	r3, r3, #1
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d026      	beq.n	8000c70 <pedestrian_light1+0x1a0>
 8000c22:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <pedestrian_light1+0x210>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f004 fcde 	bl	80055ec <osSemaphoreAcquire>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d11c      	bne.n	8000c70 <pedestrian_light1+0x1a0>

    		// set toggle state as initialized
    		northInitialized = false;
 8000c36:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <pedestrian_light1+0x20c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
    		westInitialized = false;
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <pedestrian_light1+0x218>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
    		toggleInitialized = true;
 8000c42:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <pedestrian_light1+0x21c>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]

    		// enable toggling
    		if(PLPreviousState == North){ // if previous state was North
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <pedestrian_light1+0x220>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d103      	bne.n	8000c58 <pedestrian_light1+0x188>
    			PL1Toggle = true; // task "PL1_toggle" goes from blocked to active state
 8000c50:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <pedestrian_light1+0x22c>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
 8000c56:	e006      	b.n	8000c66 <pedestrian_light1+0x196>
    		} else if (PLPreviousState == West){ // if previous state was West
 8000c58:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <pedestrian_light1+0x220>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d102      	bne.n	8000c66 <pedestrian_light1+0x196>
    			PL2Toggle = true; // task "PL2_toggle" goes from blocked to active state
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <pedestrian_light1+0x230>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
    		}


    		// access over, release semaphore for LEDs
    		osSemaphoreRelease(BinarySemaphoreLEDsHandle);
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <pedestrian_light1+0x210>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f004 fd10 	bl	8005690 <osSemaphoreRelease>

    	}

    	// when toggle is over change state
    	if(PL1Toggle == false && PL2Toggle == false){ // if pedestrian toggle 1 or 2 is false
 8000c70:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <pedestrian_light1+0x22c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	f083 0301 	eor.w	r3, r3, #1
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d01d      	beq.n	8000cba <pedestrian_light1+0x1ea>
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <pedestrian_light1+0x230>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	f083 0301 	eor.w	r3, r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d016      	beq.n	8000cba <pedestrian_light1+0x1ea>
    		if (PLPreviousState == North){ // previous state is North
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <pedestrian_light1+0x220>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d103      	bne.n	8000c9c <pedestrian_light1+0x1cc>
    			PLState = West; // switch to West state
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <pedestrian_light1+0x208>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e006      	b.n	8000caa <pedestrian_light1+0x1da>
    		} else if (PLPreviousState == West){ // previous state is West
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <pedestrian_light1+0x220>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d102      	bne.n	8000caa <pedestrian_light1+0x1da>
    			PLState = North; // switch to North state
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <pedestrian_light1+0x208>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
    		}
    		// reset timer
    		PLTimer = 0;
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <pedestrian_light1+0x224>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	801a      	strh	r2, [r3, #0]
    	}

    break;
 8000cb0:	e003      	b.n	8000cba <pedestrian_light1+0x1ea>
    break;
 8000cb2:	bf00      	nop
 8000cb4:	e002      	b.n	8000cbc <pedestrian_light1+0x1ec>
    break;
 8000cb6:	bf00      	nop
 8000cb8:	e000      	b.n	8000cbc <pedestrian_light1+0x1ec>
    break;
 8000cba:	bf00      	nop
    default :
    	// do nothing, will never reach
    }

    // add 100 ms to timer
    PLTimer += 100;
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <pedestrian_light1+0x224>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	3364      	adds	r3, #100	; 0x64
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <pedestrian_light1+0x224>)
 8000cc6:	801a      	strh	r2, [r3, #0]

    // delay until next period
    vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	68f9      	ldr	r1, [r7, #12]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f005 ffd0 	bl	8006c74 <vTaskDelayUntil>
	switch(PLState){
 8000cd4:	e706      	b.n	8000ae4 <pedestrian_light1+0x14>
 8000cd6:	bf00      	nop
 8000cd8:	2000000c 	.word	0x2000000c
 8000cdc:	2000008f 	.word	0x2000008f
 8000ce0:	200000b8 	.word	0x200000b8
 8000ce4:	20000098 	.word	0x20000098
 8000ce8:	20000090 	.word	0x20000090
 8000cec:	20000091 	.word	0x20000091
 8000cf0:	20000096 	.word	0x20000096
 8000cf4:	2000009e 	.word	0x2000009e
 8000cf8:	20000094 	.word	0x20000094
 8000cfc:	20000092 	.word	0x20000092
 8000d00:	20000093 	.word	0x20000093

08000d04 <PL1_toggle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PL1_toggle */
void PL1_toggle(void *argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PL1_toggle */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(toggleFreq) ; // toggleFreq ms task period
 8000d0c:	4b43      	ldr	r3, [pc, #268]	; (8000e1c <PL1_toggle+0x118>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	fb02 f303 	mul.w	r3, r2, r3
 8000d1a:	4a41      	ldr	r2, [pc, #260]	; (8000e20 <PL1_toggle+0x11c>)
 8000d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d20:	099b      	lsrs	r3, r3, #6
 8000d22:	617b      	str	r3, [r7, #20]
	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8000d24:	f006 f974 	bl	8007010 <xTaskGetTickCount>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  if (PL1Toggle == true){ // check if PL FSM is in toggle state
 8000d2c:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <PL1_toggle+0x120>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d06c      	beq.n	8000e0e <PL1_toggle+0x10a>
		  // task has gone from blocked to active state

		  uint8_t modifiedBitSequence; // 8 bit sequence, representing modified bit sequence

		  // check if traffic light FSM current state is NorthSouth
		  if(currentState == NorthSouth){
 8000d34:	4b3c      	ldr	r3, [pc, #240]	; (8000e28 <PL1_toggle+0x124>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d106      	bne.n	8000d4a <PL1_toggle+0x46>
			  // leave toggle state
			  // turn task to blocked state
			  PL1Toggle = false;
 8000d3c:	4b39      	ldr	r3, [pc, #228]	; (8000e24 <PL1_toggle+0x120>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
			  // reset timer
			  toggle1Timer = 0;
 8000d42:	4b3a      	ldr	r3, [pc, #232]	; (8000e2c <PL1_toggle+0x128>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	801a      	strh	r2, [r3, #0]
			  continue;
 8000d48:	e067      	b.n	8000e1a <PL1_toggle+0x116>
		  }

		  // check if semaphore is available, acquire it
		  if (osSemaphoreAcquire(BinarySemaphoreLEDsHandle, osWaitForever) == osOK){
 8000d4a:	4b39      	ldr	r3, [pc, #228]	; (8000e30 <PL1_toggle+0x12c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d52:	4618      	mov	r0, r3
 8000d54:	f004 fc4a 	bl	80055ec <osSemaphoreAcquire>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d113      	bne.n	8000d86 <PL1_toggle+0x82>
			  // shared LEDs accessed

			  // turn blue PL LED on
			  modifiedBitSequence = modify_bit(trafficLeds[0], 2, 1);
 8000d5e:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <PL1_toggle+0x130>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2201      	movs	r2, #1
 8000d64:	2102      	movs	r1, #2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 ffe4 	bl	8001d34 <modify_bit>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	74fb      	strb	r3, [r7, #19]
			  trafficLeds[0] = modifiedBitSequence;
 8000d70:	4a30      	ldr	r2, [pc, #192]	; (8000e34 <PL1_toggle+0x130>)
 8000d72:	7cfb      	ldrb	r3, [r7, #19]
 8000d74:	7013      	strb	r3, [r2, #0]
			  set_traffic_leds(trafficLeds);
 8000d76:	482f      	ldr	r0, [pc, #188]	; (8000e34 <PL1_toggle+0x130>)
 8000d78:	f000 fbcc 	bl	8001514 <set_traffic_leds>

			  // release semaphore
		      osSemaphoreRelease(BinarySemaphoreLEDsHandle);
 8000d7c:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <PL1_toggle+0x12c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f004 fc85 	bl	8005690 <osSemaphoreRelease>
		  }

	  	  // wait half of toggleFreq
	  	  osDelay(toggleFreq/2);
 8000d86:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <PL1_toggle+0x118>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	085b      	lsrs	r3, r3, #1
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f004 fb88 	bl	80054a4 <osDelay>

	  	  // check if semaphore is available, acquire it
	  	  if (osSemaphoreAcquire(BinarySemaphoreLEDsHandle, osWaitForever) == osOK){
 8000d94:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <PL1_toggle+0x12c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f004 fc25 	bl	80055ec <osSemaphoreAcquire>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d113      	bne.n	8000dd0 <PL1_toggle+0xcc>
	  		  // shared LEDs accessed

			  // turn blue PL LED off
			  modifiedBitSequence = modify_bit(trafficLeds[0], 2, 0);
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <PL1_toggle+0x130>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2200      	movs	r2, #0
 8000dae:	2102      	movs	r1, #2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 ffbf 	bl	8001d34 <modify_bit>
 8000db6:	4603      	mov	r3, r0
 8000db8:	74fb      	strb	r3, [r7, #19]
			  trafficLeds[0] = modifiedBitSequence;
 8000dba:	4a1e      	ldr	r2, [pc, #120]	; (8000e34 <PL1_toggle+0x130>)
 8000dbc:	7cfb      	ldrb	r3, [r7, #19]
 8000dbe:	7013      	strb	r3, [r2, #0]
			  set_traffic_leds(trafficLeds);
 8000dc0:	481c      	ldr	r0, [pc, #112]	; (8000e34 <PL1_toggle+0x130>)
 8000dc2:	f000 fba7 	bl	8001514 <set_traffic_leds>

			  // release semaphore
		      osSemaphoreRelease(BinarySemaphoreLEDsHandle);
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <PL1_toggle+0x12c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f004 fc60 	bl	8005690 <osSemaphoreRelease>
	  	  }



	  	  // update timer, appending toggleFreq
	  	  toggle1Timer += toggleFreq;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <PL1_toggle+0x128>)
 8000dd2:	881a      	ldrh	r2, [r3, #0]
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <PL1_toggle+0x118>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <PL1_toggle+0x128>)
 8000dde:	801a      	strh	r2, [r3, #0]

		  if(toggle1Timer >= pedestrianDelay && TLFSMTimer >= (walkingDelay + orangeDelay)){ // check if timer has reached pedestrianDelay and walkingDelay has passed
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <PL1_toggle+0x128>)
 8000de2:	881a      	ldrh	r2, [r3, #0]
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <PL1_toggle+0x134>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d310      	bcc.n	8000e0e <PL1_toggle+0x10a>
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <PL1_toggle+0x138>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <PL1_toggle+0x13c>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	4619      	mov	r1, r3
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <PL1_toggle+0x140>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	440b      	add	r3, r1
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	db05      	blt.n	8000e0e <PL1_toggle+0x10a>
			  // leave toggle state
			  // turn task to blocked state
			  PL1Toggle = false;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <PL1_toggle+0x120>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]

			  // reset timer
			  toggle1Timer = 0;
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <PL1_toggle+0x128>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	801a      	strh	r2, [r3, #0]
		  }

      }

	  // delay until next period
      vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	6979      	ldr	r1, [r7, #20]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f005 ff2d 	bl	8006c74 <vTaskDelayUntil>
	  if (PL1Toggle == true){ // check if PL FSM is in toggle state
 8000e1a:	e787      	b.n	8000d2c <PL1_toggle+0x28>
 8000e1c:	20000006 	.word	0x20000006
 8000e20:	10624dd3 	.word	0x10624dd3
 8000e24:	20000092 	.word	0x20000092
 8000e28:	20000094 	.word	0x20000094
 8000e2c:	200000a0 	.word	0x200000a0
 8000e30:	200000b8 	.word	0x200000b8
 8000e34:	20000098 	.word	0x20000098
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	2000009c 	.word	0x2000009c
 8000e40:	20000004 	.word	0x20000004
 8000e44:	20000000 	.word	0x20000000

08000e48 <PL2_toggle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PL2_toggle */
void PL2_toggle(void *argument)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PL2_toggle */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(toggleFreq) ; // toggleFreq ms task period
 8000e50:	4b43      	ldr	r3, [pc, #268]	; (8000f60 <PL2_toggle+0x118>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fb02 f303 	mul.w	r3, r2, r3
 8000e5e:	4a41      	ldr	r2, [pc, #260]	; (8000f64 <PL2_toggle+0x11c>)
 8000e60:	fba2 2303 	umull	r2, r3, r2, r3
 8000e64:	099b      	lsrs	r3, r3, #6
 8000e66:	617b      	str	r3, [r7, #20]
	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8000e68:	f006 f8d2 	bl	8007010 <xTaskGetTickCount>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
    if(PL2Toggle == true){ // check if PL FSM is in toggle state
 8000e70:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <PL2_toggle+0x120>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d06c      	beq.n	8000f52 <PL2_toggle+0x10a>
    	// task has entered active state from blocked state

    	uint8_t modifiedBitSequence; // 8 bit sequence, representing modified bit sequence

    	// check if traffic light FSM current state is NorthSouth
		if(currentState == EastWest){
 8000e78:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <PL2_toggle+0x124>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d106      	bne.n	8000e8e <PL2_toggle+0x46>
			// leave toggle state
			// turn task to blocked state
			PL2Toggle = false;
 8000e80:	4b39      	ldr	r3, [pc, #228]	; (8000f68 <PL2_toggle+0x120>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
			// reset timer
			toggle2Timer = 0;
 8000e86:	4b3a      	ldr	r3, [pc, #232]	; (8000f70 <PL2_toggle+0x128>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	801a      	strh	r2, [r3, #0]
			continue;
 8000e8c:	e067      	b.n	8000f5e <PL2_toggle+0x116>
		}

		// check if semaphore is available, acquire it
		if (osSemaphoreAcquire(BinarySemaphoreLEDsHandle, osWaitForever) == osOK){
 8000e8e:	4b39      	ldr	r3, [pc, #228]	; (8000f74 <PL2_toggle+0x12c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f04f 31ff 	mov.w	r1, #4294967295
 8000e96:	4618      	mov	r0, r3
 8000e98:	f004 fba8 	bl	80055ec <osSemaphoreAcquire>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d113      	bne.n	8000eca <PL2_toggle+0x82>

			// turn blue PL LED on
			modifiedBitSequence = modify_bit(trafficLeds[1], 2, 1);
 8000ea2:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <PL2_toggle+0x130>)
 8000ea4:	785b      	ldrb	r3, [r3, #1]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 ff42 	bl	8001d34 <modify_bit>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	74fb      	strb	r3, [r7, #19]
			trafficLeds[1] = modifiedBitSequence;
 8000eb4:	4a30      	ldr	r2, [pc, #192]	; (8000f78 <PL2_toggle+0x130>)
 8000eb6:	7cfb      	ldrb	r3, [r7, #19]
 8000eb8:	7053      	strb	r3, [r2, #1]
			set_traffic_leds(trafficLeds);
 8000eba:	482f      	ldr	r0, [pc, #188]	; (8000f78 <PL2_toggle+0x130>)
 8000ebc:	f000 fb2a 	bl	8001514 <set_traffic_leds>

			// release semaphore
			osSemaphoreRelease(BinarySemaphoreLEDsHandle);
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <PL2_toggle+0x12c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f004 fbe3 	bl	8005690 <osSemaphoreRelease>
		}

		// wait half of toggleFreq
		osDelay(toggleFreq/2);
 8000eca:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <PL2_toggle+0x118>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	085b      	lsrs	r3, r3, #1
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f004 fae6 	bl	80054a4 <osDelay>

		// check if semaphore is available, acquire it
		if (osSemaphoreAcquire(BinarySemaphoreLEDsHandle, osWaitForever) == osOK){
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <PL2_toggle+0x12c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f004 fb83 	bl	80055ec <osSemaphoreAcquire>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d113      	bne.n	8000f14 <PL2_toggle+0xcc>
			// turn blue PL LED off
			modifiedBitSequence = modify_bit(trafficLeds[1], 2, 0);
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <PL2_toggle+0x130>)
 8000eee:	785b      	ldrb	r3, [r3, #1]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 ff1d 	bl	8001d34 <modify_bit>
 8000efa:	4603      	mov	r3, r0
 8000efc:	74fb      	strb	r3, [r7, #19]
			trafficLeds[1] = modifiedBitSequence;
 8000efe:	4a1e      	ldr	r2, [pc, #120]	; (8000f78 <PL2_toggle+0x130>)
 8000f00:	7cfb      	ldrb	r3, [r7, #19]
 8000f02:	7053      	strb	r3, [r2, #1]
			set_traffic_leds(trafficLeds);
 8000f04:	481c      	ldr	r0, [pc, #112]	; (8000f78 <PL2_toggle+0x130>)
 8000f06:	f000 fb05 	bl	8001514 <set_traffic_leds>

			// release semaphore
			osSemaphoreRelease(BinarySemaphoreLEDsHandle);
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <PL2_toggle+0x12c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 fbbe 	bl	8005690 <osSemaphoreRelease>
		  }

		// update timer, appending toggleFreq
		toggle2Timer += toggleFreq;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <PL2_toggle+0x128>)
 8000f16:	881a      	ldrh	r2, [r3, #0]
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <PL2_toggle+0x118>)
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <PL2_toggle+0x128>)
 8000f22:	801a      	strh	r2, [r3, #0]


		if(toggle2Timer >= pedestrianDelay && TLFSMTimer >= (walkingDelay + orangeDelay)){ // check if timer has reached pedestrianDelay and walkingDelay has passed
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <PL2_toggle+0x128>)
 8000f26:	881a      	ldrh	r2, [r3, #0]
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <PL2_toggle+0x134>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d310      	bcc.n	8000f52 <PL2_toggle+0x10a>
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <PL2_toggle+0x138>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <PL2_toggle+0x13c>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <PL2_toggle+0x140>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	440b      	add	r3, r1
 8000f42:	429a      	cmp	r2, r3
 8000f44:	db05      	blt.n	8000f52 <PL2_toggle+0x10a>
			// leave toggle state
			// turn task to blocked state
			PL2Toggle = false;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <PL2_toggle+0x120>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]

			// reset timer
			toggle2Timer = 0;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <PL2_toggle+0x128>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	801a      	strh	r2, [r3, #0]
		}

    }

    // delay until next period
    vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	6979      	ldr	r1, [r7, #20]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f005 fe8b 	bl	8006c74 <vTaskDelayUntil>
    if(PL2Toggle == true){ // check if PL FSM is in toggle state
 8000f5e:	e787      	b.n	8000e70 <PL2_toggle+0x28>
 8000f60:	20000006 	.word	0x20000006
 8000f64:	10624dd3 	.word	0x10624dd3
 8000f68:	20000093 	.word	0x20000093
 8000f6c:	20000094 	.word	0x20000094
 8000f70:	200000a2 	.word	0x200000a2
 8000f74:	200000b8 	.word	0x200000b8
 8000f78:	20000098 	.word	0x20000098
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	2000009c 	.word	0x2000009c
 8000f84:	20000004 	.word	0x20000004
 8000f88:	20000000 	.word	0x20000000

08000f8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b61      	ldr	r3, [pc, #388]	; (8001128 <MX_GPIO_Init+0x19c>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a60      	ldr	r2, [pc, #384]	; (8001128 <MX_GPIO_Init+0x19c>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b5e      	ldr	r3, [pc, #376]	; (8001128 <MX_GPIO_Init+0x19c>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fba:	4b5b      	ldr	r3, [pc, #364]	; (8001128 <MX_GPIO_Init+0x19c>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a5a      	ldr	r2, [pc, #360]	; (8001128 <MX_GPIO_Init+0x19c>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b58      	ldr	r3, [pc, #352]	; (8001128 <MX_GPIO_Init+0x19c>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b55      	ldr	r3, [pc, #340]	; (8001128 <MX_GPIO_Init+0x19c>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a54      	ldr	r2, [pc, #336]	; (8001128 <MX_GPIO_Init+0x19c>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b52      	ldr	r3, [pc, #328]	; (8001128 <MX_GPIO_Init+0x19c>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b4f      	ldr	r3, [pc, #316]	; (8001128 <MX_GPIO_Init+0x19c>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a4e      	ldr	r2, [pc, #312]	; (8001128 <MX_GPIO_Init+0x19c>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff6:	4b4c      	ldr	r3, [pc, #304]	; (8001128 <MX_GPIO_Init+0x19c>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Reset_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100c:	f001 fa74 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_LED1_Pin|STCP_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f241 0104 	movw	r1, #4100	; 0x1004
 8001016:	4845      	ldr	r0, [pc, #276]	; (800112c <MX_GPIO_Init+0x1a0>)
 8001018:	f001 fa6e 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	4843      	ldr	r0, [pc, #268]	; (8001130 <MX_GPIO_Init+0x1a4>)
 8001022:	f001 fa69 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800102c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	483c      	ldr	r0, [pc, #240]	; (8001130 <MX_GPIO_Init+0x1a4>)
 800103e:	f001 f899 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Reset_Pin;
 8001042:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105e:	f001 f889 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL1_Car_Pin;
 8001062:	2310      	movs	r3, #16
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL1_Car_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	482e      	ldr	r0, [pc, #184]	; (8001130 <MX_GPIO_Init+0x1a4>)
 8001076:	f001 f87d 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USR_LED1_Pin|STCP_Pin;
 800107a:	f241 0304 	movw	r3, #4100	; 0x1004
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4826      	ldr	r0, [pc, #152]	; (800112c <MX_GPIO_Init+0x1a0>)
 8001094:	f001 f86e 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TL2_Car_Pin|TL3_Car_Pin;
 8001098:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	481f      	ldr	r0, [pc, #124]	; (800112c <MX_GPIO_Init+0x1a0>)
 80010ae:	f001 f861 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Enable_Pin;
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Enable_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4819      	ldr	r0, [pc, #100]	; (8001130 <MX_GPIO_Init+0x1a4>)
 80010ca:	f001 f853 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL4_Car_Pin;
 80010ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL4_Car_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f001 f845 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PL1_Switch_Pin;
 80010ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PL1_Switch_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001102:	f001 f837 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PL2_Switch_Pin;
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800110e:	2301      	movs	r3, #1
 8001110:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PL2_Switch_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_GPIO_Init+0x1a0>)
 800111a:	f001 f82b 	bl	8002174 <HAL_GPIO_Init>

}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000
 800112c:	48000400 	.word	0x48000400
 8001130:	48000800 	.word	0x48000800

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001138:	f000 fed6 	bl	8001ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113c:	f000 f80d 	bl	800115a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001140:	f7ff ff24 	bl	8000f8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001144:	f000 fe1a 	bl	8001d7c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8001148:	f000 f870 	bl	800122c <MX_SPI3_Init>
//#endif

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800114c:	f004 f8ce 	bl	80052ec <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001150:	f7ff f9bc 	bl	80004cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001154:	f004 f8ee 	bl	8005334 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001158:	e7fe      	b.n	8001158 <main+0x24>

0800115a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b096      	sub	sp, #88	; 0x58
 800115e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2244      	movs	r2, #68	; 0x44
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f007 fbf7 	bl	800895c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800117c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001180:	f001 f9e0 	bl	8002544 <HAL_PWREx_ControlVoltageScaling>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800118a:	f000 f849 	bl	8001220 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118e:	2302      	movs	r3, #2
 8001190:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001196:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001198:	2310      	movs	r3, #16
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119c:	2302      	movs	r3, #2
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a0:	2302      	movs	r3, #2
 80011a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011a8:	230a      	movs	r3, #10
 80011aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011ac:	2307      	movs	r3, #7
 80011ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 fa17 	bl	80025f0 <HAL_RCC_OscConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011c8:	f000 f82a 	bl	8001220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011cc:	230f      	movs	r3, #15
 80011ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2303      	movs	r3, #3
 80011d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	2104      	movs	r1, #4
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 fddf 	bl	8002da8 <HAL_RCC_ClockConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011f0:	f000 f816 	bl	8001220 <Error_Handler>
  }
}
 80011f4:	bf00      	nop
 80011f6:	3758      	adds	r7, #88	; 0x58
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800120e:	f000 fe8b 	bl	8001f28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40001000 	.word	0x40001000

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x8>
	...

0800122c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MX_SPI3_Init+0x74>)
 8001232:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <MX_SPI3_Init+0x78>)
 8001234:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <MX_SPI3_Init+0x74>)
 8001238:	f44f 7282 	mov.w	r2, #260	; 0x104
 800123c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_SPI3_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_SPI3_Init+0x74>)
 8001246:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800124a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_SPI3_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_SPI3_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_SPI3_Init+0x74>)
 800125a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800125e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_SPI3_Init+0x74>)
 8001262:	2208      	movs	r2, #8
 8001264:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_SPI3_Init+0x74>)
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_SPI3_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_SPI3_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_SPI3_Init+0x74>)
 800127a:	2207      	movs	r2, #7
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_SPI3_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_SPI3_Init+0x74>)
 8001286:	2208      	movs	r2, #8
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_SPI3_Init+0x74>)
 800128c:	f002 fc9e 	bl	8003bcc <HAL_SPI_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001296:	f7ff ffc3 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200000bc 	.word	0x200000bc
 80012a4:	40003c00 	.word	0x40003c00

080012a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a25      	ldr	r2, [pc, #148]	; (800135c <HAL_SPI_MspInit+0xb4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d144      	bne.n	8001354 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <HAL_SPI_MspInit+0xb8>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	4a24      	ldr	r2, [pc, #144]	; (8001360 <HAL_SPI_MspInit+0xb8>)
 80012d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d4:	6593      	str	r3, [r2, #88]	; 0x58
 80012d6:	4b22      	ldr	r3, [pc, #136]	; (8001360 <HAL_SPI_MspInit+0xb8>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <HAL_SPI_MspInit+0xb8>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <HAL_SPI_MspInit+0xb8>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <HAL_SPI_MspInit+0xb8>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_SPI_MspInit+0xb8>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	4a18      	ldr	r2, [pc, #96]	; (8001360 <HAL_SPI_MspInit+0xb8>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_SPI_MspInit+0xb8>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SHCP_Pin;
 8001312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001324:	2306      	movs	r3, #6
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SHCP_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <HAL_SPI_MspInit+0xbc>)
 8001330:	f000 ff20 	bl	8002174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DS_Pin;
 8001334:	2320      	movs	r3, #32
 8001336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001344:	2306      	movs	r3, #6
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <HAL_SPI_MspInit+0xc0>)
 8001350:	f000 ff10 	bl	8002174 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40003c00 	.word	0x40003c00
 8001360:	40021000 	.word	0x40021000
 8001364:	48000800 	.word	0x48000800
 8001368:	48000400 	.word	0x48000400

0800136c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_MspInit+0x4c>)
 8001374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_MspInit+0x4c>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6613      	str	r3, [r2, #96]	; 0x60
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_MspInit+0x4c>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_MspInit+0x4c>)
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_MspInit+0x4c>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	6593      	str	r3, [r2, #88]	; 0x58
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HAL_MspInit+0x4c>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	210f      	movs	r1, #15
 80013a6:	f06f 0001 	mvn.w	r0, #1
 80013aa:	f000 feb9 	bl	8002120 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000

080013bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08e      	sub	sp, #56	; 0x38
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013ca:	4b34      	ldr	r3, [pc, #208]	; (800149c <HAL_InitTick+0xe0>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	4a33      	ldr	r2, [pc, #204]	; (800149c <HAL_InitTick+0xe0>)
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	6593      	str	r3, [r2, #88]	; 0x58
 80013d6:	4b31      	ldr	r3, [pc, #196]	; (800149c <HAL_InitTick+0xe0>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013e2:	f107 0210 	add.w	r2, r7, #16
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 fe9f 	bl	8003130 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d103      	bne.n	8001404 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013fc:	f001 fe6c 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8001400:	6378      	str	r0, [r7, #52]	; 0x34
 8001402:	e004      	b.n	800140e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001404:	f001 fe68 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8001408:	4603      	mov	r3, r0
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800140e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001410:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <HAL_InitTick+0xe4>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	0c9b      	lsrs	r3, r3, #18
 8001418:	3b01      	subs	r3, #1
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <HAL_InitTick+0xe8>)
 800141e:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <HAL_InitTick+0xec>)
 8001420:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <HAL_InitTick+0xe8>)
 8001424:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001428:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800142a:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <HAL_InitTick+0xe8>)
 800142c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <HAL_InitTick+0xe8>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_InitTick+0xe8>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_InitTick+0xe8>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001442:	4818      	ldr	r0, [pc, #96]	; (80014a4 <HAL_InitTick+0xe8>)
 8001444:	f002 ff3e 	bl	80042c4 <HAL_TIM_Base_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800144e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001452:	2b00      	cmp	r3, #0
 8001454:	d11b      	bne.n	800148e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001456:	4813      	ldr	r0, [pc, #76]	; (80014a4 <HAL_InitTick+0xe8>)
 8001458:	f002 ff96 	bl	8004388 <HAL_TIM_Base_Start_IT>
 800145c:	4603      	mov	r3, r0
 800145e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001462:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001466:	2b00      	cmp	r3, #0
 8001468:	d111      	bne.n	800148e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800146a:	2036      	movs	r0, #54	; 0x36
 800146c:	f000 fe74 	bl	8002158 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b0f      	cmp	r3, #15
 8001474:	d808      	bhi.n	8001488 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001476:	2200      	movs	r2, #0
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	2036      	movs	r0, #54	; 0x36
 800147c:	f000 fe50 	bl	8002120 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001480:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_InitTick+0xf0>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e002      	b.n	800148e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800148e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001492:	4618      	mov	r0, r3
 8001494:	3738      	adds	r7, #56	; 0x38
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	431bde83 	.word	0x431bde83
 80014a4:	20000120 	.word	0x20000120
 80014a8:	40001000 	.word	0x40001000
 80014ac:	20000014 	.word	0x20000014

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <TIM6_DAC_IRQHandler+0x10>)
 80014e2:	f002 ffc1 	bl	8004468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000120 	.word	0x20000120

080014f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <SystemInit+0x20>)
 80014f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <SystemInit+0x20>)
 80014fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <set_traffic_leds>:
/**
@brief set_traffic_leds, sends SPI data to shift registers controlling traffic light LEDs
@param1 uint8_t[] data, SPI data to transmit, representing traffic light LEDs
@return void, no return value
*/
void set_traffic_leds(uint8_t data[]){
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	//Reset the buffer
	HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_RESET );
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001526:	f000 ffe7 	bl	80024f8 <HAL_GPIO_WritePin>

	//Disable output
	HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, GPIO_PIN_SET );
 800152a:	2201      	movs	r2, #1
 800152c:	2180      	movs	r1, #128	; 0x80
 800152e:	481b      	ldr	r0, [pc, #108]	; (800159c <set_traffic_leds+0x88>)
 8001530:	f000 ffe2 	bl	80024f8 <HAL_GPIO_WritePin>

	//Open buffer for transmission
	HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_SET );
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800153a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153e:	f000 ffdb 	bl	80024f8 <HAL_GPIO_WritePin>

	//Transmit data, 8 bits 3 times in succession resulting in 24 bits
	HAL_SPI_Transmit(&hspi3, &data[2], 1, 10);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	1c99      	adds	r1, r3, #2
 8001546:	230a      	movs	r3, #10
 8001548:	2201      	movs	r2, #1
 800154a:	4815      	ldr	r0, [pc, #84]	; (80015a0 <set_traffic_leds+0x8c>)
 800154c:	f002 fbe1 	bl	8003d12 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data[1], 1, 10);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	1c59      	adds	r1, r3, #1
 8001554:	230a      	movs	r3, #10
 8001556:	2201      	movs	r2, #1
 8001558:	4811      	ldr	r0, [pc, #68]	; (80015a0 <set_traffic_leds+0x8c>)
 800155a:	f002 fbda 	bl	8003d12 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data[0], 1, 10);
 800155e:	230a      	movs	r3, #10
 8001560:	2201      	movs	r2, #1
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	480e      	ldr	r0, [pc, #56]	; (80015a0 <set_traffic_leds+0x8c>)
 8001566:	f002 fbd4 	bl	8003d12 <HAL_SPI_Transmit>

	// Set LEDs
	HAL_GPIO_WritePin(STCP_GPIO_Port, STCP_Pin, GPIO_PIN_SET ); // set STCP high
 800156a:	2201      	movs	r2, #1
 800156c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <set_traffic_leds+0x90>)
 8001572:	f000 ffc1 	bl	80024f8 <HAL_GPIO_WritePin>
	HAL_Delay(10); // wait 10 ms
 8001576:	200a      	movs	r0, #10
 8001578:	f000 fcf6 	bl	8001f68 <HAL_Delay>
	HAL_GPIO_WritePin(STCP_GPIO_Port, STCP_Pin, GPIO_PIN_RESET ); // set STCP low
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001582:	4808      	ldr	r0, [pc, #32]	; (80015a4 <set_traffic_leds+0x90>)
 8001584:	f000 ffb8 	bl	80024f8 <HAL_GPIO_WritePin>


	// Enable output
	HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, GPIO_PIN_RESET );
 8001588:	2200      	movs	r2, #0
 800158a:	2180      	movs	r1, #128	; 0x80
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <set_traffic_leds+0x88>)
 800158e:	f000 ffb3 	bl	80024f8 <HAL_GPIO_WritePin>

} // end of function set_traffic_leds
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	48000800 	.word	0x48000800
 80015a0:	200000bc 	.word	0x200000bc
 80015a4:	48000400 	.word	0x48000400

080015a8 <reset_traffic_leds>:
/**
@brief reset_traffic_leds, set all traffic LEDs to low
@param1 uint8_t[] data, SPI data to transmit, representing traffic light LEDs
@return void, no return value
*/
void reset_traffic_leds(uint8_t data[]){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

	// manipulate byte sequence in first shift register
	uint8_t modifiedSR1 = modify_bit(data[0], 7, 0); // set red traffic light LED low
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2200      	movs	r2, #0
 80015b6:	2107      	movs	r1, #7
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fbbb 	bl	8001d34 <modify_bit>
 80015be:	4603      	mov	r3, r0
 80015c0:	73fb      	strb	r3, [r7, #15]
	modifiedSR1 = modify_bit(modifiedSR1, 6, 0); // set yellow traffic light LED low
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	2200      	movs	r2, #0
 80015c6:	2106      	movs	r1, #6
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 fbb3 	bl	8001d34 <modify_bit>
 80015ce:	4603      	mov	r3, r0
 80015d0:	73fb      	strb	r3, [r7, #15]
	modifiedSR1 = modify_bit(modifiedSR1, 5, 0); // set green traffic light LED low
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	2200      	movs	r2, #0
 80015d6:	2105      	movs	r1, #5
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fbab 	bl	8001d34 <modify_bit>
 80015de:	4603      	mov	r3, r0
 80015e0:	73fb      	strb	r3, [r7, #15]

	// manipulate byte sequence in second shift register
	uint8_t modifiedSR2 = modify_bit(data[1], 7, 0); // set red traffic light LED low
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3301      	adds	r3, #1
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2200      	movs	r2, #0
 80015ea:	2107      	movs	r1, #7
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 fba1 	bl	8001d34 <modify_bit>
 80015f2:	4603      	mov	r3, r0
 80015f4:	73bb      	strb	r3, [r7, #14]
	modifiedSR2 = modify_bit(modifiedSR2, 6, 0); // set yellow traffic light LED low
 80015f6:	7bbb      	ldrb	r3, [r7, #14]
 80015f8:	2200      	movs	r2, #0
 80015fa:	2106      	movs	r1, #6
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fb99 	bl	8001d34 <modify_bit>
 8001602:	4603      	mov	r3, r0
 8001604:	73bb      	strb	r3, [r7, #14]
	modifiedSR2 = modify_bit(modifiedSR2, 5, 0); // set green traffic light LED low
 8001606:	7bbb      	ldrb	r3, [r7, #14]
 8001608:	2200      	movs	r2, #0
 800160a:	2105      	movs	r1, #5
 800160c:	4618      	mov	r0, r3
 800160e:	f000 fb91 	bl	8001d34 <modify_bit>
 8001612:	4603      	mov	r3, r0
 8001614:	73bb      	strb	r3, [r7, #14]

	data[0] = modifiedSR1; // set first shift register manipulated byte sequence in data array
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	701a      	strb	r2, [r3, #0]
	data[1] = modifiedSR2; // set second shift register manipulated byte sequence in data array
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3301      	adds	r3, #1
 8001620:	7bba      	ldrb	r2, [r7, #14]
 8001622:	701a      	strb	r2, [r3, #0]
	data[2] = 0; // set third shift register zero
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3302      	adds	r3, #2
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]

	set_traffic_leds(data); // transmit SPI data
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff71 	bl	8001514 <set_traffic_leds>

} // end of function reset_traffic_leds
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <reset_pedestrian_leds>:
/**
@brief reset_pedestrian_leds, set all pedestrian LEDs to low
@param1 uint8_t[] data, SPI data to transmit, representing traffic light LEDs
@return void, no return value
*/
void reset_pedestrian_leds(uint8_t data[]){
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]

	// manipulate byte sequence in first shift register
	uint8_t modifiedSR1 = modify_bit(data[0], 4, 0); // set red pedestrian light LED low
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2200      	movs	r2, #0
 8001648:	2104      	movs	r1, #4
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fb72 	bl	8001d34 <modify_bit>
 8001650:	4603      	mov	r3, r0
 8001652:	73fb      	strb	r3, [r7, #15]
	modifiedSR1 = modify_bit(modifiedSR1, 3, 0); // set green pedestrian light LED low
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2200      	movs	r2, #0
 8001658:	2103      	movs	r1, #3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 fb6a 	bl	8001d34 <modify_bit>
 8001660:	4603      	mov	r3, r0
 8001662:	73fb      	strb	r3, [r7, #15]
	modifiedSR1 = modify_bit(modifiedSR1, 2, 0); // set blue pedestrian light LED low
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	2200      	movs	r2, #0
 8001668:	2102      	movs	r1, #2
 800166a:	4618      	mov	r0, r3
 800166c:	f000 fb62 	bl	8001d34 <modify_bit>
 8001670:	4603      	mov	r3, r0
 8001672:	73fb      	strb	r3, [r7, #15]

	// manipulate byte sequence in second shift register
	uint8_t modifiedSR2 = modify_bit(data[1], 4, 0); // set red pedestrian light LED low
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3301      	adds	r3, #1
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	2104      	movs	r1, #4
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fb58 	bl	8001d34 <modify_bit>
 8001684:	4603      	mov	r3, r0
 8001686:	73bb      	strb	r3, [r7, #14]
	modifiedSR2 = modify_bit(modifiedSR2, 3, 0); // set green pedestrian light LED low
 8001688:	7bbb      	ldrb	r3, [r7, #14]
 800168a:	2200      	movs	r2, #0
 800168c:	2103      	movs	r1, #3
 800168e:	4618      	mov	r0, r3
 8001690:	f000 fb50 	bl	8001d34 <modify_bit>
 8001694:	4603      	mov	r3, r0
 8001696:	73bb      	strb	r3, [r7, #14]
	modifiedSR2 = modify_bit(modifiedSR2, 2, 0); // set blue pedestrian light LED low
 8001698:	7bbb      	ldrb	r3, [r7, #14]
 800169a:	2200      	movs	r2, #0
 800169c:	2102      	movs	r1, #2
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 fb48 	bl	8001d34 <modify_bit>
 80016a4:	4603      	mov	r3, r0
 80016a6:	73bb      	strb	r3, [r7, #14]

	data[0] = modifiedSR1; // set first shift register manipulated byte sequence in data array
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	701a      	strb	r2, [r3, #0]
	data[1] = modifiedSR2; // set second shift register manipulated byte sequence in data array
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3301      	adds	r3, #1
 80016b2:	7bba      	ldrb	r2, [r7, #14]
 80016b4:	701a      	strb	r2, [r3, #0]

	set_traffic_leds(data); // transmit SPI data
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ff2c 	bl	8001514 <set_traffic_leds>
} // end of function reset_pedestrian_leds
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <TL1_car_active>:
/**
@brief TL1_car_active, returns true when car by first traffic light is active
@param1 void, no parameter value
@return bool, returns true or false
*/
bool TL1_car_active(void){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0

	  if(HAL_GPIO_ReadPin(TL1_Car_GPIO_Port, TL1_Car_Pin) == 1){ // check if car is active
 80016c8:	2110      	movs	r1, #16
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <TL1_car_active+0x1c>)
 80016cc:	f000 fefc 	bl	80024c8 <HAL_GPIO_ReadPin>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <TL1_car_active+0x16>
		  return true;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <TL1_car_active+0x18>
	  }else{ // if car not active
		  return false;
 80016da:	2300      	movs	r3, #0
	  }

} // end of function TL1_car_active
 80016dc:	4618      	mov	r0, r3
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	48000800 	.word	0x48000800

080016e4 <TL2_car_active>:
/**
@brief TL2_car_active, returns true when car by second traffic light is active
@param1 void, no parameter value
@return bool, returns true or false
*/
bool TL2_car_active(void){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0

	  if(HAL_GPIO_ReadPin(TL2_Car_GPIO_Port, TL2_Car_Pin) == 1){ // check if car is active
 80016e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ec:	4805      	ldr	r0, [pc, #20]	; (8001704 <TL2_car_active+0x20>)
 80016ee:	f000 feeb 	bl	80024c8 <HAL_GPIO_ReadPin>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <TL2_car_active+0x18>
		  return true;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <TL2_car_active+0x1a>
	  }else{ // if car not active
		  return false;
 80016fc:	2300      	movs	r3, #0
	  }

} // end of function TL2_car_active
 80016fe:	4618      	mov	r0, r3
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	48000400 	.word	0x48000400

08001708 <TL3_car_active>:
/**
@brief TL3_car_active, returns true when car by third traffic light is active
@param1 void, no parameter value
@return bool, returns true or false
*/
bool TL3_car_active(void){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

	  if(HAL_GPIO_ReadPin(TL3_Car_GPIO_Port, TL3_Car_Pin) == 1){ // check if car is active
 800170c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <TL3_car_active+0x20>)
 8001712:	f000 fed9 	bl	80024c8 <HAL_GPIO_ReadPin>
 8001716:	4603      	mov	r3, r0
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <TL3_car_active+0x18>
		  return true;
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <TL3_car_active+0x1a>
	  }else{ // if car is not active
		  return false;
 8001720:	2300      	movs	r3, #0
	  }

} // end of function TL3_car_active
 8001722:	4618      	mov	r0, r3
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	48000400 	.word	0x48000400

0800172c <TL4_car_active>:
/**
@brief TL4_car_active, returns true when car by fourth traffic light is active
@param1 void, no parameter value
@return bool, returns true or false
*/
bool TL4_car_active(void){
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0

	  if(HAL_GPIO_ReadPin(TL4_Car_GPIO_Port, TL4_Car_Pin) == 1){ // check if car is active
 8001730:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001738:	f000 fec6 	bl	80024c8 <HAL_GPIO_ReadPin>
 800173c:	4603      	mov	r3, r0
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <TL4_car_active+0x1a>
		  return true;
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <TL4_car_active+0x1c>
	  }else{ // if car is not active
		  return false;
 8001746:	2300      	movs	r3, #0
	  }

} // end of function TL4_car_active
 8001748:	4618      	mov	r0, r3
 800174a:	bd80      	pop	{r7, pc}

0800174c <PL1_switch_hit>:
/**
@brief PL1_switch_hit, returns true when first pedestrian button is hit
@param1 void, no parameter value
@return bool, returns true or false
*/
bool PL1_switch_hit(void){
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(PL1_Switch_GPIO_Port, PL1_Switch_Pin) == 0){ // check if button is hit
 8001750:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001758:	f000 feb6 	bl	80024c8 <HAL_GPIO_ReadPin>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <PL1_switch_hit+0x1a>
		return true;
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <PL1_switch_hit+0x1c>
	}else{ // if button is not hit
		return false;
 8001766:	2300      	movs	r3, #0
	}

} // end of function PL1_switch_hit
 8001768:	4618      	mov	r0, r3
 800176a:	bd80      	pop	{r7, pc}

0800176c <PL2_switch_hit>:
/**
@brief PL2_switch_hit, returns true when second pedestrian button is hit
@param1 void, no parameter value
@return bool, returns true or false
*/
bool PL2_switch_hit(void){
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(PL2_Switch_GPIO_Port, PL2_Switch_Pin) == 0){ // check if button is hit
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <PL2_switch_hit+0x1c>)
 8001774:	f000 fea8 	bl	80024c8 <HAL_GPIO_ReadPin>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <PL2_switch_hit+0x16>
		return true;
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <PL2_switch_hit+0x18>
	}else{ // if button is not hit
		return false;
 8001782:	2300      	movs	r3, #0
	}

} // end of function PL1_switch_hit
 8001784:	4618      	mov	r0, r3
 8001786:	bd80      	pop	{r7, pc}
 8001788:	48000400 	.word	0x48000400

0800178c <set_red_traffic_led>:
@param1 uint8_t[] data, SPI data to transmit, representing traffic light LEDs
@param2 bool power, sets LED high (true) or low (false)
@param3 uint8_t ledNr, LED number
@return void, no return value
*/
void set_red_traffic_led (uint8_t data[], bool power, uint8_t ledNr){
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	70fb      	strb	r3, [r7, #3]
 8001798:	4613      	mov	r3, r2
 800179a:	70bb      	strb	r3, [r7, #2]

	uint8_t modifiedBitSequence; // 8 bit sequence, representing modified bit sequence

	switch (ledNr){
 800179c:	78bb      	ldrb	r3, [r7, #2]
 800179e:	3b01      	subs	r3, #1
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	f200 80a3 	bhi.w	80018ec <set_red_traffic_led+0x160>
 80017a6:	a201      	add	r2, pc, #4	; (adr r2, 80017ac <set_red_traffic_led+0x20>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	080017bd 	.word	0x080017bd
 80017b0:	08001803 	.word	0x08001803
 80017b4:	08001851 	.word	0x08001851
 80017b8:	0800189f 	.word	0x0800189f
	case 1: // if LED number is 1

		if (power == true){ // check if LED should be set to high
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00f      	beq.n	80017e2 <set_red_traffic_led+0x56>

			// set first red traffic light LED to high
			modifiedBitSequence = modify_bit(data[0], 7, 1); // set red LED to high
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2201      	movs	r2, #1
 80017c8:	2107      	movs	r1, #7
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fab2 	bl	8001d34 <modify_bit>
 80017d0:	4603      	mov	r3, r0
 80017d2:	73fb      	strb	r3, [r7, #15]
			data[0] = modifiedBitSequence; // set modified byte in data array
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fe9a 	bl	8001514 <set_traffic_leds>
			data[0] = modifiedBitSequence; // set modified byte in data array
			set_traffic_leds(data); // transmit SPI data

		}

	break;
 80017e0:	e084      	b.n	80018ec <set_red_traffic_led+0x160>
			modifiedBitSequence = modify_bit(data[0], 7, 0); // set red LED to low
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2200      	movs	r2, #0
 80017e8:	2107      	movs	r1, #7
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 faa2 	bl	8001d34 <modify_bit>
 80017f0:	4603      	mov	r3, r0
 80017f2:	73fb      	strb	r3, [r7, #15]
			data[0] = modifiedBitSequence; // set modified byte in data array
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff fe8a 	bl	8001514 <set_traffic_leds>
	break;
 8001800:	e074      	b.n	80018ec <set_red_traffic_led+0x160>
	case 2: // if LED number is 2

		if (power == true){// check if LED should be set to high
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d011      	beq.n	800182c <set_red_traffic_led+0xa0>

			// set second red traffic light LED to high
			modifiedBitSequence = modify_bit(data[1], 7, 1); // set red LED to high
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3301      	adds	r3, #1
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2201      	movs	r2, #1
 8001810:	2107      	movs	r1, #7
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fa8e 	bl	8001d34 <modify_bit>
 8001818:	4603      	mov	r3, r0
 800181a:	73fb      	strb	r3, [r7, #15]
			data[1] = modifiedBitSequence; // set modified byte in data array
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3301      	adds	r3, #1
 8001820:	7bfa      	ldrb	r2, [r7, #15]
 8001822:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff fe75 	bl	8001514 <set_traffic_leds>
			data[1] = modifiedBitSequence; // set modified byte in data array
			set_traffic_leds(data); // transmit SPI data

		}

	break;
 800182a:	e05f      	b.n	80018ec <set_red_traffic_led+0x160>
			modifiedBitSequence = modify_bit(data[1], 7, 0); // set red LED to low
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3301      	adds	r3, #1
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2200      	movs	r2, #0
 8001834:	2107      	movs	r1, #7
 8001836:	4618      	mov	r0, r3
 8001838:	f000 fa7c 	bl	8001d34 <modify_bit>
 800183c:	4603      	mov	r3, r0
 800183e:	73fb      	strb	r3, [r7, #15]
			data[1] = modifiedBitSequence; // set modified byte in data array
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3301      	adds	r3, #1
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fe63 	bl	8001514 <set_traffic_leds>
	break;
 800184e:	e04d      	b.n	80018ec <set_red_traffic_led+0x160>
	case 3: // if LED number is 3

		if (power == true){ // check if LED should be set to high
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d011      	beq.n	800187a <set_red_traffic_led+0xee>

			// set third red traffic light LED to high
			modifiedBitSequence = modify_bit(data[2], 7, 1); // set red LED to high
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3302      	adds	r3, #2
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2201      	movs	r2, #1
 800185e:	2107      	movs	r1, #7
 8001860:	4618      	mov	r0, r3
 8001862:	f000 fa67 	bl	8001d34 <modify_bit>
 8001866:	4603      	mov	r3, r0
 8001868:	73fb      	strb	r3, [r7, #15]
			data[2] = modifiedBitSequence; // set modified byte in data array
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3302      	adds	r3, #2
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fe4e 	bl	8001514 <set_traffic_leds>
			data[2] = modifiedBitSequence; // set modified byte in data array
			set_traffic_leds(data); // transmit SPI data

		}

	break;
 8001878:	e038      	b.n	80018ec <set_red_traffic_led+0x160>
			modifiedBitSequence = modify_bit(data[2], 7, 0); // set red LED to low
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3302      	adds	r3, #2
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2200      	movs	r2, #0
 8001882:	2107      	movs	r1, #7
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fa55 	bl	8001d34 <modify_bit>
 800188a:	4603      	mov	r3, r0
 800188c:	73fb      	strb	r3, [r7, #15]
			data[2] = modifiedBitSequence; // set modified byte in data array
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3302      	adds	r3, #2
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fe3c 	bl	8001514 <set_traffic_leds>
	break;
 800189c:	e026      	b.n	80018ec <set_red_traffic_led+0x160>
	case 4: // if LED number is 4

		if (power == true){ // check if LED should be set to high
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d011      	beq.n	80018c8 <set_red_traffic_led+0x13c>

			// set fourth red traffic light LED to high
			modifiedBitSequence = modify_bit(data[2], 4, 1); // set red LED to high
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3302      	adds	r3, #2
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2201      	movs	r2, #1
 80018ac:	2104      	movs	r1, #4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fa40 	bl	8001d34 <modify_bit>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
			data[2] = modifiedBitSequence; // set modified byte in data array
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3302      	adds	r3, #2
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff fe27 	bl	8001514 <set_traffic_leds>
			data[2] = modifiedBitSequence; // set modified byte in data array
			set_traffic_leds(data); // transmit SPI data

		}

	break;
 80018c6:	e010      	b.n	80018ea <set_red_traffic_led+0x15e>
			modifiedBitSequence = modify_bit(data[2], 4, 0); // set red LED to low
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3302      	adds	r3, #2
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2200      	movs	r2, #0
 80018d0:	2104      	movs	r1, #4
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 fa2e 	bl	8001d34 <modify_bit>
 80018d8:	4603      	mov	r3, r0
 80018da:	73fb      	strb	r3, [r7, #15]
			data[2] = modifiedBitSequence; // set modified byte in data array
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3302      	adds	r3, #2
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff fe15 	bl	8001514 <set_traffic_leds>
	break;
 80018ea:	bf00      	nop
	default:
		// do nothing
	}

} // end of function set_red_traffic_led
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <set_yellow_traffic_led>:
@param1 uint8_t[] data, SPI data to transmit, representing traffic light LEDs
@param2 bool power, sets LED high (true) or low (false)
@param3 uint8_t ledNr, LED number
@return void, no return value
*/
void set_yellow_traffic_led (uint8_t data[], bool power, uint8_t ledNr){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	70fb      	strb	r3, [r7, #3]
 8001900:	4613      	mov	r3, r2
 8001902:	70bb      	strb	r3, [r7, #2]

	uint8_t modifiedBitSequence; // 8 bit sequence, representing modified bit sequence

	switch (ledNr){
 8001904:	78bb      	ldrb	r3, [r7, #2]
 8001906:	3b01      	subs	r3, #1
 8001908:	2b03      	cmp	r3, #3
 800190a:	f200 80a3 	bhi.w	8001a54 <set_yellow_traffic_led+0x160>
 800190e:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <set_yellow_traffic_led+0x20>)
 8001910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001914:	08001925 	.word	0x08001925
 8001918:	0800196b 	.word	0x0800196b
 800191c:	080019b9 	.word	0x080019b9
 8001920:	08001a07 	.word	0x08001a07
	case 1: // if LED number is 1

		if (power == true){ // check if LED should be set to high
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00f      	beq.n	800194a <set_yellow_traffic_led+0x56>

			// set first yellow traffic light LED to high
			modifiedBitSequence = modify_bit(data[0], 6, 1); // set yellow LED to high
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2201      	movs	r2, #1
 8001930:	2106      	movs	r1, #6
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f9fe 	bl	8001d34 <modify_bit>
 8001938:	4603      	mov	r3, r0
 800193a:	73fb      	strb	r3, [r7, #15]
			data[0] = modifiedBitSequence; // set modified byte in data array
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fde6 	bl	8001514 <set_traffic_leds>
			data[0] = modifiedBitSequence; // set modified byte in data array
			set_traffic_leds(data); // transmit SPI data

		}

	break;
 8001948:	e084      	b.n	8001a54 <set_yellow_traffic_led+0x160>
			modifiedBitSequence = modify_bit(data[0], 6, 0); // set yellow LED to low
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2200      	movs	r2, #0
 8001950:	2106      	movs	r1, #6
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f9ee 	bl	8001d34 <modify_bit>
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]
			data[0] = modifiedBitSequence; // set modified byte in data array
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7bfa      	ldrb	r2, [r7, #15]
 8001960:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fdd6 	bl	8001514 <set_traffic_leds>
	break;
 8001968:	e074      	b.n	8001a54 <set_yellow_traffic_led+0x160>
	case 2: // if LED number is 2

		if (power == true){// check if LED should be set to high
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d011      	beq.n	8001994 <set_yellow_traffic_led+0xa0>

			// set second yellow traffic light LED to high
			modifiedBitSequence = modify_bit(data[1], 6, 1); // set yellow LED to high
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3301      	adds	r3, #1
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2201      	movs	r2, #1
 8001978:	2106      	movs	r1, #6
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f9da 	bl	8001d34 <modify_bit>
 8001980:	4603      	mov	r3, r0
 8001982:	73fb      	strb	r3, [r7, #15]
			data[1] = modifiedBitSequence; // set modified byte in data array
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3301      	adds	r3, #1
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff fdc1 	bl	8001514 <set_traffic_leds>
			data[1] = modifiedBitSequence; // set modified byte in data array
			set_traffic_leds(data); // transmit SPI data

		}

	break;
 8001992:	e05f      	b.n	8001a54 <set_yellow_traffic_led+0x160>
			modifiedBitSequence = modify_bit(data[1], 6, 0); // set yellow LED to low
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3301      	adds	r3, #1
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	2106      	movs	r1, #6
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f9c8 	bl	8001d34 <modify_bit>
 80019a4:	4603      	mov	r3, r0
 80019a6:	73fb      	strb	r3, [r7, #15]
			data[1] = modifiedBitSequence; // set modified byte in data array
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3301      	adds	r3, #1
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fdaf 	bl	8001514 <set_traffic_leds>
	break;
 80019b6:	e04d      	b.n	8001a54 <set_yellow_traffic_led+0x160>
	case 3: // if LED number is 3

		if (power == true){ // check if LED should be set to high
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d011      	beq.n	80019e2 <set_yellow_traffic_led+0xee>

			// set third yellow traffic light LED to high
			modifiedBitSequence = modify_bit(data[2], 6, 1); // set yellow LED to high
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3302      	adds	r3, #2
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2201      	movs	r2, #1
 80019c6:	2106      	movs	r1, #6
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f9b3 	bl	8001d34 <modify_bit>
 80019ce:	4603      	mov	r3, r0
 80019d0:	73fb      	strb	r3, [r7, #15]
			data[2] = modifiedBitSequence; // set modified byte in data array
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3302      	adds	r3, #2
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff fd9a 	bl	8001514 <set_traffic_leds>
			modifiedBitSequence = modify_bit(data[2], 6, 0); // set yellow LED to low
			data[2] = modifiedBitSequence; // set modified byte in data array
			set_traffic_leds(data); // transmit SPI data
		}

	break;
 80019e0:	e038      	b.n	8001a54 <set_yellow_traffic_led+0x160>
			modifiedBitSequence = modify_bit(data[2], 6, 0); // set yellow LED to low
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3302      	adds	r3, #2
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2200      	movs	r2, #0
 80019ea:	2106      	movs	r1, #6
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f9a1 	bl	8001d34 <modify_bit>
 80019f2:	4603      	mov	r3, r0
 80019f4:	73fb      	strb	r3, [r7, #15]
			data[2] = modifiedBitSequence; // set modified byte in data array
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3302      	adds	r3, #2
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fd88 	bl	8001514 <set_traffic_leds>
	break;
 8001a04:	e026      	b.n	8001a54 <set_yellow_traffic_led+0x160>
	case 4: // if LED number is 4

		if (power == true){ // check if LED should be set to high
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d011      	beq.n	8001a30 <set_yellow_traffic_led+0x13c>

			// set fourth yellow traffic light LED to high
			modifiedBitSequence = modify_bit(data[2], 3, 1); // set yellow LED to high
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3302      	adds	r3, #2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2201      	movs	r2, #1
 8001a14:	2103      	movs	r1, #3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f98c 	bl	8001d34 <modify_bit>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	73fb      	strb	r3, [r7, #15]
			data[2] = modifiedBitSequence; // set modified byte in data array
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3302      	adds	r3, #2
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff fd73 	bl	8001514 <set_traffic_leds>
			data[2] = modifiedBitSequence; // set modified byte in data array
			set_traffic_leds(data); // transmit SPI data

		}

	break;
 8001a2e:	e010      	b.n	8001a52 <set_yellow_traffic_led+0x15e>
			modifiedBitSequence = modify_bit(data[2], 3, 0); // set yellow LED to low
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3302      	adds	r3, #2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2200      	movs	r2, #0
 8001a38:	2103      	movs	r1, #3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f97a 	bl	8001d34 <modify_bit>
 8001a40:	4603      	mov	r3, r0
 8001a42:	73fb      	strb	r3, [r7, #15]
			data[2] = modifiedBitSequence; // set modified byte in data array
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3302      	adds	r3, #2
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fd61 	bl	8001514 <set_traffic_leds>
	break;
 8001a52:	bf00      	nop
	default:
		// do nothing
	}

} // end of function set_yellow_traffic_led
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <set_green_traffic_led>:
@param1 uint8_t[] data, SPI data to transmit, representing traffic light LEDs
@param2 bool power, sets LED high (true) or low (false)
@param3 uint8_t ledNr, LED number
@return void, no return value
*/
void set_green_traffic_led (uint8_t data[], bool power, uint8_t ledNr){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	70bb      	strb	r3, [r7, #2]

	uint8_t modifiedBitSequence; // 8 bit sequence, representing modified bit sequence

	switch (ledNr){
 8001a6c:	78bb      	ldrb	r3, [r7, #2]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	f200 80a3 	bhi.w	8001bbc <set_green_traffic_led+0x160>
 8001a76:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <set_green_traffic_led+0x20>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001a8d 	.word	0x08001a8d
 8001a80:	08001ad3 	.word	0x08001ad3
 8001a84:	08001b21 	.word	0x08001b21
 8001a88:	08001b6f 	.word	0x08001b6f
	case 1: // if LED number is 1

		if (power == true){ // check if LED should be set to high
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00f      	beq.n	8001ab2 <set_green_traffic_led+0x56>

			// set first green traffic light LED should be set to high
			modifiedBitSequence = modify_bit(data[0], 5, 1); // set green LED to high
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2201      	movs	r2, #1
 8001a98:	2105      	movs	r1, #5
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f94a 	bl	8001d34 <modify_bit>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	73fb      	strb	r3, [r7, #15]
			data[0] = modifiedBitSequence; // set modified byte in data array
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fd32 	bl	8001514 <set_traffic_leds>
			data[0] = modifiedBitSequence; // set modified byte in data array
			set_traffic_leds(data); // transmit SPI data

		}

	break;
 8001ab0:	e084      	b.n	8001bbc <set_green_traffic_led+0x160>
			modifiedBitSequence = modify_bit(data[0], 5, 0); // set green LED to low
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2105      	movs	r1, #5
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f93a 	bl	8001d34 <modify_bit>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	73fb      	strb	r3, [r7, #15]
			data[0] = modifiedBitSequence; // set modified byte in data array
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff fd22 	bl	8001514 <set_traffic_leds>
	break;
 8001ad0:	e074      	b.n	8001bbc <set_green_traffic_led+0x160>
	case 2: // if LED number is 2

		if (power == true){ // check if traffic light LED should be set to high
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d011      	beq.n	8001afc <set_green_traffic_led+0xa0>

			// set second green traffic light LED to high
			modifiedBitSequence = modify_bit(data[1], 5, 1); // set green LED to high
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3301      	adds	r3, #1
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2105      	movs	r1, #5
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f926 	bl	8001d34 <modify_bit>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	73fb      	strb	r3, [r7, #15]
			data[1] = modifiedBitSequence; // set modified byte in data array
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3301      	adds	r3, #1
 8001af0:	7bfa      	ldrb	r2, [r7, #15]
 8001af2:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff fd0d 	bl	8001514 <set_traffic_leds>
			data[1] = modifiedBitSequence; // set modified byte in data array
			set_traffic_leds(data); // transmit SPI data

		}

	break;
 8001afa:	e05f      	b.n	8001bbc <set_green_traffic_led+0x160>
			modifiedBitSequence = modify_bit(data[1], 5, 0); // set green LED to low
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3301      	adds	r3, #1
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2200      	movs	r2, #0
 8001b04:	2105      	movs	r1, #5
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f914 	bl	8001d34 <modify_bit>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	73fb      	strb	r3, [r7, #15]
			data[1] = modifiedBitSequence; // set modified byte in data array
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3301      	adds	r3, #1
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff fcfb 	bl	8001514 <set_traffic_leds>
	break;
 8001b1e:	e04d      	b.n	8001bbc <set_green_traffic_led+0x160>
	case 3: // if LED number is 3

		if (power == true){ // check if traffic light LED should be set to high
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d011      	beq.n	8001b4a <set_green_traffic_led+0xee>

			// set third green traffic light LED to high
			modifiedBitSequence = modify_bit(data[2], 5, 1); // set green LED to high
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3302      	adds	r3, #2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2105      	movs	r1, #5
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 f8ff 	bl	8001d34 <modify_bit>
 8001b36:	4603      	mov	r3, r0
 8001b38:	73fb      	strb	r3, [r7, #15]
			data[2] = modifiedBitSequence; // set modified byte in data array
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fce6 	bl	8001514 <set_traffic_leds>
			data[2] = modifiedBitSequence; // set modified byte in data array
			set_traffic_leds(data); // transmit SPI data

		}

	break;
 8001b48:	e038      	b.n	8001bbc <set_green_traffic_led+0x160>
			modifiedBitSequence = modify_bit(data[2], 5, 0); // set green LED to low
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2200      	movs	r2, #0
 8001b52:	2105      	movs	r1, #5
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 f8ed 	bl	8001d34 <modify_bit>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	73fb      	strb	r3, [r7, #15]
			data[2] = modifiedBitSequence; // set modified byte in data array
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3302      	adds	r3, #2
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff fcd4 	bl	8001514 <set_traffic_leds>
	break;
 8001b6c:	e026      	b.n	8001bbc <set_green_traffic_led+0x160>
	case 4:

		if (power == true){ // check if traffic light LED should be set to high
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d011      	beq.n	8001b98 <set_green_traffic_led+0x13c>

			// set fourth green traffic light LED to high
			modifiedBitSequence = modify_bit(data[2], 2, 1); // set green LED to high
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3302      	adds	r3, #2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f8d8 	bl	8001d34 <modify_bit>
 8001b84:	4603      	mov	r3, r0
 8001b86:	73fb      	strb	r3, [r7, #15]
			data[2] = modifiedBitSequence; // set modified byte in data array
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fcbf 	bl	8001514 <set_traffic_leds>
			data[2] = modifiedBitSequence; // set modified byte in data array
			set_traffic_leds(data);// transmit SPI data

		}

	break;
 8001b96:	e010      	b.n	8001bba <set_green_traffic_led+0x15e>
			modifiedBitSequence = modify_bit(data[2], 2, 0); // set green LED to low
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f8c6 	bl	8001d34 <modify_bit>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	73fb      	strb	r3, [r7, #15]
			data[2] = modifiedBitSequence; // set modified byte in data array
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3302      	adds	r3, #2
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data);// transmit SPI data
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff fcad 	bl	8001514 <set_traffic_leds>
	break;
 8001bba:	bf00      	nop
	default:
		// do nothing
	}

} // end of function set_green_traffic_led
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <set_red_PL_led>:
@param1 uint8_t[] data, SPI data to transmit, representing traffic light LEDs
@param2 bool power, sets LED high (true) or low (false)
@param3 uint8_t ledNr, LED number
@return void, no return value
*/
void set_red_PL_led(uint8_t data[], bool power, uint8_t ledNr){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	70fb      	strb	r3, [r7, #3]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	70bb      	strb	r3, [r7, #2]

	uint8_t modifiedBitSequence; // 8 bit sequence, representing modified bit sequence

	switch(ledNr){
 8001bd4:	78bb      	ldrb	r3, [r7, #2]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d002      	beq.n	8001be0 <set_red_PL_led+0x1c>
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d023      	beq.n	8001c26 <set_red_PL_led+0x62>

	break;
	default:
		// do nothing
	}
} // end of function set_red_PL_led
 8001bde:	e049      	b.n	8001c74 <set_red_PL_led+0xb0>
		if(power == true){ // check if pedestrian LED should be set to high
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00f      	beq.n	8001c06 <set_red_PL_led+0x42>
			modifiedBitSequence = modify_bit(data[0], 4, 1); // set red LED to high
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2201      	movs	r2, #1
 8001bec:	2104      	movs	r1, #4
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f8a0 	bl	8001d34 <modify_bit>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	73fb      	strb	r3, [r7, #15]
			data[0] = modifiedBitSequence; // set modified byte in data array
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff fc88 	bl	8001514 <set_traffic_leds>
	break;
 8001c04:	e036      	b.n	8001c74 <set_red_PL_led+0xb0>
			modifiedBitSequence = modify_bit(data[0], 4, 0); // set red LED to low
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f890 	bl	8001d34 <modify_bit>
 8001c14:	4603      	mov	r3, r0
 8001c16:	73fb      	strb	r3, [r7, #15]
			data[0] = modifiedBitSequence; // set modified byte in data array
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fc78 	bl	8001514 <set_traffic_leds>
	break;
 8001c24:	e026      	b.n	8001c74 <set_red_PL_led+0xb0>
		if(power == true){ // check if pedestrian LED should be set to high
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d011      	beq.n	8001c50 <set_red_PL_led+0x8c>
			modifiedBitSequence = modify_bit(data[1], 4, 1); // set red LED to high
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2201      	movs	r2, #1
 8001c34:	2104      	movs	r1, #4
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f87c 	bl	8001d34 <modify_bit>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	73fb      	strb	r3, [r7, #15]
			data[1] = modifiedBitSequence; // set modified byte in data array
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3301      	adds	r3, #1
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff fc63 	bl	8001514 <set_traffic_leds>
	break;
 8001c4e:	e010      	b.n	8001c72 <set_red_PL_led+0xae>
			modifiedBitSequence = modify_bit(data[1], 4, 0); // set red LED to low
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3301      	adds	r3, #1
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2200      	movs	r2, #0
 8001c58:	2104      	movs	r1, #4
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f86a 	bl	8001d34 <modify_bit>
 8001c60:	4603      	mov	r3, r0
 8001c62:	73fb      	strb	r3, [r7, #15]
			data[1] = modifiedBitSequence; // set modified byte in data array
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3301      	adds	r3, #1
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff fc51 	bl	8001514 <set_traffic_leds>
	break;
 8001c72:	bf00      	nop
} // end of function set_red_PL_led
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <set_green_PL_led>:
@param1 uint8_t[] data, SPI data to transmit, representing traffic light LEDs
@param2 bool power, sets LED high (true) or low (false)
@param3 uint8_t ledNr, LED number
@return void, no return value
*/
void set_green_PL_led(uint8_t data[], bool power, uint8_t ledNr){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	70bb      	strb	r3, [r7, #2]

	uint8_t modifiedBitSequence; // 8 bit sequence, representing modified bit sequence

	switch(ledNr){
 8001c8c:	78bb      	ldrb	r3, [r7, #2]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d002      	beq.n	8001c98 <set_green_PL_led+0x1c>
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d023      	beq.n	8001cde <set_green_PL_led+0x62>

	break;
	default:
		// do nothing
	}
} // end of function set_green_PL_led
 8001c96:	e049      	b.n	8001d2c <set_green_PL_led+0xb0>
		if(power == true){ // check if pedestrian LED should be set to high
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00f      	beq.n	8001cbe <set_green_PL_led+0x42>
			modifiedBitSequence = modify_bit(data[0], 3, 1); // set green LED to high
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2103      	movs	r1, #3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f844 	bl	8001d34 <modify_bit>
 8001cac:	4603      	mov	r3, r0
 8001cae:	73fb      	strb	r3, [r7, #15]
			data[0] = modifiedBitSequence; // set modified byte in data array
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fc2c 	bl	8001514 <set_traffic_leds>
	break;
 8001cbc:	e036      	b.n	8001d2c <set_green_PL_led+0xb0>
			modifiedBitSequence = modify_bit(data[0], 3, 0); // set green LED to low
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2103      	movs	r1, #3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f834 	bl	8001d34 <modify_bit>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	73fb      	strb	r3, [r7, #15]
			data[0] = modifiedBitSequence; // set modified byte in data array
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff fc1c 	bl	8001514 <set_traffic_leds>
	break;
 8001cdc:	e026      	b.n	8001d2c <set_green_PL_led+0xb0>
		if(power == true){ // check if pedestrian LED should be set to high
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d011      	beq.n	8001d08 <set_green_PL_led+0x8c>
			modifiedBitSequence = modify_bit(data[1], 3, 1); // set green LED to high
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2201      	movs	r2, #1
 8001cec:	2103      	movs	r1, #3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 f820 	bl	8001d34 <modify_bit>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	73fb      	strb	r3, [r7, #15]
			data[1] = modifiedBitSequence; // set modified byte in data array
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff fc07 	bl	8001514 <set_traffic_leds>
	break;
 8001d06:	e010      	b.n	8001d2a <set_green_PL_led+0xae>
			modifiedBitSequence = modify_bit(data[1], 3, 0); // set green LED to low
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2103      	movs	r1, #3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f80e 	bl	8001d34 <modify_bit>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	73fb      	strb	r3, [r7, #15]
			data[1] = modifiedBitSequence; // set modified byte in data array
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	701a      	strb	r2, [r3, #0]
			set_traffic_leds(data); // transmit SPI data
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fbf5 	bl	8001514 <set_traffic_leds>
	break;
 8001d2a:	bf00      	nop
} // end of function set_green_PL_led
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <modify_bit>:
@param2 uint8_t pos, position number of bit
@param3 uint8_t value, the desired value of the bit
@return uint8_t, the modified byte
*/
uint8_t modify_bit(uint8_t nr, uint8_t pos, uint8_t value)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	71bb      	strb	r3, [r7, #6]
 8001d42:	4613      	mov	r3, r2
 8001d44:	717b      	strb	r3, [r7, #5]
    uint8_t mask = 1 << pos; // a byte representing 1, shifted left pos times
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	73fb      	strb	r3, [r7, #15]

    return ((nr & ~mask) | (value << pos)); // return manipulated byte
 8001d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	b25a      	sxtb	r2, r3
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	b25a      	sxtb	r2, r3
 8001d60:	7979      	ldrb	r1, [r7, #5]
 8001d62:	79bb      	ldrb	r3, [r7, #6]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	b25b      	sxtb	r3, r3
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	b25b      	sxtb	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001d82:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <MX_USART2_UART_Init+0x5c>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <MX_USART2_UART_Init+0x58>)
 8001dc0:	f002 fd34 	bl	800482c <HAL_UART_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001dca:	f7ff fa29 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000016c 	.word	0x2000016c
 8001dd8:	40004400 	.word	0x40004400

08001ddc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b0ac      	sub	sp, #176	; 0xb0
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2288      	movs	r2, #136	; 0x88
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f006 fdad 	bl	800895c <memset>
  if(uartHandle->Instance==USART2)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a21      	ldr	r2, [pc, #132]	; (8001e8c <HAL_UART_MspInit+0xb0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d13b      	bne.n	8001e84 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e10:	2300      	movs	r3, #0
 8001e12:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f001 fa1b 	bl	8003254 <HAL_RCCEx_PeriphCLKConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e24:	f7ff f9fc 	bl	8001220 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e28:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_UART_MspInit+0xb4>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	4a18      	ldr	r2, [pc, #96]	; (8001e90 <HAL_UART_MspInit+0xb4>)
 8001e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e32:	6593      	str	r3, [r2, #88]	; 0x58
 8001e34:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <HAL_UART_MspInit+0xb4>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <HAL_UART_MspInit+0xb4>)
 8001e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e44:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <HAL_UART_MspInit+0xb4>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e4c:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <HAL_UART_MspInit+0xb4>)
 8001e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e58:	230c      	movs	r3, #12
 8001e5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e70:	2307      	movs	r3, #7
 8001e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e80:	f000 f978 	bl	8002174 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e84:	bf00      	nop
 8001e86:	37b0      	adds	r7, #176	; 0xb0
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40004400 	.word	0x40004400
 8001e90:	40021000 	.word	0x40021000

08001e94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ecc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e98:	f7ff fb2a 	bl	80014f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e9c:	480c      	ldr	r0, [pc, #48]	; (8001ed0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e9e:	490d      	ldr	r1, [pc, #52]	; (8001ed4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <LoopForever+0xe>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea4:	e002      	b.n	8001eac <LoopCopyDataInit>

08001ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eaa:	3304      	adds	r3, #4

08001eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb0:	d3f9      	bcc.n	8001ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eb4:	4c0a      	ldr	r4, [pc, #40]	; (8001ee0 <LoopForever+0x16>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb8:	e001      	b.n	8001ebe <LoopFillZerobss>

08001eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ebc:	3204      	adds	r2, #4

08001ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec0:	d3fb      	bcc.n	8001eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ec2:	f006 fda9 	bl	8008a18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ec6:	f7ff f935 	bl	8001134 <main>

08001eca <LoopForever>:

LoopForever:
    b LoopForever
 8001eca:	e7fe      	b.n	8001eca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ecc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ed8:	08008cd4 	.word	0x08008cd4
  ldr r2, =_sbss
 8001edc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ee0:	200020c0 	.word	0x200020c0

08001ee4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ee4:	e7fe      	b.n	8001ee4 <ADC1_2_IRQHandler>
	...

08001ee8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <HAL_Init+0x3c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <HAL_Init+0x3c>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001efe:	2003      	movs	r0, #3
 8001f00:	f000 f903 	bl	800210a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f04:	200f      	movs	r0, #15
 8001f06:	f7ff fa59 	bl	80013bc <HAL_InitTick>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	71fb      	strb	r3, [r7, #7]
 8001f14:	e001      	b.n	8001f1a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f16:	f7ff fa29 	bl	800136c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40022000 	.word	0x40022000

08001f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_IncTick+0x20>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_IncTick+0x24>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <HAL_IncTick+0x24>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000018 	.word	0x20000018
 8001f4c:	200001f4 	.word	0x200001f4

08001f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return uwTick;
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <HAL_GetTick+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	200001f4 	.word	0x200001f4

08001f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff ffee 	bl	8001f50 <HAL_GetTick>
 8001f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d005      	beq.n	8001f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_Delay+0x44>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f8e:	bf00      	nop
 8001f90:	f7ff ffde 	bl	8001f50 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d8f7      	bhi.n	8001f90 <HAL_Delay+0x28>
  {
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000018 	.word	0x20000018

08001fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe2:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	60d3      	str	r3, [r2, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <__NVIC_GetPriorityGrouping+0x18>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	f003 0307 	and.w	r3, r3, #7
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	2b00      	cmp	r3, #0
 8002024:	db0b      	blt.n	800203e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	f003 021f 	and.w	r2, r3, #31
 800202c:	4907      	ldr	r1, [pc, #28]	; (800204c <__NVIC_EnableIRQ+0x38>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	2001      	movs	r0, #1
 8002036:	fa00 f202 	lsl.w	r2, r0, r2
 800203a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000e100 	.word	0xe000e100

08002050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	6039      	str	r1, [r7, #0]
 800205a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002060:	2b00      	cmp	r3, #0
 8002062:	db0a      	blt.n	800207a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	b2da      	uxtb	r2, r3
 8002068:	490c      	ldr	r1, [pc, #48]	; (800209c <__NVIC_SetPriority+0x4c>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	0112      	lsls	r2, r2, #4
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	440b      	add	r3, r1
 8002074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002078:	e00a      	b.n	8002090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4908      	ldr	r1, [pc, #32]	; (80020a0 <__NVIC_SetPriority+0x50>)
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	3b04      	subs	r3, #4
 8002088:	0112      	lsls	r2, r2, #4
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	440b      	add	r3, r1
 800208e:	761a      	strb	r2, [r3, #24]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000e100 	.word	0xe000e100
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	; 0x24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f1c3 0307 	rsb	r3, r3, #7
 80020be:	2b04      	cmp	r3, #4
 80020c0:	bf28      	it	cs
 80020c2:	2304      	movcs	r3, #4
 80020c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3304      	adds	r3, #4
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d902      	bls.n	80020d4 <NVIC_EncodePriority+0x30>
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3b03      	subs	r3, #3
 80020d2:	e000      	b.n	80020d6 <NVIC_EncodePriority+0x32>
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	f04f 32ff 	mov.w	r2, #4294967295
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43da      	mvns	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	401a      	ands	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ec:	f04f 31ff 	mov.w	r1, #4294967295
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	43d9      	mvns	r1, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	4313      	orrs	r3, r2
         );
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3724      	adds	r7, #36	; 0x24
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ff4c 	bl	8001fb0 <__NVIC_SetPriorityGrouping>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002132:	f7ff ff61 	bl	8001ff8 <__NVIC_GetPriorityGrouping>
 8002136:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	6978      	ldr	r0, [r7, #20]
 800213e:	f7ff ffb1 	bl	80020a4 <NVIC_EncodePriority>
 8002142:	4602      	mov	r2, r0
 8002144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ff80 	bl	8002050 <__NVIC_SetPriority>
}
 8002150:	bf00      	nop
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff54 	bl	8002014 <__NVIC_EnableIRQ>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002182:	e17f      	b.n	8002484 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2101      	movs	r1, #1
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	4013      	ands	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8171 	beq.w	800247e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d005      	beq.n	80021b4 <HAL_GPIO_Init+0x40>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d130      	bne.n	8002216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ea:	2201      	movs	r2, #1
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	f003 0201 	and.w	r2, r3, #1
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b03      	cmp	r3, #3
 8002220:	d118      	bne.n	8002254 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002228:	2201      	movs	r2, #1
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	08db      	lsrs	r3, r3, #3
 800223e:	f003 0201 	and.w	r2, r3, #1
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b03      	cmp	r3, #3
 800225e:	d017      	beq.n	8002290 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d123      	bne.n	80022e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	220f      	movs	r2, #15
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	08da      	lsrs	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3208      	adds	r2, #8
 80022de:	6939      	ldr	r1, [r7, #16]
 80022e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0203 	and.w	r2, r3, #3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80ac 	beq.w	800247e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	4b5f      	ldr	r3, [pc, #380]	; (80024a4 <HAL_GPIO_Init+0x330>)
 8002328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232a:	4a5e      	ldr	r2, [pc, #376]	; (80024a4 <HAL_GPIO_Init+0x330>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6613      	str	r3, [r2, #96]	; 0x60
 8002332:	4b5c      	ldr	r3, [pc, #368]	; (80024a4 <HAL_GPIO_Init+0x330>)
 8002334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800233e:	4a5a      	ldr	r2, [pc, #360]	; (80024a8 <HAL_GPIO_Init+0x334>)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002368:	d025      	beq.n	80023b6 <HAL_GPIO_Init+0x242>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4f      	ldr	r2, [pc, #316]	; (80024ac <HAL_GPIO_Init+0x338>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d01f      	beq.n	80023b2 <HAL_GPIO_Init+0x23e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4e      	ldr	r2, [pc, #312]	; (80024b0 <HAL_GPIO_Init+0x33c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d019      	beq.n	80023ae <HAL_GPIO_Init+0x23a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4d      	ldr	r2, [pc, #308]	; (80024b4 <HAL_GPIO_Init+0x340>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d013      	beq.n	80023aa <HAL_GPIO_Init+0x236>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4c      	ldr	r2, [pc, #304]	; (80024b8 <HAL_GPIO_Init+0x344>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00d      	beq.n	80023a6 <HAL_GPIO_Init+0x232>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4b      	ldr	r2, [pc, #300]	; (80024bc <HAL_GPIO_Init+0x348>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d007      	beq.n	80023a2 <HAL_GPIO_Init+0x22e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4a      	ldr	r2, [pc, #296]	; (80024c0 <HAL_GPIO_Init+0x34c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d101      	bne.n	800239e <HAL_GPIO_Init+0x22a>
 800239a:	2306      	movs	r3, #6
 800239c:	e00c      	b.n	80023b8 <HAL_GPIO_Init+0x244>
 800239e:	2307      	movs	r3, #7
 80023a0:	e00a      	b.n	80023b8 <HAL_GPIO_Init+0x244>
 80023a2:	2305      	movs	r3, #5
 80023a4:	e008      	b.n	80023b8 <HAL_GPIO_Init+0x244>
 80023a6:	2304      	movs	r3, #4
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x244>
 80023aa:	2303      	movs	r3, #3
 80023ac:	e004      	b.n	80023b8 <HAL_GPIO_Init+0x244>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e002      	b.n	80023b8 <HAL_GPIO_Init+0x244>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_GPIO_Init+0x244>
 80023b6:	2300      	movs	r3, #0
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	f002 0203 	and.w	r2, r2, #3
 80023be:	0092      	lsls	r2, r2, #2
 80023c0:	4093      	lsls	r3, r2
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023c8:	4937      	ldr	r1, [pc, #220]	; (80024a8 <HAL_GPIO_Init+0x334>)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	3302      	adds	r3, #2
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023d6:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <HAL_GPIO_Init+0x350>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	43db      	mvns	r3, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023fa:	4a32      	ldr	r2, [pc, #200]	; (80024c4 <HAL_GPIO_Init+0x350>)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002400:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <HAL_GPIO_Init+0x350>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	43db      	mvns	r3, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002424:	4a27      	ldr	r2, [pc, #156]	; (80024c4 <HAL_GPIO_Init+0x350>)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <HAL_GPIO_Init+0x350>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	43db      	mvns	r3, r3
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800244e:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <HAL_GPIO_Init+0x350>)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_GPIO_Init+0x350>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002478:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <HAL_GPIO_Init+0x350>)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	3301      	adds	r3, #1
 8002482:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	f47f ae78 	bne.w	8002184 <HAL_GPIO_Init+0x10>
  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40010000 	.word	0x40010000
 80024ac:	48000400 	.word	0x48000400
 80024b0:	48000800 	.word	0x48000800
 80024b4:	48000c00 	.word	0x48000c00
 80024b8:	48001000 	.word	0x48001000
 80024bc:	48001400 	.word	0x48001400
 80024c0:	48001800 	.word	0x48001800
 80024c4:	40010400 	.word	0x40010400

080024c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	887b      	ldrh	r3, [r7, #2]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	e001      	b.n	80024ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
 8002504:	4613      	mov	r3, r2
 8002506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002508:	787b      	ldrb	r3, [r7, #1]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002514:	e002      	b.n	800251c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <HAL_PWREx_GetVoltageRange+0x18>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40007000 	.word	0x40007000

08002544 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002552:	d130      	bne.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002554:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800255c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002560:	d038      	beq.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800256a:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002570:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002572:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2232      	movs	r2, #50	; 0x32
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0c9b      	lsrs	r3, r3, #18
 8002584:	3301      	adds	r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002588:	e002      	b.n	8002590 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	3b01      	subs	r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259c:	d102      	bne.n	80025a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f2      	bne.n	800258a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b0:	d110      	bne.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e00f      	b.n	80025d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c2:	d007      	beq.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025cc:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40007000 	.word	0x40007000
 80025e8:	20000010 	.word	0x20000010
 80025ec:	431bde83 	.word	0x431bde83

080025f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e3ca      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002602:	4b97      	ldr	r3, [pc, #604]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800260c:	4b94      	ldr	r3, [pc, #592]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 80e4 	beq.w	80027ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <HAL_RCC_OscConfig+0x4a>
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2b0c      	cmp	r3, #12
 800262e:	f040 808b 	bne.w	8002748 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b01      	cmp	r3, #1
 8002636:	f040 8087 	bne.w	8002748 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800263a:	4b89      	ldr	r3, [pc, #548]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x62>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e3a2      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1a      	ldr	r2, [r3, #32]
 8002656:	4b82      	ldr	r3, [pc, #520]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d004      	beq.n	800266c <HAL_RCC_OscConfig+0x7c>
 8002662:	4b7f      	ldr	r3, [pc, #508]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800266a:	e005      	b.n	8002678 <HAL_RCC_OscConfig+0x88>
 800266c:	4b7c      	ldr	r3, [pc, #496]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 800266e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002678:	4293      	cmp	r3, r2
 800267a:	d223      	bcs.n	80026c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fd87 	bl	8003194 <RCC_SetFlashLatencyFromMSIRange>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e383      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002690:	4b73      	ldr	r3, [pc, #460]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a72      	ldr	r2, [pc, #456]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002696:	f043 0308 	orr.w	r3, r3, #8
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b70      	ldr	r3, [pc, #448]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	496d      	ldr	r1, [pc, #436]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ae:	4b6c      	ldr	r3, [pc, #432]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	4968      	ldr	r1, [pc, #416]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
 80026c2:	e025      	b.n	8002710 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c4:	4b66      	ldr	r3, [pc, #408]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a65      	ldr	r2, [pc, #404]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026ca:	f043 0308 	orr.w	r3, r3, #8
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b63      	ldr	r3, [pc, #396]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4960      	ldr	r1, [pc, #384]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026e2:	4b5f      	ldr	r3, [pc, #380]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	495b      	ldr	r1, [pc, #364]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d109      	bne.n	8002710 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fd47 	bl	8003194 <RCC_SetFlashLatencyFromMSIRange>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e343      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002710:	f000 fc4a 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b52      	ldr	r3, [pc, #328]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	4950      	ldr	r1, [pc, #320]	; (8002864 <HAL_RCC_OscConfig+0x274>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	4a4e      	ldr	r2, [pc, #312]	; (8002868 <HAL_RCC_OscConfig+0x278>)
 800272e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002730:	4b4e      	ldr	r3, [pc, #312]	; (800286c <HAL_RCC_OscConfig+0x27c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe fe41 	bl	80013bc <HAL_InitTick>
 800273a:	4603      	mov	r3, r0
 800273c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d052      	beq.n	80027ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	e327      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d032      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002750:	4b43      	ldr	r3, [pc, #268]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a42      	ldr	r2, [pc, #264]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800275c:	f7ff fbf8 	bl	8001f50 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002764:	f7ff fbf4 	bl	8001f50 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e310      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002776:	4b3a      	ldr	r3, [pc, #232]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002782:	4b37      	ldr	r3, [pc, #220]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a36      	ldr	r2, [pc, #216]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002788:	f043 0308 	orr.w	r3, r3, #8
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4931      	ldr	r1, [pc, #196]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a0:	4b2f      	ldr	r3, [pc, #188]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	492c      	ldr	r1, [pc, #176]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
 80027b4:	e01a      	b.n	80027ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027b6:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a29      	ldr	r2, [pc, #164]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027c2:	f7ff fbc5 	bl	8001f50 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027ca:	f7ff fbc1 	bl	8001f50 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e2dd      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x1da>
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d074      	beq.n	80028e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d005      	beq.n	800280a <HAL_RCC_OscConfig+0x21a>
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	2b0c      	cmp	r3, #12
 8002802:	d10e      	bne.n	8002822 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b03      	cmp	r3, #3
 8002808:	d10b      	bne.n	8002822 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d064      	beq.n	80028e0 <HAL_RCC_OscConfig+0x2f0>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d160      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e2ba      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282a:	d106      	bne.n	800283a <HAL_RCC_OscConfig+0x24a>
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	e026      	b.n	8002888 <HAL_RCC_OscConfig+0x298>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002842:	d115      	bne.n	8002870 <HAL_RCC_OscConfig+0x280>
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a05      	ldr	r2, [pc, #20]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 800284a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a02      	ldr	r2, [pc, #8]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	e014      	b.n	8002888 <HAL_RCC_OscConfig+0x298>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	08008c7c 	.word	0x08008c7c
 8002868:	20000010 	.word	0x20000010
 800286c:	20000014 	.word	0x20000014
 8002870:	4ba0      	ldr	r3, [pc, #640]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a9f      	ldr	r2, [pc, #636]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b9d      	ldr	r3, [pc, #628]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a9c      	ldr	r2, [pc, #624]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d013      	beq.n	80028b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7ff fb5e 	bl	8001f50 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002898:	f7ff fb5a 	bl	8001f50 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	; 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e276      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028aa:	4b92      	ldr	r3, [pc, #584]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x2a8>
 80028b6:	e014      	b.n	80028e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7ff fb4a 	bl	8001f50 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c0:	f7ff fb46 	bl	8001f50 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e262      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028d2:	4b88      	ldr	r3, [pc, #544]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x2d0>
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d060      	beq.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_OscConfig+0x310>
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	2b0c      	cmp	r3, #12
 80028f8:	d119      	bne.n	800292e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d116      	bne.n	800292e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002900:	4b7c      	ldr	r3, [pc, #496]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_OscConfig+0x328>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e23f      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002918:	4b76      	ldr	r3, [pc, #472]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	4973      	ldr	r1, [pc, #460]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800292c:	e040      	b.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d023      	beq.n	800297e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002936:	4b6f      	ldr	r3, [pc, #444]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a6e      	ldr	r2, [pc, #440]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002942:	f7ff fb05 	bl	8001f50 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294a:	f7ff fb01 	bl	8001f50 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e21d      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800295c:	4b65      	ldr	r3, [pc, #404]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002968:	4b62      	ldr	r3, [pc, #392]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	495f      	ldr	r1, [pc, #380]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
 800297c:	e018      	b.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297e:	4b5d      	ldr	r3, [pc, #372]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a5c      	ldr	r2, [pc, #368]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7ff fae1 	bl	8001f50 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002992:	f7ff fadd 	bl	8001f50 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e1f9      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029a4:	4b53      	ldr	r3, [pc, #332]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d03c      	beq.n	8002a36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01c      	beq.n	80029fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c4:	4b4b      	ldr	r3, [pc, #300]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 80029c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ca:	4a4a      	ldr	r2, [pc, #296]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7ff fabc 	bl	8001f50 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029dc:	f7ff fab8 	bl	8001f50 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e1d4      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ee:	4b41      	ldr	r3, [pc, #260]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 80029f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ef      	beq.n	80029dc <HAL_RCC_OscConfig+0x3ec>
 80029fc:	e01b      	b.n	8002a36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fe:	4b3d      	ldr	r3, [pc, #244]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a04:	4a3b      	ldr	r2, [pc, #236]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0e:	f7ff fa9f 	bl	8001f50 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a16:	f7ff fa9b 	bl	8001f50 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e1b7      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a28:	4b32      	ldr	r3, [pc, #200]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1ef      	bne.n	8002a16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80a6 	beq.w	8002b90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a44:	2300      	movs	r3, #0
 8002a46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a48:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10d      	bne.n	8002a70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a54:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	4a26      	ldr	r2, [pc, #152]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a60:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a70:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <HAL_RCC_OscConfig+0x508>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d118      	bne.n	8002aae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <HAL_RCC_OscConfig+0x508>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1d      	ldr	r2, [pc, #116]	; (8002af8 <HAL_RCC_OscConfig+0x508>)
 8002a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a88:	f7ff fa62 	bl	8001f50 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a90:	f7ff fa5e 	bl	8001f50 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e17a      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <HAL_RCC_OscConfig+0x508>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d108      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4d8>
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abc:	4a0d      	ldr	r2, [pc, #52]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ac6:	e029      	b.n	8002b1c <HAL_RCC_OscConfig+0x52c>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d115      	bne.n	8002afc <HAL_RCC_OscConfig+0x50c>
 8002ad0:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad6:	4a07      	ldr	r2, [pc, #28]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ad8:	f043 0304 	orr.w	r3, r3, #4
 8002adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ae0:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae6:	4a03      	ldr	r2, [pc, #12]	; (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002af0:	e014      	b.n	8002b1c <HAL_RCC_OscConfig+0x52c>
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40007000 	.word	0x40007000
 8002afc:	4b9c      	ldr	r3, [pc, #624]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	4a9b      	ldr	r2, [pc, #620]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b0c:	4b98      	ldr	r3, [pc, #608]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	4a97      	ldr	r2, [pc, #604]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b14:	f023 0304 	bic.w	r3, r3, #4
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d016      	beq.n	8002b52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7ff fa14 	bl	8001f50 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7ff fa10 	bl	8001f50 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e12a      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b42:	4b8b      	ldr	r3, [pc, #556]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ed      	beq.n	8002b2c <HAL_RCC_OscConfig+0x53c>
 8002b50:	e015      	b.n	8002b7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7ff f9fd 	bl	8001f50 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7ff f9f9 	bl	8001f50 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e113      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b70:	4b7f      	ldr	r3, [pc, #508]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1ed      	bne.n	8002b5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7e:	7ffb      	ldrb	r3, [r7, #31]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d105      	bne.n	8002b90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b84:	4b7a      	ldr	r3, [pc, #488]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	4a79      	ldr	r2, [pc, #484]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80fe 	beq.w	8002d96 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	f040 80d0 	bne.w	8002d44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ba4:	4b72      	ldr	r3, [pc, #456]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f003 0203 	and.w	r2, r3, #3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d130      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d127      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d11f      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002be4:	2a07      	cmp	r2, #7
 8002be6:	bf14      	ite	ne
 8002be8:	2201      	movne	r2, #1
 8002bea:	2200      	moveq	r2, #0
 8002bec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d113      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d109      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	3b01      	subs	r3, #1
 8002c14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d06e      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b0c      	cmp	r3, #12
 8002c1e:	d069      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c20:	4b53      	ldr	r3, [pc, #332]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c2c:	4b50      	ldr	r3, [pc, #320]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0ad      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c3c:	4b4c      	ldr	r3, [pc, #304]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a4b      	ldr	r2, [pc, #300]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c48:	f7ff f982 	bl	8001f50 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c50:	f7ff f97e 	bl	8001f50 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e09a      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c62:	4b43      	ldr	r3, [pc, #268]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6e:	4b40      	ldr	r3, [pc, #256]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	4b40      	ldr	r3, [pc, #256]	; (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c7e:	3a01      	subs	r2, #1
 8002c80:	0112      	lsls	r2, r2, #4
 8002c82:	4311      	orrs	r1, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c88:	0212      	lsls	r2, r2, #8
 8002c8a:	4311      	orrs	r1, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c90:	0852      	lsrs	r2, r2, #1
 8002c92:	3a01      	subs	r2, #1
 8002c94:	0552      	lsls	r2, r2, #21
 8002c96:	4311      	orrs	r1, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c9c:	0852      	lsrs	r2, r2, #1
 8002c9e:	3a01      	subs	r2, #1
 8002ca0:	0652      	lsls	r2, r2, #25
 8002ca2:	4311      	orrs	r1, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ca8:	0912      	lsrs	r2, r2, #4
 8002caa:	0452      	lsls	r2, r2, #17
 8002cac:	430a      	orrs	r2, r1
 8002cae:	4930      	ldr	r1, [pc, #192]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cb4:	4b2e      	ldr	r3, [pc, #184]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a2d      	ldr	r2, [pc, #180]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a2a      	ldr	r2, [pc, #168]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ccc:	f7ff f940 	bl	8001f50 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7ff f93c 	bl	8001f50 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e058      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce6:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cf2:	e050      	b.n	8002d96 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e04f      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d148      	bne.n	8002d96 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d04:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d10:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d1c:	f7ff f918 	bl	8001f50 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d24:	f7ff f914 	bl	8001f50 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e030      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d36:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x734>
 8002d42:	e028      	b.n	8002d96 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d023      	beq.n	8002d92 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a08      	ldr	r2, [pc, #32]	; (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7ff f8fb 	bl	8001f50 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5c:	e00c      	b.n	8002d78 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5e:	f7ff f8f7 	bl	8001f50 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d905      	bls.n	8002d78 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e013      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
 8002d70:	40021000 	.word	0x40021000
 8002d74:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d78:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_RCC_OscConfig+0x7b0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1ec      	bne.n	8002d5e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_OscConfig+0x7b0>)
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	4905      	ldr	r1, [pc, #20]	; (8002da0 <HAL_RCC_OscConfig+0x7b0>)
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_RCC_OscConfig+0x7b4>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60cb      	str	r3, [r1, #12]
 8002d90:	e001      	b.n	8002d96 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	feeefffc 	.word	0xfeeefffc

08002da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0e7      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b75      	ldr	r3, [pc, #468]	; (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d910      	bls.n	8002dec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b72      	ldr	r3, [pc, #456]	; (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 0207 	bic.w	r2, r3, #7
 8002dd2:	4970      	ldr	r1, [pc, #448]	; (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b6e      	ldr	r3, [pc, #440]	; (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0cf      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d010      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	4b66      	ldr	r3, [pc, #408]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d908      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e08:	4b63      	ldr	r3, [pc, #396]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	4960      	ldr	r1, [pc, #384]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d04c      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2e:	4b5a      	ldr	r3, [pc, #360]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d121      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e0a6      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e46:	4b54      	ldr	r3, [pc, #336]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d115      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e09a      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e5e:	4b4e      	ldr	r3, [pc, #312]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e08e      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6e:	4b4a      	ldr	r3, [pc, #296]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e086      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e7e:	4b46      	ldr	r3, [pc, #280]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4943      	ldr	r1, [pc, #268]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e90:	f7ff f85e 	bl	8001f50 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7ff f85a 	bl	8001f50 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e06e      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 020c 	and.w	r2, r3, #12
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1eb      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d010      	beq.n	8002eee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	4b31      	ldr	r3, [pc, #196]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d208      	bcs.n	8002eee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002edc:	4b2e      	ldr	r3, [pc, #184]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	492b      	ldr	r1, [pc, #172]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eee:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d210      	bcs.n	8002f1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efc:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 0207 	bic.w	r2, r3, #7
 8002f04:	4923      	ldr	r1, [pc, #140]	; (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0c:	4b21      	ldr	r3, [pc, #132]	; (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e036      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4918      	ldr	r1, [pc, #96]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d009      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f48:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4910      	ldr	r1, [pc, #64]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f5c:	f000 f824 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	490b      	ldr	r1, [pc, #44]	; (8002f9c <HAL_RCC_ClockConfig+0x1f4>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
 8002f78:	4a09      	ldr	r2, [pc, #36]	; (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002f7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_RCC_ClockConfig+0x1fc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fe fa1b 	bl	80013bc <HAL_InitTick>
 8002f86:	4603      	mov	r3, r0
 8002f88:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f8a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40022000 	.word	0x40022000
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	08008c7c 	.word	0x08008c7c
 8002fa0:	20000010 	.word	0x20000010
 8002fa4:	20000014 	.word	0x20000014

08002fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb6:	4b3e      	ldr	r3, [pc, #248]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc0:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x34>
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d121      	bne.n	800301a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d11e      	bne.n	800301a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fdc:	4b34      	ldr	r3, [pc, #208]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fe8:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	e005      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ff8:	4b2d      	ldr	r3, [pc, #180]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003004:	4a2b      	ldr	r2, [pc, #172]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10d      	bne.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b04      	cmp	r3, #4
 800301e:	d102      	bne.n	8003026 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003020:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	e004      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b08      	cmp	r3, #8
 800302a:	d101      	bne.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800302c:	4b23      	ldr	r3, [pc, #140]	; (80030bc <HAL_RCC_GetSysClockFreq+0x114>)
 800302e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d134      	bne.n	80030a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d003      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0xa6>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d003      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0xac>
 800304c:	e005      	b.n	800305a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800304e:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003050:	617b      	str	r3, [r7, #20]
      break;
 8003052:	e005      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003054:	4b19      	ldr	r3, [pc, #100]	; (80030bc <HAL_RCC_GetSysClockFreq+0x114>)
 8003056:	617b      	str	r3, [r7, #20]
      break;
 8003058:	e002      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	617b      	str	r3, [r7, #20]
      break;
 800305e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003060:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	3301      	adds	r3, #1
 800306c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	fb03 f202 	mul.w	r2, r3, r2
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	0e5b      	lsrs	r3, r3, #25
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	3301      	adds	r3, #1
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	fbb2 f3f3 	udiv	r3, r2, r3
 800309e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030a0:	69bb      	ldr	r3, [r7, #24]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3724      	adds	r7, #36	; 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	08008c94 	.word	0x08008c94
 80030b8:	00f42400 	.word	0x00f42400
 80030bc:	007a1200 	.word	0x007a1200

080030c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20000010 	.word	0x20000010

080030d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030dc:	f7ff fff0 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	0a1b      	lsrs	r3, r3, #8
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4904      	ldr	r1, [pc, #16]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	08008c8c 	.word	0x08008c8c

08003104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003108:	f7ff ffda 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0adb      	lsrs	r3, r3, #11
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4904      	ldr	r1, [pc, #16]	; (800312c <HAL_RCC_GetPCLK2Freq+0x28>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40021000 	.word	0x40021000
 800312c:	08008c8c 	.word	0x08008c8c

08003130 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	220f      	movs	r2, #15
 800313e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <HAL_RCC_GetClockConfig+0x5c>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0203 	and.w	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <HAL_RCC_GetClockConfig+0x5c>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_RCC_GetClockConfig+0x5c>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_GetClockConfig+0x5c>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	08db      	lsrs	r3, r3, #3
 800316a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003172:	4b07      	ldr	r3, [pc, #28]	; (8003190 <HAL_RCC_GetClockConfig+0x60>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0207 	and.w	r2, r3, #7
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	601a      	str	r2, [r3, #0]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	40022000 	.word	0x40022000

08003194 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800319c:	2300      	movs	r3, #0
 800319e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031a0:	4b2a      	ldr	r3, [pc, #168]	; (800324c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031ac:	f7ff f9bc 	bl	8002528 <HAL_PWREx_GetVoltageRange>
 80031b0:	6178      	str	r0, [r7, #20]
 80031b2:	e014      	b.n	80031de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031b4:	4b25      	ldr	r3, [pc, #148]	; (800324c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b8:	4a24      	ldr	r2, [pc, #144]	; (800324c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031be:	6593      	str	r3, [r2, #88]	; 0x58
 80031c0:	4b22      	ldr	r3, [pc, #136]	; (800324c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031cc:	f7ff f9ac 	bl	8002528 <HAL_PWREx_GetVoltageRange>
 80031d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031d2:	4b1e      	ldr	r3, [pc, #120]	; (800324c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d6:	4a1d      	ldr	r2, [pc, #116]	; (800324c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e4:	d10b      	bne.n	80031fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b80      	cmp	r3, #128	; 0x80
 80031ea:	d919      	bls.n	8003220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2ba0      	cmp	r3, #160	; 0xa0
 80031f0:	d902      	bls.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031f2:	2302      	movs	r3, #2
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	e013      	b.n	8003220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031f8:	2301      	movs	r3, #1
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	e010      	b.n	8003220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b80      	cmp	r3, #128	; 0x80
 8003202:	d902      	bls.n	800320a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003204:	2303      	movs	r3, #3
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	e00a      	b.n	8003220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b80      	cmp	r3, #128	; 0x80
 800320e:	d102      	bne.n	8003216 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003210:	2302      	movs	r3, #2
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	e004      	b.n	8003220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b70      	cmp	r3, #112	; 0x70
 800321a:	d101      	bne.n	8003220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800321c:	2301      	movs	r3, #1
 800321e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f023 0207 	bic.w	r2, r3, #7
 8003228:	4909      	ldr	r1, [pc, #36]	; (8003250 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003230:	4b07      	ldr	r3, [pc, #28]	; (8003250 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	429a      	cmp	r2, r3
 800323c:	d001      	beq.n	8003242 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	40022000 	.word	0x40022000

08003254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800325c:	2300      	movs	r3, #0
 800325e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003260:	2300      	movs	r3, #0
 8003262:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800326c:	2b00      	cmp	r3, #0
 800326e:	d041      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003274:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003278:	d02a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800327a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800327e:	d824      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003280:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003284:	d008      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003286:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800328a:	d81e      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003294:	d010      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003296:	e018      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003298:	4b86      	ldr	r3, [pc, #536]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4a85      	ldr	r2, [pc, #532]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032a4:	e015      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3304      	adds	r3, #4
 80032aa:	2100      	movs	r1, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fabb 	bl	8003828 <RCCEx_PLLSAI1_Config>
 80032b2:	4603      	mov	r3, r0
 80032b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032b6:	e00c      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3320      	adds	r3, #32
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fba6 	bl	8003a10 <RCCEx_PLLSAI2_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032c8:	e003      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	74fb      	strb	r3, [r7, #19]
      break;
 80032ce:	e000      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032d8:	4b76      	ldr	r3, [pc, #472]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032e6:	4973      	ldr	r1, [pc, #460]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032ee:	e001      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d041      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003304:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003308:	d02a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800330a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800330e:	d824      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003310:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003314:	d008      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800331a:	d81e      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003324:	d010      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003326:	e018      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003328:	4b62      	ldr	r3, [pc, #392]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4a61      	ldr	r2, [pc, #388]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003332:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003334:	e015      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3304      	adds	r3, #4
 800333a:	2100      	movs	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fa73 	bl	8003828 <RCCEx_PLLSAI1_Config>
 8003342:	4603      	mov	r3, r0
 8003344:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003346:	e00c      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3320      	adds	r3, #32
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fb5e 	bl	8003a10 <RCCEx_PLLSAI2_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003358:	e003      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	74fb      	strb	r3, [r7, #19]
      break;
 800335e:	e000      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003362:	7cfb      	ldrb	r3, [r7, #19]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10b      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003368:	4b52      	ldr	r3, [pc, #328]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003376:	494f      	ldr	r1, [pc, #316]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800337e:	e001      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80a0 	beq.w	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003392:	2300      	movs	r3, #0
 8003394:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003396:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033a6:	2300      	movs	r3, #0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ac:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	4a40      	ldr	r2, [pc, #256]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b6:	6593      	str	r3, [r2, #88]	; 0x58
 80033b8:	4b3e      	ldr	r3, [pc, #248]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c4:	2301      	movs	r3, #1
 80033c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c8:	4b3b      	ldr	r3, [pc, #236]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a3a      	ldr	r2, [pc, #232]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033d4:	f7fe fdbc 	bl	8001f50 <HAL_GetTick>
 80033d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033da:	e009      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033dc:	f7fe fdb8 	bl	8001f50 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d902      	bls.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	74fb      	strb	r3, [r7, #19]
        break;
 80033ee:	e005      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033f0:	4b31      	ldr	r3, [pc, #196]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ef      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033fc:	7cfb      	ldrb	r3, [r7, #19]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d15c      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003402:	4b2c      	ldr	r3, [pc, #176]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01f      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	429a      	cmp	r2, r3
 800341e:	d019      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003420:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800342c:	4b21      	ldr	r3, [pc, #132]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	4a20      	ldr	r2, [pc, #128]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800343c:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	4a1c      	ldr	r2, [pc, #112]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800344c:	4a19      	ldr	r2, [pc, #100]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d016      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fe fd77 	bl	8001f50 <HAL_GetTick>
 8003462:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003464:	e00b      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003466:	f7fe fd73 	bl	8001f50 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	f241 3288 	movw	r2, #5000	; 0x1388
 8003474:	4293      	cmp	r3, r2
 8003476:	d902      	bls.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	74fb      	strb	r3, [r7, #19]
            break;
 800347c:	e006      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347e:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0ec      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10c      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034a2:	4904      	ldr	r1, [pc, #16]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034aa:	e009      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	74bb      	strb	r3, [r7, #18]
 80034b0:	e006      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034bc:	7cfb      	ldrb	r3, [r7, #19]
 80034be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c0:	7c7b      	ldrb	r3, [r7, #17]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d105      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c6:	4b9e      	ldr	r3, [pc, #632]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ca:	4a9d      	ldr	r2, [pc, #628]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034de:	4b98      	ldr	r3, [pc, #608]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	f023 0203 	bic.w	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	4994      	ldr	r1, [pc, #592]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003500:	4b8f      	ldr	r3, [pc, #572]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	f023 020c 	bic.w	r2, r3, #12
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350e:	498c      	ldr	r1, [pc, #560]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003522:	4b87      	ldr	r3, [pc, #540]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	4983      	ldr	r1, [pc, #524]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003544:	4b7e      	ldr	r3, [pc, #504]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	497b      	ldr	r1, [pc, #492]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003566:	4b76      	ldr	r3, [pc, #472]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003574:	4972      	ldr	r1, [pc, #456]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003588:	4b6d      	ldr	r3, [pc, #436]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003596:	496a      	ldr	r1, [pc, #424]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035aa:	4b65      	ldr	r3, [pc, #404]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b8:	4961      	ldr	r1, [pc, #388]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035cc:	4b5c      	ldr	r3, [pc, #368]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035da:	4959      	ldr	r1, [pc, #356]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ee:	4b54      	ldr	r3, [pc, #336]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fc:	4950      	ldr	r1, [pc, #320]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003610:	4b4b      	ldr	r3, [pc, #300]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003616:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361e:	4948      	ldr	r1, [pc, #288]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003632:	4b43      	ldr	r3, [pc, #268]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003638:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	493f      	ldr	r1, [pc, #252]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d028      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003654:	4b3a      	ldr	r3, [pc, #232]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003662:	4937      	ldr	r1, [pc, #220]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800366e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003672:	d106      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003674:	4b32      	ldr	r3, [pc, #200]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4a31      	ldr	r2, [pc, #196]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800367e:	60d3      	str	r3, [r2, #12]
 8003680:	e011      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003686:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800368a:	d10c      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	2101      	movs	r1, #1
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f8c8 	bl	8003828 <RCCEx_PLLSAI1_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800369c:	7cfb      	ldrb	r3, [r7, #19]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80036a2:	7cfb      	ldrb	r3, [r7, #19]
 80036a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d028      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036b2:	4b23      	ldr	r3, [pc, #140]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c0:	491f      	ldr	r1, [pc, #124]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d0:	d106      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d2:	4b1b      	ldr	r3, [pc, #108]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	4a1a      	ldr	r2, [pc, #104]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036dc:	60d3      	str	r3, [r2, #12]
 80036de:	e011      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036e8:	d10c      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	2101      	movs	r1, #1
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 f899 	bl	8003828 <RCCEx_PLLSAI1_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036fa:	7cfb      	ldrb	r3, [r7, #19]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003700:	7cfb      	ldrb	r3, [r7, #19]
 8003702:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d02b      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003716:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371e:	4908      	ldr	r1, [pc, #32]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800372e:	d109      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003730:	4b03      	ldr	r3, [pc, #12]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4a02      	ldr	r2, [pc, #8]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800373a:	60d3      	str	r3, [r2, #12]
 800373c:	e014      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003748:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800374c:	d10c      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3304      	adds	r3, #4
 8003752:	2101      	movs	r1, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f867 	bl	8003828 <RCCEx_PLLSAI1_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d02f      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003774:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003782:	4928      	ldr	r1, [pc, #160]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800378e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003792:	d10d      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3304      	adds	r3, #4
 8003798:	2102      	movs	r1, #2
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f844 	bl	8003828 <RCCEx_PLLSAI1_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037a4:	7cfb      	ldrb	r3, [r7, #19]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d014      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037aa:	7cfb      	ldrb	r3, [r7, #19]
 80037ac:	74bb      	strb	r3, [r7, #18]
 80037ae:	e011      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3320      	adds	r3, #32
 80037be:	2102      	movs	r1, #2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 f925 	bl	8003a10 <RCCEx_PLLSAI2_Config>
 80037c6:	4603      	mov	r3, r0
 80037c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037d0:	7cfb      	ldrb	r3, [r7, #19]
 80037d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037e0:	4b10      	ldr	r3, [pc, #64]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ee:	490d      	ldr	r1, [pc, #52]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003802:	4b08      	ldr	r3, [pc, #32]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003812:	4904      	ldr	r1, [pc, #16]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800381a:	7cbb      	ldrb	r3, [r7, #18]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40021000 	.word	0x40021000

08003828 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003836:	4b75      	ldr	r3, [pc, #468]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d018      	beq.n	8003874 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003842:	4b72      	ldr	r3, [pc, #456]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0203 	and.w	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d10d      	bne.n	800386e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
       ||
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800385a:	4b6c      	ldr	r3, [pc, #432]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	091b      	lsrs	r3, r3, #4
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
       ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d047      	beq.n	80038fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
 8003872:	e044      	b.n	80038fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d018      	beq.n	80038ae <RCCEx_PLLSAI1_Config+0x86>
 800387c:	2b03      	cmp	r3, #3
 800387e:	d825      	bhi.n	80038cc <RCCEx_PLLSAI1_Config+0xa4>
 8003880:	2b01      	cmp	r3, #1
 8003882:	d002      	beq.n	800388a <RCCEx_PLLSAI1_Config+0x62>
 8003884:	2b02      	cmp	r3, #2
 8003886:	d009      	beq.n	800389c <RCCEx_PLLSAI1_Config+0x74>
 8003888:	e020      	b.n	80038cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800388a:	4b60      	ldr	r3, [pc, #384]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d11d      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800389a:	e01a      	b.n	80038d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800389c:	4b5b      	ldr	r3, [pc, #364]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d116      	bne.n	80038d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ac:	e013      	b.n	80038d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038ae:	4b57      	ldr	r3, [pc, #348]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10f      	bne.n	80038da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ba:	4b54      	ldr	r3, [pc, #336]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038ca:	e006      	b.n	80038da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	73fb      	strb	r3, [r7, #15]
      break;
 80038d0:	e004      	b.n	80038dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038d2:	bf00      	nop
 80038d4:	e002      	b.n	80038dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038d6:	bf00      	nop
 80038d8:	e000      	b.n	80038dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038da:	bf00      	nop
    }

    if(status == HAL_OK)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10d      	bne.n	80038fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038e2:	4b4a      	ldr	r3, [pc, #296]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6819      	ldr	r1, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	430b      	orrs	r3, r1
 80038f8:	4944      	ldr	r1, [pc, #272]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d17d      	bne.n	8003a00 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003904:	4b41      	ldr	r3, [pc, #260]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a40      	ldr	r2, [pc, #256]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800390a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800390e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003910:	f7fe fb1e 	bl	8001f50 <HAL_GetTick>
 8003914:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003916:	e009      	b.n	800392c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003918:	f7fe fb1a 	bl	8001f50 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d902      	bls.n	800392c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	73fb      	strb	r3, [r7, #15]
        break;
 800392a:	e005      	b.n	8003938 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800392c:	4b37      	ldr	r3, [pc, #220]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1ef      	bne.n	8003918 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d160      	bne.n	8003a00 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d111      	bne.n	8003968 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003944:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800394c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6892      	ldr	r2, [r2, #8]
 8003954:	0211      	lsls	r1, r2, #8
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68d2      	ldr	r2, [r2, #12]
 800395a:	0912      	lsrs	r2, r2, #4
 800395c:	0452      	lsls	r2, r2, #17
 800395e:	430a      	orrs	r2, r1
 8003960:	492a      	ldr	r1, [pc, #168]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003962:	4313      	orrs	r3, r2
 8003964:	610b      	str	r3, [r1, #16]
 8003966:	e027      	b.n	80039b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d112      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800396e:	4b27      	ldr	r3, [pc, #156]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003976:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6892      	ldr	r2, [r2, #8]
 800397e:	0211      	lsls	r1, r2, #8
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6912      	ldr	r2, [r2, #16]
 8003984:	0852      	lsrs	r2, r2, #1
 8003986:	3a01      	subs	r2, #1
 8003988:	0552      	lsls	r2, r2, #21
 800398a:	430a      	orrs	r2, r1
 800398c:	491f      	ldr	r1, [pc, #124]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800398e:	4313      	orrs	r3, r2
 8003990:	610b      	str	r3, [r1, #16]
 8003992:	e011      	b.n	80039b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003994:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800399c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6892      	ldr	r2, [r2, #8]
 80039a4:	0211      	lsls	r1, r2, #8
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6952      	ldr	r2, [r2, #20]
 80039aa:	0852      	lsrs	r2, r2, #1
 80039ac:	3a01      	subs	r2, #1
 80039ae:	0652      	lsls	r2, r2, #25
 80039b0:	430a      	orrs	r2, r1
 80039b2:	4916      	ldr	r1, [pc, #88]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039b8:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a13      	ldr	r2, [pc, #76]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c4:	f7fe fac4 	bl	8001f50 <HAL_GetTick>
 80039c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039ca:	e009      	b.n	80039e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039cc:	f7fe fac0 	bl	8001f50 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d902      	bls.n	80039e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	73fb      	strb	r3, [r7, #15]
          break;
 80039de:	e005      	b.n	80039ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039e0:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0ef      	beq.n	80039cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039f2:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	4904      	ldr	r1, [pc, #16]	; (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000

08003a10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a1e:	4b6a      	ldr	r3, [pc, #424]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d018      	beq.n	8003a5c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a2a:	4b67      	ldr	r3, [pc, #412]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0203 	and.w	r2, r3, #3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d10d      	bne.n	8003a56 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a42:	4b61      	ldr	r3, [pc, #388]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
       ||
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d047      	beq.n	8003ae6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
 8003a5a:	e044      	b.n	8003ae6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d018      	beq.n	8003a96 <RCCEx_PLLSAI2_Config+0x86>
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d825      	bhi.n	8003ab4 <RCCEx_PLLSAI2_Config+0xa4>
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d002      	beq.n	8003a72 <RCCEx_PLLSAI2_Config+0x62>
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d009      	beq.n	8003a84 <RCCEx_PLLSAI2_Config+0x74>
 8003a70:	e020      	b.n	8003ab4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a72:	4b55      	ldr	r3, [pc, #340]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d11d      	bne.n	8003aba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a82:	e01a      	b.n	8003aba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a84:	4b50      	ldr	r3, [pc, #320]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d116      	bne.n	8003abe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a94:	e013      	b.n	8003abe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a96:	4b4c      	ldr	r3, [pc, #304]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10f      	bne.n	8003ac2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aa2:	4b49      	ldr	r3, [pc, #292]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ab2:	e006      	b.n	8003ac2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab8:	e004      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aba:	bf00      	nop
 8003abc:	e002      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e000      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ac2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10d      	bne.n	8003ae6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003aca:	4b3f      	ldr	r3, [pc, #252]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6819      	ldr	r1, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	4939      	ldr	r1, [pc, #228]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d167      	bne.n	8003bbc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003aec:	4b36      	ldr	r3, [pc, #216]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a35      	ldr	r2, [pc, #212]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af8:	f7fe fa2a 	bl	8001f50 <HAL_GetTick>
 8003afc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003afe:	e009      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b00:	f7fe fa26 	bl	8001f50 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d902      	bls.n	8003b14 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	73fb      	strb	r3, [r7, #15]
        break;
 8003b12:	e005      	b.n	8003b20 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b14:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1ef      	bne.n	8003b00 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d14a      	bne.n	8003bbc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d111      	bne.n	8003b50 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b2c:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6892      	ldr	r2, [r2, #8]
 8003b3c:	0211      	lsls	r1, r2, #8
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68d2      	ldr	r2, [r2, #12]
 8003b42:	0912      	lsrs	r2, r2, #4
 8003b44:	0452      	lsls	r2, r2, #17
 8003b46:	430a      	orrs	r2, r1
 8003b48:	491f      	ldr	r1, [pc, #124]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	614b      	str	r3, [r1, #20]
 8003b4e:	e011      	b.n	8003b74 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b50:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6892      	ldr	r2, [r2, #8]
 8003b60:	0211      	lsls	r1, r2, #8
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6912      	ldr	r2, [r2, #16]
 8003b66:	0852      	lsrs	r2, r2, #1
 8003b68:	3a01      	subs	r2, #1
 8003b6a:	0652      	lsls	r2, r2, #25
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	4916      	ldr	r1, [pc, #88]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b80:	f7fe f9e6 	bl	8001f50 <HAL_GetTick>
 8003b84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b86:	e009      	b.n	8003b9c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b88:	f7fe f9e2 	bl	8001f50 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d902      	bls.n	8003b9c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	73fb      	strb	r3, [r7, #15]
          break;
 8003b9a:	e005      	b.n	8003ba8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ef      	beq.n	8003b88 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	4904      	ldr	r1, [pc, #16]	; (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000

08003bcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e095      	b.n	8003d0a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d108      	bne.n	8003bf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bee:	d009      	beq.n	8003c04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	61da      	str	r2, [r3, #28]
 8003bf6:	e005      	b.n	8003c04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd fb42 	bl	80012a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c44:	d902      	bls.n	8003c4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	e002      	b.n	8003c52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c5a:	d007      	beq.n	8003c6c <HAL_SPI_Init+0xa0>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c64:	d002      	beq.n	8003c6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cae:	ea42 0103 	orr.w	r1, r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	f003 0204 	and.w	r2, r3, #4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ce8:	ea42 0103 	orr.w	r1, r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b088      	sub	sp, #32
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	603b      	str	r3, [r7, #0]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_SPI_Transmit+0x22>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e15f      	b.n	8003ff4 <HAL_SPI_Transmit+0x2e2>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d3c:	f7fe f908 	bl	8001f50 <HAL_GetTick>
 8003d40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d002      	beq.n	8003d58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
 8003d54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d56:	e148      	b.n	8003fea <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <HAL_SPI_Transmit+0x52>
 8003d5e:	88fb      	ldrh	r3, [r7, #6]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d102      	bne.n	8003d6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d68:	e13f      	b.n	8003fea <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	88fa      	ldrh	r2, [r7, #6]
 8003d82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	88fa      	ldrh	r2, [r7, #6]
 8003d88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db4:	d10f      	bne.n	8003dd6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	d007      	beq.n	8003df4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dfc:	d94f      	bls.n	8003e9e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_SPI_Transmit+0xfa>
 8003e06:	8afb      	ldrh	r3, [r7, #22]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d142      	bne.n	8003e92 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	881a      	ldrh	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	1c9a      	adds	r2, r3, #2
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e30:	e02f      	b.n	8003e92 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d112      	bne.n	8003e66 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	881a      	ldrh	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	1c9a      	adds	r2, r3, #2
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e64:	e015      	b.n	8003e92 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e66:	f7fe f873 	bl	8001f50 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d803      	bhi.n	8003e7e <HAL_SPI_Transmit+0x16c>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d102      	bne.n	8003e84 <HAL_SPI_Transmit+0x172>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003e90:	e0ab      	b.n	8003fea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1ca      	bne.n	8003e32 <HAL_SPI_Transmit+0x120>
 8003e9c:	e080      	b.n	8003fa0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_SPI_Transmit+0x19a>
 8003ea6:	8afb      	ldrh	r3, [r7, #22]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d174      	bne.n	8003f96 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d912      	bls.n	8003edc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	881a      	ldrh	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	1c9a      	adds	r2, r3, #2
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b02      	subs	r3, #2
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eda:	e05c      	b.n	8003f96 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	330c      	adds	r3, #12
 8003ee6:	7812      	ldrb	r2, [r2, #0]
 8003ee8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003f02:	e048      	b.n	8003f96 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d12b      	bne.n	8003f6a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d912      	bls.n	8003f42 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	881a      	ldrh	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	1c9a      	adds	r2, r3, #2
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b02      	subs	r3, #2
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f40:	e029      	b.n	8003f96 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	7812      	ldrb	r2, [r2, #0]
 8003f4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f68:	e015      	b.n	8003f96 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f6a:	f7fd fff1 	bl	8001f50 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d803      	bhi.n	8003f82 <HAL_SPI_Transmit+0x270>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d102      	bne.n	8003f88 <HAL_SPI_Transmit+0x276>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d106      	bne.n	8003f96 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003f94:	e029      	b.n	8003fea <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1b1      	bne.n	8003f04 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	6839      	ldr	r1, [r7, #0]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f947 	bl	8004238 <SPI_EndRxTxTransaction>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	77fb      	strb	r3, [r7, #31]
 8003fe0:	e003      	b.n	8003fea <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ff2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3720      	adds	r7, #32
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800400c:	f7fd ffa0 	bl	8001f50 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	4413      	add	r3, r2
 800401a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800401c:	f7fd ff98 	bl	8001f50 <HAL_GetTick>
 8004020:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004022:	4b39      	ldr	r3, [pc, #228]	; (8004108 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	015b      	lsls	r3, r3, #5
 8004028:	0d1b      	lsrs	r3, r3, #20
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	fb02 f303 	mul.w	r3, r2, r3
 8004030:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004032:	e054      	b.n	80040de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403a:	d050      	beq.n	80040de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800403c:	f7fd ff88 	bl	8001f50 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	429a      	cmp	r2, r3
 800404a:	d902      	bls.n	8004052 <SPI_WaitFlagStateUntilTimeout+0x56>
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d13d      	bne.n	80040ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004060:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800406a:	d111      	bne.n	8004090 <SPI_WaitFlagStateUntilTimeout+0x94>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004074:	d004      	beq.n	8004080 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407e:	d107      	bne.n	8004090 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800408e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004098:	d10f      	bne.n	80040ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e017      	b.n	80040fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3b01      	subs	r3, #1
 80040dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	bf0c      	ite	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	2300      	movne	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d19b      	bne.n	8004034 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3720      	adds	r7, #32
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000010 	.word	0x20000010

0800410c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	; 0x28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800411e:	f7fd ff17 	bl	8001f50 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	4413      	add	r3, r2
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800412e:	f7fd ff0f 	bl	8001f50 <HAL_GetTick>
 8004132:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	330c      	adds	r3, #12
 800413a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800413c:	4b3d      	ldr	r3, [pc, #244]	; (8004234 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	00da      	lsls	r2, r3, #3
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	0d1b      	lsrs	r3, r3, #20
 800414c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414e:	fb02 f303 	mul.w	r3, r2, r3
 8004152:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004154:	e060      	b.n	8004218 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800415c:	d107      	bne.n	800416e <SPI_WaitFifoStateUntilTimeout+0x62>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d104      	bne.n	800416e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800416c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d050      	beq.n	8004218 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004176:	f7fd feeb 	bl	8001f50 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004182:	429a      	cmp	r2, r3
 8004184:	d902      	bls.n	800418c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	2b00      	cmp	r3, #0
 800418a:	d13d      	bne.n	8004208 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800419a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a4:	d111      	bne.n	80041ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ae:	d004      	beq.n	80041ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b8:	d107      	bne.n	80041ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d2:	d10f      	bne.n	80041f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e010      	b.n	800422a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	3b01      	subs	r3, #1
 8004216:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4013      	ands	r3, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	429a      	cmp	r2, r3
 8004226:	d196      	bne.n	8004156 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3728      	adds	r7, #40	; 0x28
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000010 	.word	0x20000010

08004238 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2200      	movs	r2, #0
 800424c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f7ff ff5b 	bl	800410c <SPI_WaitFifoStateUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d007      	beq.n	800426c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004260:	f043 0220 	orr.w	r2, r3, #32
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e027      	b.n	80042bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2200      	movs	r2, #0
 8004274:	2180      	movs	r1, #128	; 0x80
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f7ff fec0 	bl	8003ffc <SPI_WaitFlagStateUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004286:	f043 0220 	orr.w	r2, r3, #32
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e014      	b.n	80042bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2200      	movs	r2, #0
 800429a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f7ff ff34 	bl	800410c <SPI_WaitFifoStateUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ae:	f043 0220 	orr.w	r2, r3, #32
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e000      	b.n	80042bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e049      	b.n	800436a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f841 	bl	8004372 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	4619      	mov	r1, r3
 8004302:	4610      	mov	r0, r2
 8004304:	f000 f9da 	bl	80046bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
	...

08004388 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b01      	cmp	r3, #1
 800439a:	d001      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e04f      	b.n	8004440 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a23      	ldr	r2, [pc, #140]	; (800444c <HAL_TIM_Base_Start_IT+0xc4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d01d      	beq.n	80043fe <HAL_TIM_Base_Start_IT+0x76>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ca:	d018      	beq.n	80043fe <HAL_TIM_Base_Start_IT+0x76>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a1f      	ldr	r2, [pc, #124]	; (8004450 <HAL_TIM_Base_Start_IT+0xc8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d013      	beq.n	80043fe <HAL_TIM_Base_Start_IT+0x76>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a1e      	ldr	r2, [pc, #120]	; (8004454 <HAL_TIM_Base_Start_IT+0xcc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00e      	beq.n	80043fe <HAL_TIM_Base_Start_IT+0x76>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1c      	ldr	r2, [pc, #112]	; (8004458 <HAL_TIM_Base_Start_IT+0xd0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d009      	beq.n	80043fe <HAL_TIM_Base_Start_IT+0x76>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1b      	ldr	r2, [pc, #108]	; (800445c <HAL_TIM_Base_Start_IT+0xd4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d004      	beq.n	80043fe <HAL_TIM_Base_Start_IT+0x76>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a19      	ldr	r2, [pc, #100]	; (8004460 <HAL_TIM_Base_Start_IT+0xd8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d115      	bne.n	800442a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	4b17      	ldr	r3, [pc, #92]	; (8004464 <HAL_TIM_Base_Start_IT+0xdc>)
 8004406:	4013      	ands	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b06      	cmp	r3, #6
 800440e:	d015      	beq.n	800443c <HAL_TIM_Base_Start_IT+0xb4>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004416:	d011      	beq.n	800443c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004428:	e008      	b.n	800443c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0201 	orr.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	e000      	b.n	800443e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800
 8004458:	40000c00 	.word	0x40000c00
 800445c:	40013400 	.word	0x40013400
 8004460:	40014000 	.word	0x40014000
 8004464:	00010007 	.word	0x00010007

08004468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d020      	beq.n	80044cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01b      	beq.n	80044cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0202 	mvn.w	r2, #2
 800449c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f8e4 	bl	8004680 <HAL_TIM_IC_CaptureCallback>
 80044b8:	e005      	b.n	80044c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f8d6 	bl	800466c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f8e7 	bl	8004694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d020      	beq.n	8004518 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01b      	beq.n	8004518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0204 	mvn.w	r2, #4
 80044e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2202      	movs	r2, #2
 80044ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f8be 	bl	8004680 <HAL_TIM_IC_CaptureCallback>
 8004504:	e005      	b.n	8004512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f8b0 	bl	800466c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f8c1 	bl	8004694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d020      	beq.n	8004564 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01b      	beq.n	8004564 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0208 	mvn.w	r2, #8
 8004534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2204      	movs	r2, #4
 800453a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f898 	bl	8004680 <HAL_TIM_IC_CaptureCallback>
 8004550:	e005      	b.n	800455e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f88a 	bl	800466c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f89b 	bl	8004694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	2b00      	cmp	r3, #0
 800456c:	d020      	beq.n	80045b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01b      	beq.n	80045b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0210 	mvn.w	r2, #16
 8004580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2208      	movs	r2, #8
 8004586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f872 	bl	8004680 <HAL_TIM_IC_CaptureCallback>
 800459c:	e005      	b.n	80045aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f864 	bl	800466c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f875 	bl	8004694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00c      	beq.n	80045d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0201 	mvn.w	r2, #1
 80045cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fc fe14 	bl	80011fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00c      	beq.n	80045f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d007      	beq.n	80045f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f906 	bl	8004804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00c      	beq.n	800461c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004608:	2b00      	cmp	r3, #0
 800460a:	d007      	beq.n	800461c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f8fe 	bl	8004818 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00c      	beq.n	8004640 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d007      	beq.n	8004640 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f834 	bl	80046a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00c      	beq.n	8004664 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	d007      	beq.n	8004664 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0220 	mvn.w	r2, #32
 800465c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8c6 	bl	80047f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a40      	ldr	r2, [pc, #256]	; (80047d0 <TIM_Base_SetConfig+0x114>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d013      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046da:	d00f      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a3d      	ldr	r2, [pc, #244]	; (80047d4 <TIM_Base_SetConfig+0x118>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00b      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a3c      	ldr	r2, [pc, #240]	; (80047d8 <TIM_Base_SetConfig+0x11c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d007      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a3b      	ldr	r2, [pc, #236]	; (80047dc <TIM_Base_SetConfig+0x120>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d003      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a3a      	ldr	r2, [pc, #232]	; (80047e0 <TIM_Base_SetConfig+0x124>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d108      	bne.n	800470e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a2f      	ldr	r2, [pc, #188]	; (80047d0 <TIM_Base_SetConfig+0x114>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01f      	beq.n	8004756 <TIM_Base_SetConfig+0x9a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471c:	d01b      	beq.n	8004756 <TIM_Base_SetConfig+0x9a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a2c      	ldr	r2, [pc, #176]	; (80047d4 <TIM_Base_SetConfig+0x118>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d017      	beq.n	8004756 <TIM_Base_SetConfig+0x9a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a2b      	ldr	r2, [pc, #172]	; (80047d8 <TIM_Base_SetConfig+0x11c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d013      	beq.n	8004756 <TIM_Base_SetConfig+0x9a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a2a      	ldr	r2, [pc, #168]	; (80047dc <TIM_Base_SetConfig+0x120>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00f      	beq.n	8004756 <TIM_Base_SetConfig+0x9a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a29      	ldr	r2, [pc, #164]	; (80047e0 <TIM_Base_SetConfig+0x124>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00b      	beq.n	8004756 <TIM_Base_SetConfig+0x9a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a28      	ldr	r2, [pc, #160]	; (80047e4 <TIM_Base_SetConfig+0x128>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d007      	beq.n	8004756 <TIM_Base_SetConfig+0x9a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a27      	ldr	r2, [pc, #156]	; (80047e8 <TIM_Base_SetConfig+0x12c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d003      	beq.n	8004756 <TIM_Base_SetConfig+0x9a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a26      	ldr	r2, [pc, #152]	; (80047ec <TIM_Base_SetConfig+0x130>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d108      	bne.n	8004768 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a10      	ldr	r2, [pc, #64]	; (80047d0 <TIM_Base_SetConfig+0x114>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00f      	beq.n	80047b4 <TIM_Base_SetConfig+0xf8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a12      	ldr	r2, [pc, #72]	; (80047e0 <TIM_Base_SetConfig+0x124>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00b      	beq.n	80047b4 <TIM_Base_SetConfig+0xf8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a11      	ldr	r2, [pc, #68]	; (80047e4 <TIM_Base_SetConfig+0x128>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d007      	beq.n	80047b4 <TIM_Base_SetConfig+0xf8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a10      	ldr	r2, [pc, #64]	; (80047e8 <TIM_Base_SetConfig+0x12c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d003      	beq.n	80047b4 <TIM_Base_SetConfig+0xf8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a0f      	ldr	r2, [pc, #60]	; (80047ec <TIM_Base_SetConfig+0x130>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d103      	bne.n	80047bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	615a      	str	r2, [r3, #20]
}
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40012c00 	.word	0x40012c00
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40000800 	.word	0x40000800
 80047dc:	40000c00 	.word	0x40000c00
 80047e0:	40013400 	.word	0x40013400
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40014400 	.word	0x40014400
 80047ec:	40014800 	.word	0x40014800

080047f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e040      	b.n	80048c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fd fac4 	bl	8001ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2224      	movs	r2, #36	; 0x24
 8004858:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0201 	bic.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fae0 	bl	8004e38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f825 	bl	80048c8 <UART_SetConfig>
 800487e:	4603      	mov	r3, r0
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e01b      	b.n	80048c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004896:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fb5f 	bl	8004f7c <UART_CheckIdleState>
 80048be:	4603      	mov	r3, r0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048cc:	b08a      	sub	sp, #40	; 0x28
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	431a      	orrs	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4ba4      	ldr	r3, [pc, #656]	; (8004b88 <UART_SetConfig+0x2c0>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004900:	430b      	orrs	r3, r1
 8004902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a99      	ldr	r2, [pc, #612]	; (8004b8c <UART_SetConfig+0x2c4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004930:	4313      	orrs	r3, r2
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004944:	430a      	orrs	r2, r1
 8004946:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a90      	ldr	r2, [pc, #576]	; (8004b90 <UART_SetConfig+0x2c8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d126      	bne.n	80049a0 <UART_SetConfig+0xd8>
 8004952:	4b90      	ldr	r3, [pc, #576]	; (8004b94 <UART_SetConfig+0x2cc>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	2b03      	cmp	r3, #3
 800495e:	d81b      	bhi.n	8004998 <UART_SetConfig+0xd0>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <UART_SetConfig+0xa0>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	08004979 	.word	0x08004979
 800496c:	08004989 	.word	0x08004989
 8004970:	08004981 	.word	0x08004981
 8004974:	08004991 	.word	0x08004991
 8004978:	2301      	movs	r3, #1
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497e:	e116      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004980:	2302      	movs	r3, #2
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004986:	e112      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004988:	2304      	movs	r3, #4
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498e:	e10e      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004990:	2308      	movs	r3, #8
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004996:	e10a      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004998:	2310      	movs	r3, #16
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800499e:	e106      	b.n	8004bae <UART_SetConfig+0x2e6>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a7c      	ldr	r2, [pc, #496]	; (8004b98 <UART_SetConfig+0x2d0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d138      	bne.n	8004a1c <UART_SetConfig+0x154>
 80049aa:	4b7a      	ldr	r3, [pc, #488]	; (8004b94 <UART_SetConfig+0x2cc>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b0:	f003 030c 	and.w	r3, r3, #12
 80049b4:	2b0c      	cmp	r3, #12
 80049b6:	d82d      	bhi.n	8004a14 <UART_SetConfig+0x14c>
 80049b8:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <UART_SetConfig+0xf8>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	080049f5 	.word	0x080049f5
 80049c4:	08004a15 	.word	0x08004a15
 80049c8:	08004a15 	.word	0x08004a15
 80049cc:	08004a15 	.word	0x08004a15
 80049d0:	08004a05 	.word	0x08004a05
 80049d4:	08004a15 	.word	0x08004a15
 80049d8:	08004a15 	.word	0x08004a15
 80049dc:	08004a15 	.word	0x08004a15
 80049e0:	080049fd 	.word	0x080049fd
 80049e4:	08004a15 	.word	0x08004a15
 80049e8:	08004a15 	.word	0x08004a15
 80049ec:	08004a15 	.word	0x08004a15
 80049f0:	08004a0d 	.word	0x08004a0d
 80049f4:	2300      	movs	r3, #0
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049fa:	e0d8      	b.n	8004bae <UART_SetConfig+0x2e6>
 80049fc:	2302      	movs	r3, #2
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a02:	e0d4      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004a04:	2304      	movs	r3, #4
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0a:	e0d0      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a12:	e0cc      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004a14:	2310      	movs	r3, #16
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1a:	e0c8      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a5e      	ldr	r2, [pc, #376]	; (8004b9c <UART_SetConfig+0x2d4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d125      	bne.n	8004a72 <UART_SetConfig+0x1aa>
 8004a26:	4b5b      	ldr	r3, [pc, #364]	; (8004b94 <UART_SetConfig+0x2cc>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a30:	2b30      	cmp	r3, #48	; 0x30
 8004a32:	d016      	beq.n	8004a62 <UART_SetConfig+0x19a>
 8004a34:	2b30      	cmp	r3, #48	; 0x30
 8004a36:	d818      	bhi.n	8004a6a <UART_SetConfig+0x1a2>
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	d00a      	beq.n	8004a52 <UART_SetConfig+0x18a>
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d814      	bhi.n	8004a6a <UART_SetConfig+0x1a2>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <UART_SetConfig+0x182>
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d008      	beq.n	8004a5a <UART_SetConfig+0x192>
 8004a48:	e00f      	b.n	8004a6a <UART_SetConfig+0x1a2>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a50:	e0ad      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004a52:	2302      	movs	r3, #2
 8004a54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a58:	e0a9      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004a5a:	2304      	movs	r3, #4
 8004a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a60:	e0a5      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004a62:	2308      	movs	r3, #8
 8004a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a68:	e0a1      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004a6a:	2310      	movs	r3, #16
 8004a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a70:	e09d      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a4a      	ldr	r2, [pc, #296]	; (8004ba0 <UART_SetConfig+0x2d8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d125      	bne.n	8004ac8 <UART_SetConfig+0x200>
 8004a7c:	4b45      	ldr	r3, [pc, #276]	; (8004b94 <UART_SetConfig+0x2cc>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a86:	2bc0      	cmp	r3, #192	; 0xc0
 8004a88:	d016      	beq.n	8004ab8 <UART_SetConfig+0x1f0>
 8004a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a8c:	d818      	bhi.n	8004ac0 <UART_SetConfig+0x1f8>
 8004a8e:	2b80      	cmp	r3, #128	; 0x80
 8004a90:	d00a      	beq.n	8004aa8 <UART_SetConfig+0x1e0>
 8004a92:	2b80      	cmp	r3, #128	; 0x80
 8004a94:	d814      	bhi.n	8004ac0 <UART_SetConfig+0x1f8>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <UART_SetConfig+0x1d8>
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d008      	beq.n	8004ab0 <UART_SetConfig+0x1e8>
 8004a9e:	e00f      	b.n	8004ac0 <UART_SetConfig+0x1f8>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa6:	e082      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aae:	e07e      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab6:	e07a      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004ab8:	2308      	movs	r3, #8
 8004aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004abe:	e076      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004ac0:	2310      	movs	r3, #16
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac6:	e072      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a35      	ldr	r2, [pc, #212]	; (8004ba4 <UART_SetConfig+0x2dc>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d12a      	bne.n	8004b28 <UART_SetConfig+0x260>
 8004ad2:	4b30      	ldr	r3, [pc, #192]	; (8004b94 <UART_SetConfig+0x2cc>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004adc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ae0:	d01a      	beq.n	8004b18 <UART_SetConfig+0x250>
 8004ae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ae6:	d81b      	bhi.n	8004b20 <UART_SetConfig+0x258>
 8004ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aec:	d00c      	beq.n	8004b08 <UART_SetConfig+0x240>
 8004aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af2:	d815      	bhi.n	8004b20 <UART_SetConfig+0x258>
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <UART_SetConfig+0x238>
 8004af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004afc:	d008      	beq.n	8004b10 <UART_SetConfig+0x248>
 8004afe:	e00f      	b.n	8004b20 <UART_SetConfig+0x258>
 8004b00:	2300      	movs	r3, #0
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b06:	e052      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0e:	e04e      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004b10:	2304      	movs	r3, #4
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b16:	e04a      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004b18:	2308      	movs	r3, #8
 8004b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b1e:	e046      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004b20:	2310      	movs	r3, #16
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b26:	e042      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a17      	ldr	r2, [pc, #92]	; (8004b8c <UART_SetConfig+0x2c4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d13a      	bne.n	8004ba8 <UART_SetConfig+0x2e0>
 8004b32:	4b18      	ldr	r3, [pc, #96]	; (8004b94 <UART_SetConfig+0x2cc>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b40:	d01a      	beq.n	8004b78 <UART_SetConfig+0x2b0>
 8004b42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b46:	d81b      	bhi.n	8004b80 <UART_SetConfig+0x2b8>
 8004b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b4c:	d00c      	beq.n	8004b68 <UART_SetConfig+0x2a0>
 8004b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b52:	d815      	bhi.n	8004b80 <UART_SetConfig+0x2b8>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <UART_SetConfig+0x298>
 8004b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5c:	d008      	beq.n	8004b70 <UART_SetConfig+0x2a8>
 8004b5e:	e00f      	b.n	8004b80 <UART_SetConfig+0x2b8>
 8004b60:	2300      	movs	r3, #0
 8004b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b66:	e022      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6e:	e01e      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004b70:	2304      	movs	r3, #4
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b76:	e01a      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004b78:	2308      	movs	r3, #8
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7e:	e016      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004b80:	2310      	movs	r3, #16
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b86:	e012      	b.n	8004bae <UART_SetConfig+0x2e6>
 8004b88:	efff69f3 	.word	0xefff69f3
 8004b8c:	40008000 	.word	0x40008000
 8004b90:	40013800 	.word	0x40013800
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40004400 	.word	0x40004400
 8004b9c:	40004800 	.word	0x40004800
 8004ba0:	40004c00 	.word	0x40004c00
 8004ba4:	40005000 	.word	0x40005000
 8004ba8:	2310      	movs	r3, #16
 8004baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a9f      	ldr	r2, [pc, #636]	; (8004e30 <UART_SetConfig+0x568>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d17a      	bne.n	8004cae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d824      	bhi.n	8004c0a <UART_SetConfig+0x342>
 8004bc0:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <UART_SetConfig+0x300>)
 8004bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc6:	bf00      	nop
 8004bc8:	08004bed 	.word	0x08004bed
 8004bcc:	08004c0b 	.word	0x08004c0b
 8004bd0:	08004bf5 	.word	0x08004bf5
 8004bd4:	08004c0b 	.word	0x08004c0b
 8004bd8:	08004bfb 	.word	0x08004bfb
 8004bdc:	08004c0b 	.word	0x08004c0b
 8004be0:	08004c0b 	.word	0x08004c0b
 8004be4:	08004c0b 	.word	0x08004c0b
 8004be8:	08004c03 	.word	0x08004c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bec:	f7fe fa74 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8004bf0:	61f8      	str	r0, [r7, #28]
        break;
 8004bf2:	e010      	b.n	8004c16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf4:	4b8f      	ldr	r3, [pc, #572]	; (8004e34 <UART_SetConfig+0x56c>)
 8004bf6:	61fb      	str	r3, [r7, #28]
        break;
 8004bf8:	e00d      	b.n	8004c16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfa:	f7fe f9d5 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8004bfe:	61f8      	str	r0, [r7, #28]
        break;
 8004c00:	e009      	b.n	8004c16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c06:	61fb      	str	r3, [r7, #28]
        break;
 8004c08:	e005      	b.n	8004c16 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80fb 	beq.w	8004e14 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	4413      	add	r3, r2
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d305      	bcc.n	8004c3a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d903      	bls.n	8004c42 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c40:	e0e8      	b.n	8004e14 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	2200      	movs	r2, #0
 8004c46:	461c      	mov	r4, r3
 8004c48:	4615      	mov	r5, r2
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	022b      	lsls	r3, r5, #8
 8004c54:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c58:	0222      	lsls	r2, r4, #8
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	6849      	ldr	r1, [r1, #4]
 8004c5e:	0849      	lsrs	r1, r1, #1
 8004c60:	2000      	movs	r0, #0
 8004c62:	4688      	mov	r8, r1
 8004c64:	4681      	mov	r9, r0
 8004c66:	eb12 0a08 	adds.w	sl, r2, r8
 8004c6a:	eb43 0b09 	adc.w	fp, r3, r9
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	603b      	str	r3, [r7, #0]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c7c:	4650      	mov	r0, sl
 8004c7e:	4659      	mov	r1, fp
 8004c80:	f7fb faa6 	bl	80001d0 <__aeabi_uldivmod>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4613      	mov	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c92:	d308      	bcc.n	8004ca6 <UART_SetConfig+0x3de>
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c9a:	d204      	bcs.n	8004ca6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	60da      	str	r2, [r3, #12]
 8004ca4:	e0b6      	b.n	8004e14 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004cac:	e0b2      	b.n	8004e14 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb6:	d15e      	bne.n	8004d76 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d828      	bhi.n	8004d12 <UART_SetConfig+0x44a>
 8004cc0:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <UART_SetConfig+0x400>)
 8004cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc6:	bf00      	nop
 8004cc8:	08004ced 	.word	0x08004ced
 8004ccc:	08004cf5 	.word	0x08004cf5
 8004cd0:	08004cfd 	.word	0x08004cfd
 8004cd4:	08004d13 	.word	0x08004d13
 8004cd8:	08004d03 	.word	0x08004d03
 8004cdc:	08004d13 	.word	0x08004d13
 8004ce0:	08004d13 	.word	0x08004d13
 8004ce4:	08004d13 	.word	0x08004d13
 8004ce8:	08004d0b 	.word	0x08004d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cec:	f7fe f9f4 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8004cf0:	61f8      	str	r0, [r7, #28]
        break;
 8004cf2:	e014      	b.n	8004d1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf4:	f7fe fa06 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8004cf8:	61f8      	str	r0, [r7, #28]
        break;
 8004cfa:	e010      	b.n	8004d1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cfc:	4b4d      	ldr	r3, [pc, #308]	; (8004e34 <UART_SetConfig+0x56c>)
 8004cfe:	61fb      	str	r3, [r7, #28]
        break;
 8004d00:	e00d      	b.n	8004d1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d02:	f7fe f951 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8004d06:	61f8      	str	r0, [r7, #28]
        break;
 8004d08:	e009      	b.n	8004d1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d0e:	61fb      	str	r3, [r7, #28]
        break;
 8004d10:	e005      	b.n	8004d1e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d077      	beq.n	8004e14 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	005a      	lsls	r2, r3, #1
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	085b      	lsrs	r3, r3, #1
 8004d2e:	441a      	add	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	2b0f      	cmp	r3, #15
 8004d3e:	d916      	bls.n	8004d6e <UART_SetConfig+0x4a6>
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d46:	d212      	bcs.n	8004d6e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	f023 030f 	bic.w	r3, r3, #15
 8004d50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	085b      	lsrs	r3, r3, #1
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	8afb      	ldrh	r3, [r7, #22]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	8afa      	ldrh	r2, [r7, #22]
 8004d6a:	60da      	str	r2, [r3, #12]
 8004d6c:	e052      	b.n	8004e14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d74:	e04e      	b.n	8004e14 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d827      	bhi.n	8004dce <UART_SetConfig+0x506>
 8004d7e:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <UART_SetConfig+0x4bc>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004db1 	.word	0x08004db1
 8004d8c:	08004db9 	.word	0x08004db9
 8004d90:	08004dcf 	.word	0x08004dcf
 8004d94:	08004dbf 	.word	0x08004dbf
 8004d98:	08004dcf 	.word	0x08004dcf
 8004d9c:	08004dcf 	.word	0x08004dcf
 8004da0:	08004dcf 	.word	0x08004dcf
 8004da4:	08004dc7 	.word	0x08004dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da8:	f7fe f996 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8004dac:	61f8      	str	r0, [r7, #28]
        break;
 8004dae:	e014      	b.n	8004dda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db0:	f7fe f9a8 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8004db4:	61f8      	str	r0, [r7, #28]
        break;
 8004db6:	e010      	b.n	8004dda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db8:	4b1e      	ldr	r3, [pc, #120]	; (8004e34 <UART_SetConfig+0x56c>)
 8004dba:	61fb      	str	r3, [r7, #28]
        break;
 8004dbc:	e00d      	b.n	8004dda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dbe:	f7fe f8f3 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8004dc2:	61f8      	str	r0, [r7, #28]
        break;
 8004dc4:	e009      	b.n	8004dda <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dca:	61fb      	str	r3, [r7, #28]
        break;
 8004dcc:	e005      	b.n	8004dda <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004dd8:	bf00      	nop
    }

    if (pclk != 0U)
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d019      	beq.n	8004e14 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	085a      	lsrs	r2, r3, #1
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	441a      	add	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	2b0f      	cmp	r3, #15
 8004df8:	d909      	bls.n	8004e0e <UART_SetConfig+0x546>
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e00:	d205      	bcs.n	8004e0e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60da      	str	r2, [r3, #12]
 8004e0c:	e002      	b.n	8004e14 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3728      	adds	r7, #40	; 0x28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e2e:	bf00      	nop
 8004e30:	40008000 	.word	0x40008000
 8004e34:	00f42400 	.word	0x00f42400

08004e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d01a      	beq.n	8004f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f36:	d10a      	bne.n	8004f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	605a      	str	r2, [r3, #4]
  }
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b098      	sub	sp, #96	; 0x60
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f8c:	f7fc ffe0 	bl	8001f50 <HAL_GetTick>
 8004f90:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d12e      	bne.n	8004ffe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f88c 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d021      	beq.n	8004ffe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fce:	653b      	str	r3, [r7, #80]	; 0x50
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004fda:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fe0:	e841 2300 	strex	r3, r2, [r1]
 8004fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e6      	bne.n	8004fba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e062      	b.n	80050c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b04      	cmp	r3, #4
 800500a:	d149      	bne.n	80050a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800500c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005014:	2200      	movs	r2, #0
 8005016:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f856 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d03c      	beq.n	80050a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	623b      	str	r3, [r7, #32]
   return(result);
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800503a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005044:	633b      	str	r3, [r7, #48]	; 0x30
 8005046:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005048:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800504a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800504c:	e841 2300 	strex	r3, r2, [r1]
 8005050:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1e6      	bne.n	8005026 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3308      	adds	r3, #8
 800505e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	60fb      	str	r3, [r7, #12]
   return(result);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0301 	bic.w	r3, r3, #1
 800506e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3308      	adds	r3, #8
 8005076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005078:	61fa      	str	r2, [r7, #28]
 800507a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	69b9      	ldr	r1, [r7, #24]
 800507e:	69fa      	ldr	r2, [r7, #28]
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	617b      	str	r3, [r7, #20]
   return(result);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e5      	bne.n	8005058 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e011      	b.n	80050c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3758      	adds	r7, #88	; 0x58
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	4613      	mov	r3, r2
 80050da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050dc:	e049      	b.n	8005172 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d045      	beq.n	8005172 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e6:	f7fc ff33 	bl	8001f50 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d302      	bcc.n	80050fc <UART_WaitOnFlagUntilTimeout+0x30>
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e048      	b.n	8005192 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	d031      	beq.n	8005172 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b08      	cmp	r3, #8
 800511a:	d110      	bne.n	800513e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2208      	movs	r2, #8
 8005122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f838 	bl	800519a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2208      	movs	r2, #8
 800512e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e029      	b.n	8005192 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514c:	d111      	bne.n	8005172 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005156:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 f81e 	bl	800519a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2220      	movs	r2, #32
 8005162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e00f      	b.n	8005192 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4013      	ands	r3, r2
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	429a      	cmp	r2, r3
 8005180:	bf0c      	ite	eq
 8005182:	2301      	moveq	r3, #1
 8005184:	2300      	movne	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	429a      	cmp	r2, r3
 800518e:	d0a6      	beq.n	80050de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800519a:	b480      	push	{r7}
 800519c:	b095      	sub	sp, #84	; 0x54
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c0:	643b      	str	r3, [r7, #64]	; 0x40
 80051c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051c8:	e841 2300 	strex	r3, r2, [r1]
 80051cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e6      	bne.n	80051a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3308      	adds	r3, #8
 80051da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3308      	adds	r3, #8
 80051f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e5      	bne.n	80051d4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800520c:	2b01      	cmp	r3, #1
 800520e:	d118      	bne.n	8005242 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	60bb      	str	r3, [r7, #8]
   return(result);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f023 0310 	bic.w	r3, r3, #16
 8005224:	647b      	str	r3, [r7, #68]	; 0x44
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	6979      	ldr	r1, [r7, #20]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	613b      	str	r3, [r7, #16]
   return(result);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e6      	bne.n	8005210 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005256:	bf00      	nop
 8005258:	3754      	adds	r7, #84	; 0x54
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <__NVIC_SetPriority>:
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	6039      	str	r1, [r7, #0]
 800526e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005274:	2b00      	cmp	r3, #0
 8005276:	db0a      	blt.n	800528e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	b2da      	uxtb	r2, r3
 800527c:	490c      	ldr	r1, [pc, #48]	; (80052b0 <__NVIC_SetPriority+0x4c>)
 800527e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005282:	0112      	lsls	r2, r2, #4
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	440b      	add	r3, r1
 8005288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800528c:	e00a      	b.n	80052a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	b2da      	uxtb	r2, r3
 8005292:	4908      	ldr	r1, [pc, #32]	; (80052b4 <__NVIC_SetPriority+0x50>)
 8005294:	79fb      	ldrb	r3, [r7, #7]
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	3b04      	subs	r3, #4
 800529c:	0112      	lsls	r2, r2, #4
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	440b      	add	r3, r1
 80052a2:	761a      	strb	r2, [r3, #24]
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	e000e100 	.word	0xe000e100
 80052b4:	e000ed00 	.word	0xe000ed00

080052b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <SysTick_Handler+0x1c>)
 80052be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80052c0:	f002 f9e6 	bl	8007690 <xTaskGetSchedulerState>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d001      	beq.n	80052ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80052ca:	f003 f8cd 	bl	8008468 <xPortSysTickHandler>
  }
}
 80052ce:	bf00      	nop
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	e000e010 	.word	0xe000e010

080052d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80052dc:	2100      	movs	r1, #0
 80052de:	f06f 0004 	mvn.w	r0, #4
 80052e2:	f7ff ffbf 	bl	8005264 <__NVIC_SetPriority>
#endif
}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052f2:	f3ef 8305 	mrs	r3, IPSR
 80052f6:	603b      	str	r3, [r7, #0]
  return(result);
 80052f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80052fe:	f06f 0305 	mvn.w	r3, #5
 8005302:	607b      	str	r3, [r7, #4]
 8005304:	e00c      	b.n	8005320 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005306:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <osKernelInitialize+0x44>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d105      	bne.n	800531a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800530e:	4b08      	ldr	r3, [pc, #32]	; (8005330 <osKernelInitialize+0x44>)
 8005310:	2201      	movs	r2, #1
 8005312:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005314:	2300      	movs	r3, #0
 8005316:	607b      	str	r3, [r7, #4]
 8005318:	e002      	b.n	8005320 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800531a:	f04f 33ff 	mov.w	r3, #4294967295
 800531e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005320:	687b      	ldr	r3, [r7, #4]
}
 8005322:	4618      	mov	r0, r3
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	200001f8 	.word	0x200001f8

08005334 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800533a:	f3ef 8305 	mrs	r3, IPSR
 800533e:	603b      	str	r3, [r7, #0]
  return(result);
 8005340:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005346:	f06f 0305 	mvn.w	r3, #5
 800534a:	607b      	str	r3, [r7, #4]
 800534c:	e010      	b.n	8005370 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800534e:	4b0b      	ldr	r3, [pc, #44]	; (800537c <osKernelStart+0x48>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d109      	bne.n	800536a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005356:	f7ff ffbf 	bl	80052d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800535a:	4b08      	ldr	r3, [pc, #32]	; (800537c <osKernelStart+0x48>)
 800535c:	2202      	movs	r2, #2
 800535e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005360:	f001 fd3a 	bl	8006dd8 <vTaskStartScheduler>
      stat = osOK;
 8005364:	2300      	movs	r3, #0
 8005366:	607b      	str	r3, [r7, #4]
 8005368:	e002      	b.n	8005370 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800536a:	f04f 33ff 	mov.w	r3, #4294967295
 800536e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005370:	687b      	ldr	r3, [r7, #4]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	200001f8 	.word	0x200001f8

08005380 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b08e      	sub	sp, #56	; 0x38
 8005384:	af04      	add	r7, sp, #16
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005390:	f3ef 8305 	mrs	r3, IPSR
 8005394:	617b      	str	r3, [r7, #20]
  return(result);
 8005396:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005398:	2b00      	cmp	r3, #0
 800539a:	d17e      	bne.n	800549a <osThreadNew+0x11a>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d07b      	beq.n	800549a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80053a6:	2318      	movs	r3, #24
 80053a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80053ae:	f04f 33ff 	mov.w	r3, #4294967295
 80053b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d045      	beq.n	8005446 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <osThreadNew+0x48>
        name = attr->name;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <osThreadNew+0x6e>
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	2b38      	cmp	r3, #56	; 0x38
 80053e0:	d805      	bhi.n	80053ee <osThreadNew+0x6e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <osThreadNew+0x72>
        return (NULL);
 80053ee:	2300      	movs	r3, #0
 80053f0:	e054      	b.n	800549c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	089b      	lsrs	r3, r3, #2
 8005400:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00e      	beq.n	8005428 <osThreadNew+0xa8>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	2ba7      	cmp	r3, #167	; 0xa7
 8005410:	d90a      	bls.n	8005428 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005416:	2b00      	cmp	r3, #0
 8005418:	d006      	beq.n	8005428 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <osThreadNew+0xa8>
        mem = 1;
 8005422:	2301      	movs	r3, #1
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	e010      	b.n	800544a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10c      	bne.n	800544a <osThreadNew+0xca>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d108      	bne.n	800544a <osThreadNew+0xca>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d104      	bne.n	800544a <osThreadNew+0xca>
          mem = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	e001      	b.n	800544a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d110      	bne.n	8005472 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005458:	9202      	str	r2, [sp, #8]
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	6a3a      	ldr	r2, [r7, #32]
 8005464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f001 fa4c 	bl	8006904 <xTaskCreateStatic>
 800546c:	4603      	mov	r3, r0
 800546e:	613b      	str	r3, [r7, #16]
 8005470:	e013      	b.n	800549a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d110      	bne.n	800549a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	b29a      	uxth	r2, r3
 800547c:	f107 0310 	add.w	r3, r7, #16
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f001 fa97 	bl	80069be <xTaskCreate>
 8005490:	4603      	mov	r3, r0
 8005492:	2b01      	cmp	r3, #1
 8005494:	d001      	beq.n	800549a <osThreadNew+0x11a>
            hTask = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800549a:	693b      	ldr	r3, [r7, #16]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3728      	adds	r7, #40	; 0x28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ac:	f3ef 8305 	mrs	r3, IPSR
 80054b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80054b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <osDelay+0x1c>
    stat = osErrorISR;
 80054b8:	f06f 0305 	mvn.w	r3, #5
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	e007      	b.n	80054d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f001 fc50 	bl	8006d70 <vTaskDelay>
    }
  }

  return (stat);
 80054d0:	68fb      	ldr	r3, [r7, #12]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80054da:	b580      	push	{r7, lr}
 80054dc:	b08a      	sub	sp, #40	; 0x28
 80054de:	af02      	add	r7, sp, #8
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ea:	f3ef 8305 	mrs	r3, IPSR
 80054ee:	613b      	str	r3, [r7, #16]
  return(result);
 80054f0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d175      	bne.n	80055e2 <osSemaphoreNew+0x108>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d072      	beq.n	80055e2 <osSemaphoreNew+0x108>
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	429a      	cmp	r2, r3
 8005502:	d86e      	bhi.n	80055e2 <osSemaphoreNew+0x108>
    mem = -1;
 8005504:	f04f 33ff 	mov.w	r3, #4294967295
 8005508:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d015      	beq.n	800553c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d006      	beq.n	8005526 <osSemaphoreNew+0x4c>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	2b4f      	cmp	r3, #79	; 0x4f
 800551e:	d902      	bls.n	8005526 <osSemaphoreNew+0x4c>
        mem = 1;
 8005520:	2301      	movs	r3, #1
 8005522:	61bb      	str	r3, [r7, #24]
 8005524:	e00c      	b.n	8005540 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d108      	bne.n	8005540 <osSemaphoreNew+0x66>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d104      	bne.n	8005540 <osSemaphoreNew+0x66>
          mem = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	61bb      	str	r3, [r7, #24]
 800553a:	e001      	b.n	8005540 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d04c      	beq.n	80055e2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d128      	bne.n	80055a0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d10a      	bne.n	800556a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	2203      	movs	r2, #3
 800555a:	9200      	str	r2, [sp, #0]
 800555c:	2200      	movs	r2, #0
 800555e:	2100      	movs	r1, #0
 8005560:	2001      	movs	r0, #1
 8005562:	f000 fa29 	bl	80059b8 <xQueueGenericCreateStatic>
 8005566:	61f8      	str	r0, [r7, #28]
 8005568:	e005      	b.n	8005576 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800556a:	2203      	movs	r2, #3
 800556c:	2100      	movs	r1, #0
 800556e:	2001      	movs	r0, #1
 8005570:	f000 fa9a 	bl	8005aa8 <xQueueGenericCreate>
 8005574:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d022      	beq.n	80055c2 <osSemaphoreNew+0xe8>
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d01f      	beq.n	80055c2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005582:	2300      	movs	r3, #0
 8005584:	2200      	movs	r2, #0
 8005586:	2100      	movs	r1, #0
 8005588:	69f8      	ldr	r0, [r7, #28]
 800558a:	f000 fb55 	bl	8005c38 <xQueueGenericSend>
 800558e:	4603      	mov	r3, r0
 8005590:	2b01      	cmp	r3, #1
 8005592:	d016      	beq.n	80055c2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005594:	69f8      	ldr	r0, [r7, #28]
 8005596:	f000 ffe1 	bl	800655c <vQueueDelete>
            hSemaphore = NULL;
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	e010      	b.n	80055c2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d108      	bne.n	80055b8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	461a      	mov	r2, r3
 80055ac:	68b9      	ldr	r1, [r7, #8]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fad7 	bl	8005b62 <xQueueCreateCountingSemaphoreStatic>
 80055b4:	61f8      	str	r0, [r7, #28]
 80055b6:	e004      	b.n	80055c2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 fb08 	bl	8005bd0 <xQueueCreateCountingSemaphore>
 80055c0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00c      	beq.n	80055e2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	e001      	b.n	80055da <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80055da:	6979      	ldr	r1, [r7, #20]
 80055dc:	69f8      	ldr	r0, [r7, #28]
 80055de:	f001 f909 	bl	80067f4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80055e2:	69fb      	ldr	r3, [r7, #28]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d103      	bne.n	800560c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005604:	f06f 0303 	mvn.w	r3, #3
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	e039      	b.n	8005680 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800560c:	f3ef 8305 	mrs	r3, IPSR
 8005610:	60fb      	str	r3, [r7, #12]
  return(result);
 8005612:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005614:	2b00      	cmp	r3, #0
 8005616:	d022      	beq.n	800565e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800561e:	f06f 0303 	mvn.w	r3, #3
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	e02c      	b.n	8005680 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005626:	2300      	movs	r3, #0
 8005628:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800562a:	f107 0308 	add.w	r3, r7, #8
 800562e:	461a      	mov	r2, r3
 8005630:	2100      	movs	r1, #0
 8005632:	6938      	ldr	r0, [r7, #16]
 8005634:	f000 ff12 	bl	800645c <xQueueReceiveFromISR>
 8005638:	4603      	mov	r3, r0
 800563a:	2b01      	cmp	r3, #1
 800563c:	d003      	beq.n	8005646 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800563e:	f06f 0302 	mvn.w	r3, #2
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	e01c      	b.n	8005680 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d019      	beq.n	8005680 <osSemaphoreAcquire+0x94>
 800564c:	4b0f      	ldr	r3, [pc, #60]	; (800568c <osSemaphoreAcquire+0xa0>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	e010      	b.n	8005680 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800565e:	6839      	ldr	r1, [r7, #0]
 8005660:	6938      	ldr	r0, [r7, #16]
 8005662:	f000 fdef 	bl	8006244 <xQueueSemaphoreTake>
 8005666:	4603      	mov	r3, r0
 8005668:	2b01      	cmp	r3, #1
 800566a:	d009      	beq.n	8005680 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005672:	f06f 0301 	mvn.w	r3, #1
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	e002      	b.n	8005680 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800567a:	f06f 0302 	mvn.w	r3, #2
 800567e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005680:	697b      	ldr	r3, [r7, #20]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	e000ed04 	.word	0xe000ed04

08005690 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d103      	bne.n	80056ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80056a6:	f06f 0303 	mvn.w	r3, #3
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	e02c      	b.n	8005708 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056ae:	f3ef 8305 	mrs	r3, IPSR
 80056b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80056b4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d01a      	beq.n	80056f0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80056be:	f107 0308 	add.w	r3, r7, #8
 80056c2:	4619      	mov	r1, r3
 80056c4:	6938      	ldr	r0, [r7, #16]
 80056c6:	f000 fc50 	bl	8005f6a <xQueueGiveFromISR>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d003      	beq.n	80056d8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80056d0:	f06f 0302 	mvn.w	r3, #2
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	e017      	b.n	8005708 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d014      	beq.n	8005708 <osSemaphoreRelease+0x78>
 80056de:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <osSemaphoreRelease+0x84>)
 80056e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	e00b      	b.n	8005708 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80056f0:	2300      	movs	r3, #0
 80056f2:	2200      	movs	r2, #0
 80056f4:	2100      	movs	r1, #0
 80056f6:	6938      	ldr	r0, [r7, #16]
 80056f8:	f000 fa9e 	bl	8005c38 <xQueueGenericSend>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d002      	beq.n	8005708 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005702:	f06f 0302 	mvn.w	r3, #2
 8005706:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005708:	697b      	ldr	r3, [r7, #20]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	e000ed04 	.word	0xe000ed04

08005718 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a07      	ldr	r2, [pc, #28]	; (8005744 <vApplicationGetIdleTaskMemory+0x2c>)
 8005728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4a06      	ldr	r2, [pc, #24]	; (8005748 <vApplicationGetIdleTaskMemory+0x30>)
 800572e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2280      	movs	r2, #128	; 0x80
 8005734:	601a      	str	r2, [r3, #0]
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	200001fc 	.word	0x200001fc
 8005748:	200002a4 	.word	0x200002a4

0800574c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4a07      	ldr	r2, [pc, #28]	; (8005778 <vApplicationGetTimerTaskMemory+0x2c>)
 800575c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	4a06      	ldr	r2, [pc, #24]	; (800577c <vApplicationGetTimerTaskMemory+0x30>)
 8005762:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800576a:	601a      	str	r2, [r3, #0]
}
 800576c:	bf00      	nop
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	200004a4 	.word	0x200004a4
 800577c:	2000054c 	.word	0x2000054c

08005780 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f103 0208 	add.w	r2, r3, #8
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f04f 32ff 	mov.w	r2, #4294967295
 8005798:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f103 0208 	add.w	r2, r3, #8
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f103 0208 	add.w	r2, r3, #8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	601a      	str	r2, [r3, #0]
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005822:	b480      	push	{r7}
 8005824:	b085      	sub	sp, #20
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005838:	d103      	bne.n	8005842 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	e00c      	b.n	800585c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3308      	adds	r3, #8
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	e002      	b.n	8005850 <vListInsert+0x2e>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	429a      	cmp	r2, r3
 800585a:	d2f6      	bcs.n	800584a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	601a      	str	r2, [r3, #0]
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6892      	ldr	r2, [r2, #8]
 80058aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6852      	ldr	r2, [r2, #4]
 80058b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d103      	bne.n	80058c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	1e5a      	subs	r2, r3, #1
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10a      	bne.n	8005912 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005912:	f002 fd17 	bl	8008344 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591e:	68f9      	ldr	r1, [r7, #12]
 8005920:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005922:	fb01 f303 	mul.w	r3, r1, r3
 8005926:	441a      	add	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005942:	3b01      	subs	r3, #1
 8005944:	68f9      	ldr	r1, [r7, #12]
 8005946:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005948:	fb01 f303 	mul.w	r3, r1, r3
 800594c:	441a      	add	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	22ff      	movs	r2, #255	; 0xff
 8005956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	22ff      	movs	r2, #255	; 0xff
 800595e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d114      	bne.n	8005992 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01a      	beq.n	80059a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3310      	adds	r3, #16
 8005974:	4618      	mov	r0, r3
 8005976:	f001 fcc9 	bl	800730c <xTaskRemoveFromEventList>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d012      	beq.n	80059a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005980:	4b0c      	ldr	r3, [pc, #48]	; (80059b4 <xQueueGenericReset+0xcc>)
 8005982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	e009      	b.n	80059a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3310      	adds	r3, #16
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff fef2 	bl	8005780 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3324      	adds	r3, #36	; 0x24
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff feed 	bl	8005780 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059a6:	f002 fcfd 	bl	80083a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059aa:	2301      	movs	r3, #1
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08e      	sub	sp, #56	; 0x38
 80059bc:	af02      	add	r7, sp, #8
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
 80059c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10a      	bne.n	80059e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059de:	bf00      	nop
 80059e0:	e7fe      	b.n	80059e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <xQueueGenericCreateStatic+0x52>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <xQueueGenericCreateStatic+0x56>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <xQueueGenericCreateStatic+0x58>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	623b      	str	r3, [r7, #32]
}
 8005a26:	bf00      	nop
 8005a28:	e7fe      	b.n	8005a28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d102      	bne.n	8005a36 <xQueueGenericCreateStatic+0x7e>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <xQueueGenericCreateStatic+0x82>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <xQueueGenericCreateStatic+0x84>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10a      	bne.n	8005a56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	61fb      	str	r3, [r7, #28]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a56:	2350      	movs	r3, #80	; 0x50
 8005a58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2b50      	cmp	r3, #80	; 0x50
 8005a5e:	d00a      	beq.n	8005a76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	61bb      	str	r3, [r7, #24]
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00d      	beq.n	8005a9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	4613      	mov	r3, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	68b9      	ldr	r1, [r7, #8]
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f83f 	bl	8005b1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3730      	adds	r7, #48	; 0x30
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08a      	sub	sp, #40	; 0x28
 8005aac:	af02      	add	r7, sp, #8
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10a      	bne.n	8005ad2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	613b      	str	r3, [r7, #16]
}
 8005ace:	bf00      	nop
 8005ad0:	e7fe      	b.n	8005ad0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	fb02 f303 	mul.w	r3, r2, r3
 8005ada:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	3350      	adds	r3, #80	; 0x50
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f002 fd51 	bl	8008588 <pvPortMalloc>
 8005ae6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d011      	beq.n	8005b12 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	3350      	adds	r3, #80	; 0x50
 8005af6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b00:	79fa      	ldrb	r2, [r7, #7]
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	4613      	mov	r3, r2
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	68b9      	ldr	r1, [r7, #8]
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 f805 	bl	8005b1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b12:	69bb      	ldr	r3, [r7, #24]
	}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3720      	adds	r7, #32
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d103      	bne.n	8005b38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	e002      	b.n	8005b3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	69b8      	ldr	r0, [r7, #24]
 8005b4e:	f7ff fecb 	bl	80058e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	78fa      	ldrb	r2, [r7, #3]
 8005b56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b08a      	sub	sp, #40	; 0x28
 8005b66:	af02      	add	r7, sp, #8
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10a      	bne.n	8005b8a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	61bb      	str	r3, [r7, #24]
}
 8005b86:	bf00      	nop
 8005b88:	e7fe      	b.n	8005b88 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d90a      	bls.n	8005ba8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	617b      	str	r3, [r7, #20]
}
 8005ba4:	bf00      	nop
 8005ba6:	e7fe      	b.n	8005ba6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ba8:	2302      	movs	r3, #2
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f7ff ff00 	bl	80059b8 <xQueueGenericCreateStatic>
 8005bb8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005bc6:	69fb      	ldr	r3, [r7, #28]
	}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3720      	adds	r7, #32
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	613b      	str	r3, [r7, #16]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d90a      	bls.n	8005c14 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	60fb      	str	r3, [r7, #12]
}
 8005c10:	bf00      	nop
 8005c12:	e7fe      	b.n	8005c12 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005c14:	2202      	movs	r2, #2
 8005c16:	2100      	movs	r1, #0
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff ff45 	bl	8005aa8 <xQueueGenericCreate>
 8005c1e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005c2c:	697b      	ldr	r3, [r7, #20]
	}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
	...

08005c38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08e      	sub	sp, #56	; 0x38
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c46:	2300      	movs	r3, #0
 8005c48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <xQueueGenericSend+0x32>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d103      	bne.n	8005c78 <xQueueGenericSend+0x40>
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <xQueueGenericSend+0x44>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <xQueueGenericSend+0x46>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <xQueueGenericSend+0x60>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d103      	bne.n	8005ca6 <xQueueGenericSend+0x6e>
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <xQueueGenericSend+0x72>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <xQueueGenericSend+0x74>
 8005caa:	2300      	movs	r3, #0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10a      	bne.n	8005cc6 <xQueueGenericSend+0x8e>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	623b      	str	r3, [r7, #32]
}
 8005cc2:	bf00      	nop
 8005cc4:	e7fe      	b.n	8005cc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cc6:	f001 fce3 	bl	8007690 <xTaskGetSchedulerState>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d102      	bne.n	8005cd6 <xQueueGenericSend+0x9e>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <xQueueGenericSend+0xa2>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <xQueueGenericSend+0xa4>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	61fb      	str	r3, [r7, #28]
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cf6:	f002 fb25 	bl	8008344 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d302      	bcc.n	8005d0c <xQueueGenericSend+0xd4>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d129      	bne.n	8005d60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d12:	f000 fc5e 	bl	80065d2 <prvCopyDataToQueue>
 8005d16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d010      	beq.n	8005d42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	3324      	adds	r3, #36	; 0x24
 8005d24:	4618      	mov	r0, r3
 8005d26:	f001 faf1 	bl	800730c <xTaskRemoveFromEventList>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d013      	beq.n	8005d58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d30:	4b3f      	ldr	r3, [pc, #252]	; (8005e30 <xQueueGenericSend+0x1f8>)
 8005d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	e00a      	b.n	8005d58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d007      	beq.n	8005d58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d48:	4b39      	ldr	r3, [pc, #228]	; (8005e30 <xQueueGenericSend+0x1f8>)
 8005d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d58:	f002 fb24 	bl	80083a4 <vPortExitCritical>
				return pdPASS;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e063      	b.n	8005e28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d103      	bne.n	8005d6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d66:	f002 fb1d 	bl	80083a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e05c      	b.n	8005e28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d106      	bne.n	8005d82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d74:	f107 0314 	add.w	r3, r7, #20
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f001 fb2b 	bl	80073d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d82:	f002 fb0f 	bl	80083a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d86:	f001 f897 	bl	8006eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d8a:	f002 fadb 	bl	8008344 <vPortEnterCritical>
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d94:	b25b      	sxtb	r3, r3
 8005d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9a:	d103      	bne.n	8005da4 <xQueueGenericSend+0x16c>
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005daa:	b25b      	sxtb	r3, r3
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db0:	d103      	bne.n	8005dba <xQueueGenericSend+0x182>
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dba:	f002 faf3 	bl	80083a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dbe:	1d3a      	adds	r2, r7, #4
 8005dc0:	f107 0314 	add.w	r3, r7, #20
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 fb1a 	bl	8007400 <xTaskCheckForTimeOut>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d124      	bne.n	8005e1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dd4:	f000 fcf5 	bl	80067c2 <prvIsQueueFull>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d018      	beq.n	8005e10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	3310      	adds	r3, #16
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	4611      	mov	r1, r2
 8005de6:	4618      	mov	r0, r3
 8005de8:	f001 fa40 	bl	800726c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dee:	f000 fc80 	bl	80066f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005df2:	f001 f86f 	bl	8006ed4 <xTaskResumeAll>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f47f af7c 	bne.w	8005cf6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <xQueueGenericSend+0x1f8>)
 8005e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	e772      	b.n	8005cf6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e12:	f000 fc6e 	bl	80066f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e16:	f001 f85d 	bl	8006ed4 <xTaskResumeAll>
 8005e1a:	e76c      	b.n	8005cf6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e1e:	f000 fc68 	bl	80066f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e22:	f001 f857 	bl	8006ed4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3738      	adds	r7, #56	; 0x38
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	e000ed04 	.word	0xe000ed04

08005e34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b090      	sub	sp, #64	; 0x40
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d103      	bne.n	8005e70 <xQueueGenericSendFromISR+0x3c>
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <xQueueGenericSendFromISR+0x40>
 8005e70:	2301      	movs	r3, #1
 8005e72:	e000      	b.n	8005e76 <xQueueGenericSendFromISR+0x42>
 8005e74:	2300      	movs	r3, #0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10a      	bne.n	8005e90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e8c:	bf00      	nop
 8005e8e:	e7fe      	b.n	8005e8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d103      	bne.n	8005e9e <xQueueGenericSendFromISR+0x6a>
 8005e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <xQueueGenericSendFromISR+0x6e>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <xQueueGenericSendFromISR+0x70>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	623b      	str	r3, [r7, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ebe:	f002 fb23 	bl	8008508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ec2:	f3ef 8211 	mrs	r2, BASEPRI
 8005ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	61fa      	str	r2, [r7, #28]
 8005ed8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005eda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d302      	bcc.n	8005ef0 <xQueueGenericSendFromISR+0xbc>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d12f      	bne.n	8005f50 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	68b9      	ldr	r1, [r7, #8]
 8005f04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f06:	f000 fb64 	bl	80065d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f12:	d112      	bne.n	8005f3a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d016      	beq.n	8005f4a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	3324      	adds	r3, #36	; 0x24
 8005f20:	4618      	mov	r0, r3
 8005f22:	f001 f9f3 	bl	800730c <xTaskRemoveFromEventList>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00e      	beq.n	8005f4a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00b      	beq.n	8005f4a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	e007      	b.n	8005f4a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f3e:	3301      	adds	r3, #1
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	b25a      	sxtb	r2, r3
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005f4e:	e001      	b.n	8005f54 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f56:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3740      	adds	r7, #64	; 0x40
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b08e      	sub	sp, #56	; 0x38
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	623b      	str	r3, [r7, #32]
}
 8005f90:	bf00      	nop
 8005f92:	e7fe      	b.n	8005f92 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	61fb      	str	r3, [r7, #28]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d103      	bne.n	8005fc2 <xQueueGiveFromISR+0x58>
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <xQueueGiveFromISR+0x5c>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <xQueueGiveFromISR+0x5e>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	61bb      	str	r3, [r7, #24]
}
 8005fde:	bf00      	nop
 8005fe0:	e7fe      	b.n	8005fe0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fe2:	f002 fa91 	bl	8008508 <vPortValidateInterruptPriority>
	__asm volatile
 8005fe6:	f3ef 8211 	mrs	r2, BASEPRI
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	617a      	str	r2, [r7, #20]
 8005ffc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005ffe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006000:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800600e:	429a      	cmp	r2, r3
 8006010:	d22b      	bcs.n	800606a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006022:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006024:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602c:	d112      	bne.n	8006054 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	2b00      	cmp	r3, #0
 8006034:	d016      	beq.n	8006064 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	3324      	adds	r3, #36	; 0x24
 800603a:	4618      	mov	r0, r3
 800603c:	f001 f966 	bl	800730c <xTaskRemoveFromEventList>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00e      	beq.n	8006064 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00b      	beq.n	8006064 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2201      	movs	r2, #1
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	e007      	b.n	8006064 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006058:	3301      	adds	r3, #1
 800605a:	b2db      	uxtb	r3, r3
 800605c:	b25a      	sxtb	r2, r3
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006064:	2301      	movs	r3, #1
 8006066:	637b      	str	r3, [r7, #52]	; 0x34
 8006068:	e001      	b.n	800606e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800606a:	2300      	movs	r3, #0
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
 800606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006070:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f383 8811 	msr	BASEPRI, r3
}
 8006078:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800607c:	4618      	mov	r0, r3
 800607e:	3738      	adds	r7, #56	; 0x38
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08c      	sub	sp, #48	; 0x30
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006090:	2300      	movs	r3, #0
 8006092:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <xQueueReceive+0x30>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	623b      	str	r3, [r7, #32]
}
 80060b0:	bf00      	nop
 80060b2:	e7fe      	b.n	80060b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d103      	bne.n	80060c2 <xQueueReceive+0x3e>
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <xQueueReceive+0x42>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <xQueueReceive+0x44>
 80060c6:	2300      	movs	r3, #0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <xQueueReceive+0x5e>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	61fb      	str	r3, [r7, #28]
}
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060e2:	f001 fad5 	bl	8007690 <xTaskGetSchedulerState>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <xQueueReceive+0x6e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <xQueueReceive+0x72>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e000      	b.n	80060f8 <xQueueReceive+0x74>
 80060f6:	2300      	movs	r3, #0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10a      	bne.n	8006112 <xQueueReceive+0x8e>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	61bb      	str	r3, [r7, #24]
}
 800610e:	bf00      	nop
 8006110:	e7fe      	b.n	8006110 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006112:	f002 f917 	bl	8008344 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	2b00      	cmp	r3, #0
 8006120:	d01f      	beq.n	8006162 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006122:	68b9      	ldr	r1, [r7, #8]
 8006124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006126:	f000 fabe 	bl	80066a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	1e5a      	subs	r2, r3, #1
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00f      	beq.n	800615a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	3310      	adds	r3, #16
 800613e:	4618      	mov	r0, r3
 8006140:	f001 f8e4 	bl	800730c <xTaskRemoveFromEventList>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d007      	beq.n	800615a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800614a:	4b3d      	ldr	r3, [pc, #244]	; (8006240 <xQueueReceive+0x1bc>)
 800614c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800615a:	f002 f923 	bl	80083a4 <vPortExitCritical>
				return pdPASS;
 800615e:	2301      	movs	r3, #1
 8006160:	e069      	b.n	8006236 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d103      	bne.n	8006170 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006168:	f002 f91c 	bl	80083a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800616c:	2300      	movs	r3, #0
 800616e:	e062      	b.n	8006236 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006176:	f107 0310 	add.w	r3, r7, #16
 800617a:	4618      	mov	r0, r3
 800617c:	f001 f92a 	bl	80073d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006180:	2301      	movs	r3, #1
 8006182:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006184:	f002 f90e 	bl	80083a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006188:	f000 fe96 	bl	8006eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800618c:	f002 f8da 	bl	8008344 <vPortEnterCritical>
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006196:	b25b      	sxtb	r3, r3
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d103      	bne.n	80061a6 <xQueueReceive+0x122>
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ac:	b25b      	sxtb	r3, r3
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d103      	bne.n	80061bc <xQueueReceive+0x138>
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061bc:	f002 f8f2 	bl	80083a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061c0:	1d3a      	adds	r2, r7, #4
 80061c2:	f107 0310 	add.w	r3, r7, #16
 80061c6:	4611      	mov	r1, r2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 f919 	bl	8007400 <xTaskCheckForTimeOut>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d123      	bne.n	800621c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d6:	f000 fade 	bl	8006796 <prvIsQueueEmpty>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d017      	beq.n	8006210 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	3324      	adds	r3, #36	; 0x24
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	4611      	mov	r1, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f001 f83f 	bl	800726c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f0:	f000 fa7f 	bl	80066f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061f4:	f000 fe6e 	bl	8006ed4 <xTaskResumeAll>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d189      	bne.n	8006112 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80061fe:	4b10      	ldr	r3, [pc, #64]	; (8006240 <xQueueReceive+0x1bc>)
 8006200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	e780      	b.n	8006112 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006212:	f000 fa6e 	bl	80066f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006216:	f000 fe5d 	bl	8006ed4 <xTaskResumeAll>
 800621a:	e77a      	b.n	8006112 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800621c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800621e:	f000 fa68 	bl	80066f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006222:	f000 fe57 	bl	8006ed4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006228:	f000 fab5 	bl	8006796 <prvIsQueueEmpty>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	f43f af6f 	beq.w	8006112 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006234:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006236:	4618      	mov	r0, r3
 8006238:	3730      	adds	r7, #48	; 0x30
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08e      	sub	sp, #56	; 0x38
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800624e:	2300      	movs	r3, #0
 8006250:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006256:	2300      	movs	r3, #0
 8006258:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10a      	bne.n	8006276 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	623b      	str	r3, [r7, #32]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	61fb      	str	r3, [r7, #28]
}
 8006290:	bf00      	nop
 8006292:	e7fe      	b.n	8006292 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006294:	f001 f9fc 	bl	8007690 <xTaskGetSchedulerState>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d102      	bne.n	80062a4 <xQueueSemaphoreTake+0x60>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <xQueueSemaphoreTake+0x64>
 80062a4:	2301      	movs	r3, #1
 80062a6:	e000      	b.n	80062aa <xQueueSemaphoreTake+0x66>
 80062a8:	2300      	movs	r3, #0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	61bb      	str	r3, [r7, #24]
}
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062c4:	f002 f83e 	bl	8008344 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d024      	beq.n	800631e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	1e5a      	subs	r2, r3, #1
 80062d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80062e4:	f001 fb4a 	bl	800797c <pvTaskIncrementMutexHeldCount>
 80062e8:	4602      	mov	r2, r0
 80062ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00f      	beq.n	8006316 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f8:	3310      	adds	r3, #16
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 f806 	bl	800730c <xTaskRemoveFromEventList>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d007      	beq.n	8006316 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006306:	4b54      	ldr	r3, [pc, #336]	; (8006458 <xQueueSemaphoreTake+0x214>)
 8006308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006316:	f002 f845 	bl	80083a4 <vPortExitCritical>
				return pdPASS;
 800631a:	2301      	movs	r3, #1
 800631c:	e097      	b.n	800644e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d111      	bne.n	8006348 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	617b      	str	r3, [r7, #20]
}
 800633c:	bf00      	nop
 800633e:	e7fe      	b.n	800633e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006340:	f002 f830 	bl	80083a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006344:	2300      	movs	r3, #0
 8006346:	e082      	b.n	800644e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800634e:	f107 030c 	add.w	r3, r7, #12
 8006352:	4618      	mov	r0, r3
 8006354:	f001 f83e 	bl	80073d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006358:	2301      	movs	r3, #1
 800635a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800635c:	f002 f822 	bl	80083a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006360:	f000 fdaa 	bl	8006eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006364:	f001 ffee 	bl	8008344 <vPortEnterCritical>
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800636e:	b25b      	sxtb	r3, r3
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006374:	d103      	bne.n	800637e <xQueueSemaphoreTake+0x13a>
 8006376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006384:	b25b      	sxtb	r3, r3
 8006386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638a:	d103      	bne.n	8006394 <xQueueSemaphoreTake+0x150>
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006394:	f002 f806 	bl	80083a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006398:	463a      	mov	r2, r7
 800639a:	f107 030c 	add.w	r3, r7, #12
 800639e:	4611      	mov	r1, r2
 80063a0:	4618      	mov	r0, r3
 80063a2:	f001 f82d 	bl	8007400 <xTaskCheckForTimeOut>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d132      	bne.n	8006412 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063ae:	f000 f9f2 	bl	8006796 <prvIsQueueEmpty>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d026      	beq.n	8006406 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d109      	bne.n	80063d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80063c0:	f001 ffc0 	bl	8008344 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 f97f 	bl	80076cc <xTaskPriorityInherit>
 80063ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80063d0:	f001 ffe8 	bl	80083a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d6:	3324      	adds	r3, #36	; 0x24
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	4611      	mov	r1, r2
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 ff45 	bl	800726c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063e4:	f000 f985 	bl	80066f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063e8:	f000 fd74 	bl	8006ed4 <xTaskResumeAll>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f47f af68 	bne.w	80062c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80063f4:	4b18      	ldr	r3, [pc, #96]	; (8006458 <xQueueSemaphoreTake+0x214>)
 80063f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	e75e      	b.n	80062c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006408:	f000 f973 	bl	80066f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800640c:	f000 fd62 	bl	8006ed4 <xTaskResumeAll>
 8006410:	e758      	b.n	80062c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006414:	f000 f96d 	bl	80066f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006418:	f000 fd5c 	bl	8006ed4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800641c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800641e:	f000 f9ba 	bl	8006796 <prvIsQueueEmpty>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	f43f af4d 	beq.w	80062c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00d      	beq.n	800644c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006430:	f001 ff88 	bl	8008344 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006436:	f000 f8b4 	bl	80065a2 <prvGetDisinheritPriorityAfterTimeout>
 800643a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006442:	4618      	mov	r0, r3
 8006444:	f001 fa18 	bl	8007878 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006448:	f001 ffac 	bl	80083a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800644c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800644e:	4618      	mov	r0, r3
 8006450:	3738      	adds	r7, #56	; 0x38
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	e000ed04 	.word	0xe000ed04

0800645c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08e      	sub	sp, #56	; 0x38
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10a      	bne.n	8006488 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	623b      	str	r3, [r7, #32]
}
 8006484:	bf00      	nop
 8006486:	e7fe      	b.n	8006486 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d103      	bne.n	8006496 <xQueueReceiveFromISR+0x3a>
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <xQueueReceiveFromISR+0x3e>
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <xQueueReceiveFromISR+0x40>
 800649a:	2300      	movs	r3, #0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10a      	bne.n	80064b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	61fb      	str	r3, [r7, #28]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064b6:	f002 f827 	bl	8008508 <vPortValidateInterruptPriority>
	__asm volatile
 80064ba:	f3ef 8211 	mrs	r2, BASEPRI
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	61ba      	str	r2, [r7, #24]
 80064d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80064d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d02f      	beq.n	8006542 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064f0:	f000 f8d9 	bl	80066a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f6:	1e5a      	subs	r2, r3, #1
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80064fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006504:	d112      	bne.n	800652c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d016      	beq.n	800653c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	3310      	adds	r3, #16
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fefa 	bl	800730c <xTaskRemoveFromEventList>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00e      	beq.n	800653c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00b      	beq.n	800653c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	e007      	b.n	800653c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800652c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006530:	3301      	adds	r3, #1
 8006532:	b2db      	uxtb	r3, r3
 8006534:	b25a      	sxtb	r2, r3
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800653c:	2301      	movs	r3, #1
 800653e:	637b      	str	r3, [r7, #52]	; 0x34
 8006540:	e001      	b.n	8006546 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006542:	2300      	movs	r3, #0
 8006544:	637b      	str	r3, [r7, #52]	; 0x34
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	613b      	str	r3, [r7, #16]
	__asm volatile
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f383 8811 	msr	BASEPRI, r3
}
 8006550:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006554:	4618      	mov	r0, r3
 8006556:	3738      	adds	r7, #56	; 0x38
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10a      	bne.n	8006584 <vQueueDelete+0x28>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	60bb      	str	r3, [r7, #8]
}
 8006580:	bf00      	nop
 8006582:	e7fe      	b.n	8006582 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f95f 	bl	8006848 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006590:	2b00      	cmp	r3, #0
 8006592:	d102      	bne.n	800659a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f002 f8c3 	bl	8008720 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800659a:	bf00      	nop
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d006      	beq.n	80065c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	e001      	b.n	80065c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80065c4:	68fb      	ldr	r3, [r7, #12]
	}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b086      	sub	sp, #24
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	60f8      	str	r0, [r7, #12]
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10d      	bne.n	800660c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d14d      	bne.n	8006694 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f001 f8cd 	bl	800779c <xTaskPriorityDisinherit>
 8006602:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	609a      	str	r2, [r3, #8]
 800660a:	e043      	b.n	8006694 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d119      	bne.n	8006646 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6858      	ldr	r0, [r3, #4]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	461a      	mov	r2, r3
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	f002 fa21 	bl	8008a64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	441a      	add	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	429a      	cmp	r2, r3
 800663a:	d32b      	bcc.n	8006694 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	605a      	str	r2, [r3, #4]
 8006644:	e026      	b.n	8006694 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	68d8      	ldr	r0, [r3, #12]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	461a      	mov	r2, r3
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	f002 fa07 	bl	8008a64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	425b      	negs	r3, r3
 8006660:	441a      	add	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d207      	bcs.n	8006682 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	425b      	negs	r3, r3
 800667c:	441a      	add	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d105      	bne.n	8006694 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	3b01      	subs	r3, #1
 8006692:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800669c:	697b      	ldr	r3, [r7, #20]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b082      	sub	sp, #8
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d018      	beq.n	80066ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	441a      	add	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d303      	bcc.n	80066da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68d9      	ldr	r1, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	461a      	mov	r2, r3
 80066e4:	6838      	ldr	r0, [r7, #0]
 80066e6:	f002 f9bd 	bl	8008a64 <memcpy>
	}
}
 80066ea:	bf00      	nop
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b084      	sub	sp, #16
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066fa:	f001 fe23 	bl	8008344 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006704:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006706:	e011      	b.n	800672c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	2b00      	cmp	r3, #0
 800670e:	d012      	beq.n	8006736 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3324      	adds	r3, #36	; 0x24
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fdf9 	bl	800730c <xTaskRemoveFromEventList>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006720:	f000 fed0 	bl	80074c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	3b01      	subs	r3, #1
 8006728:	b2db      	uxtb	r3, r3
 800672a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800672c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006730:	2b00      	cmp	r3, #0
 8006732:	dce9      	bgt.n	8006708 <prvUnlockQueue+0x16>
 8006734:	e000      	b.n	8006738 <prvUnlockQueue+0x46>
					break;
 8006736:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	22ff      	movs	r2, #255	; 0xff
 800673c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006740:	f001 fe30 	bl	80083a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006744:	f001 fdfe 	bl	8008344 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800674e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006750:	e011      	b.n	8006776 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d012      	beq.n	8006780 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3310      	adds	r3, #16
 800675e:	4618      	mov	r0, r3
 8006760:	f000 fdd4 	bl	800730c <xTaskRemoveFromEventList>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800676a:	f000 feab 	bl	80074c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800676e:	7bbb      	ldrb	r3, [r7, #14]
 8006770:	3b01      	subs	r3, #1
 8006772:	b2db      	uxtb	r3, r3
 8006774:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006776:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800677a:	2b00      	cmp	r3, #0
 800677c:	dce9      	bgt.n	8006752 <prvUnlockQueue+0x60>
 800677e:	e000      	b.n	8006782 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006780:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	22ff      	movs	r2, #255	; 0xff
 8006786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800678a:	f001 fe0b 	bl	80083a4 <vPortExitCritical>
}
 800678e:	bf00      	nop
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b084      	sub	sp, #16
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800679e:	f001 fdd1 	bl	8008344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d102      	bne.n	80067b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80067aa:	2301      	movs	r3, #1
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	e001      	b.n	80067b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067b0:	2300      	movs	r3, #0
 80067b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067b4:	f001 fdf6 	bl	80083a4 <vPortExitCritical>

	return xReturn;
 80067b8:	68fb      	ldr	r3, [r7, #12]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067ca:	f001 fdbb 	bl	8008344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d102      	bne.n	80067e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067da:	2301      	movs	r3, #1
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	e001      	b.n	80067e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067e4:	f001 fdde 	bl	80083a4 <vPortExitCritical>

	return xReturn;
 80067e8:	68fb      	ldr	r3, [r7, #12]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	e014      	b.n	800682e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006804:	4a0f      	ldr	r2, [pc, #60]	; (8006844 <vQueueAddToRegistry+0x50>)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10b      	bne.n	8006828 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006810:	490c      	ldr	r1, [pc, #48]	; (8006844 <vQueueAddToRegistry+0x50>)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800681a:	4a0a      	ldr	r2, [pc, #40]	; (8006844 <vQueueAddToRegistry+0x50>)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	4413      	add	r3, r2
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006826:	e006      	b.n	8006836 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3301      	adds	r3, #1
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b07      	cmp	r3, #7
 8006832:	d9e7      	bls.n	8006804 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	2000094c 	.word	0x2000094c

08006848 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	e016      	b.n	8006884 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006856:	4a10      	ldr	r2, [pc, #64]	; (8006898 <vQueueUnregisterQueue+0x50>)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	4413      	add	r3, r2
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	429a      	cmp	r2, r3
 8006864:	d10b      	bne.n	800687e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006866:	4a0c      	ldr	r2, [pc, #48]	; (8006898 <vQueueUnregisterQueue+0x50>)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2100      	movs	r1, #0
 800686c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006870:	4a09      	ldr	r2, [pc, #36]	; (8006898 <vQueueUnregisterQueue+0x50>)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	4413      	add	r3, r2
 8006878:	2200      	movs	r2, #0
 800687a:	605a      	str	r2, [r3, #4]
				break;
 800687c:	e006      	b.n	800688c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3301      	adds	r3, #1
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b07      	cmp	r3, #7
 8006888:	d9e5      	bls.n	8006856 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800688a:	bf00      	nop
 800688c:	bf00      	nop
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	2000094c 	.word	0x2000094c

0800689c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068ac:	f001 fd4a 	bl	8008344 <vPortEnterCritical>
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068b6:	b25b      	sxtb	r3, r3
 80068b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068bc:	d103      	bne.n	80068c6 <vQueueWaitForMessageRestricted+0x2a>
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068cc:	b25b      	sxtb	r3, r3
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d2:	d103      	bne.n	80068dc <vQueueWaitForMessageRestricted+0x40>
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068dc:	f001 fd62 	bl	80083a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	3324      	adds	r3, #36	; 0x24
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	68b9      	ldr	r1, [r7, #8]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 fcdf 	bl	80072b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80068f6:	6978      	ldr	r0, [r7, #20]
 80068f8:	f7ff fefb 	bl	80066f2 <prvUnlockQueue>
	}
 80068fc:	bf00      	nop
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08e      	sub	sp, #56	; 0x38
 8006908:	af04      	add	r7, sp, #16
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10a      	bne.n	800692e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	623b      	str	r3, [r7, #32]
}
 800692a:	bf00      	nop
 800692c:	e7fe      	b.n	800692c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <xTaskCreateStatic+0x46>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	61fb      	str	r3, [r7, #28]
}
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800694a:	23a8      	movs	r3, #168	; 0xa8
 800694c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2ba8      	cmp	r3, #168	; 0xa8
 8006952:	d00a      	beq.n	800696a <xTaskCreateStatic+0x66>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	61bb      	str	r3, [r7, #24]
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800696a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	2b00      	cmp	r3, #0
 8006970:	d01e      	beq.n	80069b0 <xTaskCreateStatic+0xac>
 8006972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01b      	beq.n	80069b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006980:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	2202      	movs	r2, #2
 8006986:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800698a:	2300      	movs	r3, #0
 800698c:	9303      	str	r3, [sp, #12]
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	9302      	str	r3, [sp, #8]
 8006992:	f107 0314 	add.w	r3, r7, #20
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	68b9      	ldr	r1, [r7, #8]
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 f850 	bl	8006a48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069aa:	f000 f8f3 	bl	8006b94 <prvAddNewTaskToReadyList>
 80069ae:	e001      	b.n	80069b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069b4:	697b      	ldr	r3, [r7, #20]
	}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3728      	adds	r7, #40	; 0x28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b08c      	sub	sp, #48	; 0x30
 80069c2:	af04      	add	r7, sp, #16
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	603b      	str	r3, [r7, #0]
 80069ca:	4613      	mov	r3, r2
 80069cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f001 fdd8 	bl	8008588 <pvPortMalloc>
 80069d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00e      	beq.n	80069fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069e0:	20a8      	movs	r0, #168	; 0xa8
 80069e2:	f001 fdd1 	bl	8008588 <pvPortMalloc>
 80069e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30
 80069f4:	e005      	b.n	8006a02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069f6:	6978      	ldr	r0, [r7, #20]
 80069f8:	f001 fe92 	bl	8008720 <vPortFree>
 80069fc:	e001      	b.n	8006a02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d017      	beq.n	8006a38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a10:	88fa      	ldrh	r2, [r7, #6]
 8006a12:	2300      	movs	r3, #0
 8006a14:	9303      	str	r3, [sp, #12]
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	9302      	str	r3, [sp, #8]
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 f80e 	bl	8006a48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a2c:	69f8      	ldr	r0, [r7, #28]
 8006a2e:	f000 f8b1 	bl	8006b94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a32:	2301      	movs	r3, #1
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	e002      	b.n	8006a3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a38:	f04f 33ff 	mov.w	r3, #4294967295
 8006a3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
	}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3720      	adds	r7, #32
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	461a      	mov	r2, r3
 8006a60:	21a5      	movs	r1, #165	; 0xa5
 8006a62:	f001 ff7b 	bl	800895c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a70:	3b01      	subs	r3, #1
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	f023 0307 	bic.w	r3, r3, #7
 8006a7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	617b      	str	r3, [r7, #20]
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d01f      	beq.n	8006ae6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61fb      	str	r3, [r7, #28]
 8006aaa:	e012      	b.n	8006ad2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	7819      	ldrb	r1, [r3, #0]
 8006ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	4413      	add	r3, r2
 8006aba:	3334      	adds	r3, #52	; 0x34
 8006abc:	460a      	mov	r2, r1
 8006abe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d006      	beq.n	8006ada <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	61fb      	str	r3, [r7, #28]
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	2b0f      	cmp	r3, #15
 8006ad6:	d9e9      	bls.n	8006aac <prvInitialiseNewTask+0x64>
 8006ad8:	e000      	b.n	8006adc <prvInitialiseNewTask+0x94>
			{
				break;
 8006ada:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ae4:	e003      	b.n	8006aee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	2b37      	cmp	r3, #55	; 0x37
 8006af2:	d901      	bls.n	8006af8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006af4:	2337      	movs	r3, #55	; 0x37
 8006af6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006afc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	2200      	movs	r2, #0
 8006b08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe fe56 	bl	80057c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b16:	3318      	adds	r3, #24
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fe fe51 	bl	80057c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	3354      	adds	r3, #84	; 0x54
 8006b48:	224c      	movs	r2, #76	; 0x4c
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f001 ff05 	bl	800895c <memset>
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	4a0c      	ldr	r2, [pc, #48]	; (8006b88 <prvInitialiseNewTask+0x140>)
 8006b56:	659a      	str	r2, [r3, #88]	; 0x58
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	4a0c      	ldr	r2, [pc, #48]	; (8006b8c <prvInitialiseNewTask+0x144>)
 8006b5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	4a0b      	ldr	r2, [pc, #44]	; (8006b90 <prvInitialiseNewTask+0x148>)
 8006b62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	68f9      	ldr	r1, [r7, #12]
 8006b68:	69b8      	ldr	r0, [r7, #24]
 8006b6a:	f001 fabd 	bl	80080e8 <pxPortInitialiseStack>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b80:	bf00      	nop
 8006b82:	3720      	adds	r7, #32
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	20001f80 	.word	0x20001f80
 8006b8c:	20001fe8 	.word	0x20001fe8
 8006b90:	20002050 	.word	0x20002050

08006b94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b9c:	f001 fbd2 	bl	8008344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ba0:	4b2d      	ldr	r3, [pc, #180]	; (8006c58 <prvAddNewTaskToReadyList+0xc4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	4a2c      	ldr	r2, [pc, #176]	; (8006c58 <prvAddNewTaskToReadyList+0xc4>)
 8006ba8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006baa:	4b2c      	ldr	r3, [pc, #176]	; (8006c5c <prvAddNewTaskToReadyList+0xc8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d109      	bne.n	8006bc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bb2:	4a2a      	ldr	r2, [pc, #168]	; (8006c5c <prvAddNewTaskToReadyList+0xc8>)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bb8:	4b27      	ldr	r3, [pc, #156]	; (8006c58 <prvAddNewTaskToReadyList+0xc4>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d110      	bne.n	8006be2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bc0:	f000 fca4 	bl	800750c <prvInitialiseTaskLists>
 8006bc4:	e00d      	b.n	8006be2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bc6:	4b26      	ldr	r3, [pc, #152]	; (8006c60 <prvAddNewTaskToReadyList+0xcc>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d109      	bne.n	8006be2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bce:	4b23      	ldr	r3, [pc, #140]	; (8006c5c <prvAddNewTaskToReadyList+0xc8>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d802      	bhi.n	8006be2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bdc:	4a1f      	ldr	r2, [pc, #124]	; (8006c5c <prvAddNewTaskToReadyList+0xc8>)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006be2:	4b20      	ldr	r3, [pc, #128]	; (8006c64 <prvAddNewTaskToReadyList+0xd0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3301      	adds	r3, #1
 8006be8:	4a1e      	ldr	r2, [pc, #120]	; (8006c64 <prvAddNewTaskToReadyList+0xd0>)
 8006bea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006bec:	4b1d      	ldr	r3, [pc, #116]	; (8006c64 <prvAddNewTaskToReadyList+0xd0>)
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf8:	4b1b      	ldr	r3, [pc, #108]	; (8006c68 <prvAddNewTaskToReadyList+0xd4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d903      	bls.n	8006c08 <prvAddNewTaskToReadyList+0x74>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c04:	4a18      	ldr	r2, [pc, #96]	; (8006c68 <prvAddNewTaskToReadyList+0xd4>)
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4a15      	ldr	r2, [pc, #84]	; (8006c6c <prvAddNewTaskToReadyList+0xd8>)
 8006c16:	441a      	add	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	f7fe fddb 	bl	80057da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c24:	f001 fbbe 	bl	80083a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c28:	4b0d      	ldr	r3, [pc, #52]	; (8006c60 <prvAddNewTaskToReadyList+0xcc>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00e      	beq.n	8006c4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c30:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <prvAddNewTaskToReadyList+0xc8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d207      	bcs.n	8006c4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c3e:	4b0c      	ldr	r3, [pc, #48]	; (8006c70 <prvAddNewTaskToReadyList+0xdc>)
 8006c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c4e:	bf00      	nop
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20000e60 	.word	0x20000e60
 8006c5c:	2000098c 	.word	0x2000098c
 8006c60:	20000e6c 	.word	0x20000e6c
 8006c64:	20000e7c 	.word	0x20000e7c
 8006c68:	20000e68 	.word	0x20000e68
 8006c6c:	20000990 	.word	0x20000990
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08a      	sub	sp, #40	; 0x28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <vTaskDelayUntil+0x2a>
	__asm volatile
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	617b      	str	r3, [r7, #20]
}
 8006c9a:	bf00      	nop
 8006c9c:	e7fe      	b.n	8006c9c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <vTaskDelayUntil+0x46>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	613b      	str	r3, [r7, #16]
}
 8006cb6:	bf00      	nop
 8006cb8:	e7fe      	b.n	8006cb8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006cba:	4b2a      	ldr	r3, [pc, #168]	; (8006d64 <vTaskDelayUntil+0xf0>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <vTaskDelayUntil+0x64>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	60fb      	str	r3, [r7, #12]
}
 8006cd4:	bf00      	nop
 8006cd6:	e7fe      	b.n	8006cd6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006cd8:	f000 f8ee 	bl	8006eb8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006cdc:	4b22      	ldr	r3, [pc, #136]	; (8006d68 <vTaskDelayUntil+0xf4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	4413      	add	r3, r2
 8006cea:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6a3a      	ldr	r2, [r7, #32]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d20b      	bcs.n	8006d0e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69fa      	ldr	r2, [r7, #28]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d211      	bcs.n	8006d24 <vTaskDelayUntil+0xb0>
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d90d      	bls.n	8006d24 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d0c:	e00a      	b.n	8006d24 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69fa      	ldr	r2, [r7, #28]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d303      	bcc.n	8006d20 <vTaskDelayUntil+0xac>
 8006d18:	69fa      	ldr	r2, [r7, #28]
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d901      	bls.n	8006d24 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006d20:	2301      	movs	r3, #1
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69fa      	ldr	r2, [r7, #28]
 8006d28:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d006      	beq.n	8006d3e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2100      	movs	r1, #0
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 fe33 	bl	80079a4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006d3e:	f000 f8c9 	bl	8006ed4 <xTaskResumeAll>
 8006d42:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d107      	bne.n	8006d5a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006d4a:	4b08      	ldr	r3, [pc, #32]	; (8006d6c <vTaskDelayUntil+0xf8>)
 8006d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d5a:	bf00      	nop
 8006d5c:	3728      	adds	r7, #40	; 0x28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20000e88 	.word	0x20000e88
 8006d68:	20000e64 	.word	0x20000e64
 8006d6c:	e000ed04 	.word	0xe000ed04

08006d70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d017      	beq.n	8006db2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d82:	4b13      	ldr	r3, [pc, #76]	; (8006dd0 <vTaskDelay+0x60>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <vTaskDelay+0x30>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	60bb      	str	r3, [r7, #8]
}
 8006d9c:	bf00      	nop
 8006d9e:	e7fe      	b.n	8006d9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006da0:	f000 f88a 	bl	8006eb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006da4:	2100      	movs	r1, #0
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fdfc 	bl	80079a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006dac:	f000 f892 	bl	8006ed4 <xTaskResumeAll>
 8006db0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d107      	bne.n	8006dc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006db8:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <vTaskDelay+0x64>)
 8006dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	20000e88 	.word	0x20000e88
 8006dd4:	e000ed04 	.word	0xe000ed04

08006dd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08a      	sub	sp, #40	; 0x28
 8006ddc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006de6:	463a      	mov	r2, r7
 8006de8:	1d39      	adds	r1, r7, #4
 8006dea:	f107 0308 	add.w	r3, r7, #8
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe fc92 	bl	8005718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	9202      	str	r2, [sp, #8]
 8006dfc:	9301      	str	r3, [sp, #4]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	2300      	movs	r3, #0
 8006e04:	460a      	mov	r2, r1
 8006e06:	4924      	ldr	r1, [pc, #144]	; (8006e98 <vTaskStartScheduler+0xc0>)
 8006e08:	4824      	ldr	r0, [pc, #144]	; (8006e9c <vTaskStartScheduler+0xc4>)
 8006e0a:	f7ff fd7b 	bl	8006904 <xTaskCreateStatic>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	4a23      	ldr	r2, [pc, #140]	; (8006ea0 <vTaskStartScheduler+0xc8>)
 8006e12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e14:	4b22      	ldr	r3, [pc, #136]	; (8006ea0 <vTaskStartScheduler+0xc8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	e001      	b.n	8006e26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d102      	bne.n	8006e32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e2c:	f000 fe0e 	bl	8007a4c <xTimerCreateTimerTask>
 8006e30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d11b      	bne.n	8006e70 <vTaskStartScheduler+0x98>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	613b      	str	r3, [r7, #16]
}
 8006e4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e4c:	4b15      	ldr	r3, [pc, #84]	; (8006ea4 <vTaskStartScheduler+0xcc>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3354      	adds	r3, #84	; 0x54
 8006e52:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <vTaskStartScheduler+0xd0>)
 8006e54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e56:	4b15      	ldr	r3, [pc, #84]	; (8006eac <vTaskStartScheduler+0xd4>)
 8006e58:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e5e:	4b14      	ldr	r3, [pc, #80]	; (8006eb0 <vTaskStartScheduler+0xd8>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e64:	4b13      	ldr	r3, [pc, #76]	; (8006eb4 <vTaskStartScheduler+0xdc>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e6a:	f001 f9c9 	bl	8008200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e6e:	e00e      	b.n	8006e8e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e76:	d10a      	bne.n	8006e8e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	60fb      	str	r3, [r7, #12]
}
 8006e8a:	bf00      	nop
 8006e8c:	e7fe      	b.n	8006e8c <vTaskStartScheduler+0xb4>
}
 8006e8e:	bf00      	nop
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	08008ba0 	.word	0x08008ba0
 8006e9c:	080074dd 	.word	0x080074dd
 8006ea0:	20000e84 	.word	0x20000e84
 8006ea4:	2000098c 	.word	0x2000098c
 8006ea8:	2000006c 	.word	0x2000006c
 8006eac:	20000e80 	.word	0x20000e80
 8006eb0:	20000e6c 	.word	0x20000e6c
 8006eb4:	20000e64 	.word	0x20000e64

08006eb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <vTaskSuspendAll+0x18>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	4a03      	ldr	r2, [pc, #12]	; (8006ed0 <vTaskSuspendAll+0x18>)
 8006ec4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ec6:	bf00      	nop
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	20000e88 	.word	0x20000e88

08006ed4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ee2:	4b42      	ldr	r3, [pc, #264]	; (8006fec <xTaskResumeAll+0x118>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10a      	bne.n	8006f00 <xTaskResumeAll+0x2c>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	603b      	str	r3, [r7, #0]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f00:	f001 fa20 	bl	8008344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f04:	4b39      	ldr	r3, [pc, #228]	; (8006fec <xTaskResumeAll+0x118>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	4a38      	ldr	r2, [pc, #224]	; (8006fec <xTaskResumeAll+0x118>)
 8006f0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f0e:	4b37      	ldr	r3, [pc, #220]	; (8006fec <xTaskResumeAll+0x118>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d162      	bne.n	8006fdc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f16:	4b36      	ldr	r3, [pc, #216]	; (8006ff0 <xTaskResumeAll+0x11c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d05e      	beq.n	8006fdc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f1e:	e02f      	b.n	8006f80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f20:	4b34      	ldr	r3, [pc, #208]	; (8006ff4 <xTaskResumeAll+0x120>)
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3318      	adds	r3, #24
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe fcb1 	bl	8005894 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3304      	adds	r3, #4
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fe fcac 	bl	8005894 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f40:	4b2d      	ldr	r3, [pc, #180]	; (8006ff8 <xTaskResumeAll+0x124>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d903      	bls.n	8006f50 <xTaskResumeAll+0x7c>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	4a2a      	ldr	r2, [pc, #168]	; (8006ff8 <xTaskResumeAll+0x124>)
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	4613      	mov	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4a27      	ldr	r2, [pc, #156]	; (8006ffc <xTaskResumeAll+0x128>)
 8006f5e:	441a      	add	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3304      	adds	r3, #4
 8006f64:	4619      	mov	r1, r3
 8006f66:	4610      	mov	r0, r2
 8006f68:	f7fe fc37 	bl	80057da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f70:	4b23      	ldr	r3, [pc, #140]	; (8007000 <xTaskResumeAll+0x12c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d302      	bcc.n	8006f80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f7a:	4b22      	ldr	r3, [pc, #136]	; (8007004 <xTaskResumeAll+0x130>)
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f80:	4b1c      	ldr	r3, [pc, #112]	; (8006ff4 <xTaskResumeAll+0x120>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1cb      	bne.n	8006f20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f8e:	f000 fb5f 	bl	8007650 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f92:	4b1d      	ldr	r3, [pc, #116]	; (8007008 <xTaskResumeAll+0x134>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d010      	beq.n	8006fc0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f9e:	f000 f847 	bl	8007030 <xTaskIncrementTick>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006fa8:	4b16      	ldr	r3, [pc, #88]	; (8007004 <xTaskResumeAll+0x130>)
 8006faa:	2201      	movs	r2, #1
 8006fac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1f1      	bne.n	8006f9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006fba:	4b13      	ldr	r3, [pc, #76]	; (8007008 <xTaskResumeAll+0x134>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fc0:	4b10      	ldr	r3, [pc, #64]	; (8007004 <xTaskResumeAll+0x130>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d009      	beq.n	8006fdc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fcc:	4b0f      	ldr	r3, [pc, #60]	; (800700c <xTaskResumeAll+0x138>)
 8006fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fdc:	f001 f9e2 	bl	80083a4 <vPortExitCritical>

	return xAlreadyYielded;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20000e88 	.word	0x20000e88
 8006ff0:	20000e60 	.word	0x20000e60
 8006ff4:	20000e20 	.word	0x20000e20
 8006ff8:	20000e68 	.word	0x20000e68
 8006ffc:	20000990 	.word	0x20000990
 8007000:	2000098c 	.word	0x2000098c
 8007004:	20000e74 	.word	0x20000e74
 8007008:	20000e70 	.word	0x20000e70
 800700c:	e000ed04 	.word	0xe000ed04

08007010 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007016:	4b05      	ldr	r3, [pc, #20]	; (800702c <xTaskGetTickCount+0x1c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800701c:	687b      	ldr	r3, [r7, #4]
}
 800701e:	4618      	mov	r0, r3
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20000e64 	.word	0x20000e64

08007030 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007036:	2300      	movs	r3, #0
 8007038:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800703a:	4b4f      	ldr	r3, [pc, #316]	; (8007178 <xTaskIncrementTick+0x148>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f040 808f 	bne.w	8007162 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007044:	4b4d      	ldr	r3, [pc, #308]	; (800717c <xTaskIncrementTick+0x14c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800704c:	4a4b      	ldr	r2, [pc, #300]	; (800717c <xTaskIncrementTick+0x14c>)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d120      	bne.n	800709a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007058:	4b49      	ldr	r3, [pc, #292]	; (8007180 <xTaskIncrementTick+0x150>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <xTaskIncrementTick+0x48>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	603b      	str	r3, [r7, #0]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <xTaskIncrementTick+0x46>
 8007078:	4b41      	ldr	r3, [pc, #260]	; (8007180 <xTaskIncrementTick+0x150>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	4b41      	ldr	r3, [pc, #260]	; (8007184 <xTaskIncrementTick+0x154>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a3f      	ldr	r2, [pc, #252]	; (8007180 <xTaskIncrementTick+0x150>)
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	4a3f      	ldr	r2, [pc, #252]	; (8007184 <xTaskIncrementTick+0x154>)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	4b3e      	ldr	r3, [pc, #248]	; (8007188 <xTaskIncrementTick+0x158>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3301      	adds	r3, #1
 8007092:	4a3d      	ldr	r2, [pc, #244]	; (8007188 <xTaskIncrementTick+0x158>)
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	f000 fadb 	bl	8007650 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800709a:	4b3c      	ldr	r3, [pc, #240]	; (800718c <xTaskIncrementTick+0x15c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d349      	bcc.n	8007138 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070a4:	4b36      	ldr	r3, [pc, #216]	; (8007180 <xTaskIncrementTick+0x150>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ae:	4b37      	ldr	r3, [pc, #220]	; (800718c <xTaskIncrementTick+0x15c>)
 80070b0:	f04f 32ff 	mov.w	r2, #4294967295
 80070b4:	601a      	str	r2, [r3, #0]
					break;
 80070b6:	e03f      	b.n	8007138 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070b8:	4b31      	ldr	r3, [pc, #196]	; (8007180 <xTaskIncrementTick+0x150>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d203      	bcs.n	80070d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070d0:	4a2e      	ldr	r2, [pc, #184]	; (800718c <xTaskIncrementTick+0x15c>)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070d6:	e02f      	b.n	8007138 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	3304      	adds	r3, #4
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe fbd9 	bl	8005894 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d004      	beq.n	80070f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	3318      	adds	r3, #24
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe fbd0 	bl	8005894 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	4b25      	ldr	r3, [pc, #148]	; (8007190 <xTaskIncrementTick+0x160>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d903      	bls.n	8007108 <xTaskIncrementTick+0xd8>
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	4a22      	ldr	r2, [pc, #136]	; (8007190 <xTaskIncrementTick+0x160>)
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710c:	4613      	mov	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4a1f      	ldr	r2, [pc, #124]	; (8007194 <xTaskIncrementTick+0x164>)
 8007116:	441a      	add	r2, r3
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	3304      	adds	r3, #4
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f7fe fb5b 	bl	80057da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007128:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <xTaskIncrementTick+0x168>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	429a      	cmp	r2, r3
 8007130:	d3b8      	bcc.n	80070a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007132:	2301      	movs	r3, #1
 8007134:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007136:	e7b5      	b.n	80070a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007138:	4b17      	ldr	r3, [pc, #92]	; (8007198 <xTaskIncrementTick+0x168>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713e:	4915      	ldr	r1, [pc, #84]	; (8007194 <xTaskIncrementTick+0x164>)
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	440b      	add	r3, r1
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d901      	bls.n	8007154 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007150:	2301      	movs	r3, #1
 8007152:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007154:	4b11      	ldr	r3, [pc, #68]	; (800719c <xTaskIncrementTick+0x16c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d007      	beq.n	800716c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800715c:	2301      	movs	r3, #1
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	e004      	b.n	800716c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007162:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <xTaskIncrementTick+0x170>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3301      	adds	r3, #1
 8007168:	4a0d      	ldr	r2, [pc, #52]	; (80071a0 <xTaskIncrementTick+0x170>)
 800716a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800716c:	697b      	ldr	r3, [r7, #20]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000e88 	.word	0x20000e88
 800717c:	20000e64 	.word	0x20000e64
 8007180:	20000e18 	.word	0x20000e18
 8007184:	20000e1c 	.word	0x20000e1c
 8007188:	20000e78 	.word	0x20000e78
 800718c:	20000e80 	.word	0x20000e80
 8007190:	20000e68 	.word	0x20000e68
 8007194:	20000990 	.word	0x20000990
 8007198:	2000098c 	.word	0x2000098c
 800719c:	20000e74 	.word	0x20000e74
 80071a0:	20000e70 	.word	0x20000e70

080071a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071aa:	4b2a      	ldr	r3, [pc, #168]	; (8007254 <vTaskSwitchContext+0xb0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071b2:	4b29      	ldr	r3, [pc, #164]	; (8007258 <vTaskSwitchContext+0xb4>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071b8:	e046      	b.n	8007248 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80071ba:	4b27      	ldr	r3, [pc, #156]	; (8007258 <vTaskSwitchContext+0xb4>)
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c0:	4b26      	ldr	r3, [pc, #152]	; (800725c <vTaskSwitchContext+0xb8>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	e010      	b.n	80071ea <vTaskSwitchContext+0x46>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	607b      	str	r3, [r7, #4]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <vTaskSwitchContext+0x3e>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	491d      	ldr	r1, [pc, #116]	; (8007260 <vTaskSwitchContext+0xbc>)
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	440b      	add	r3, r1
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0e4      	beq.n	80071c8 <vTaskSwitchContext+0x24>
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4613      	mov	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4a15      	ldr	r2, [pc, #84]	; (8007260 <vTaskSwitchContext+0xbc>)
 800720a:	4413      	add	r3, r2
 800720c:	60bb      	str	r3, [r7, #8]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	605a      	str	r2, [r3, #4]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	3308      	adds	r3, #8
 8007220:	429a      	cmp	r2, r3
 8007222:	d104      	bne.n	800722e <vTaskSwitchContext+0x8a>
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	605a      	str	r2, [r3, #4]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	4a0b      	ldr	r2, [pc, #44]	; (8007264 <vTaskSwitchContext+0xc0>)
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	4a08      	ldr	r2, [pc, #32]	; (800725c <vTaskSwitchContext+0xb8>)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800723e:	4b09      	ldr	r3, [pc, #36]	; (8007264 <vTaskSwitchContext+0xc0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3354      	adds	r3, #84	; 0x54
 8007244:	4a08      	ldr	r2, [pc, #32]	; (8007268 <vTaskSwitchContext+0xc4>)
 8007246:	6013      	str	r3, [r2, #0]
}
 8007248:	bf00      	nop
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	20000e88 	.word	0x20000e88
 8007258:	20000e74 	.word	0x20000e74
 800725c:	20000e68 	.word	0x20000e68
 8007260:	20000990 	.word	0x20000990
 8007264:	2000098c 	.word	0x2000098c
 8007268:	2000006c 	.word	0x2000006c

0800726c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	60fb      	str	r3, [r7, #12]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007292:	4b07      	ldr	r3, [pc, #28]	; (80072b0 <vTaskPlaceOnEventList+0x44>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3318      	adds	r3, #24
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7fe fac1 	bl	8005822 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072a0:	2101      	movs	r1, #1
 80072a2:	6838      	ldr	r0, [r7, #0]
 80072a4:	f000 fb7e 	bl	80079a4 <prvAddCurrentTaskToDelayedList>
}
 80072a8:	bf00      	nop
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	2000098c 	.word	0x2000098c

080072b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	617b      	str	r3, [r7, #20]
}
 80072d8:	bf00      	nop
 80072da:	e7fe      	b.n	80072da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072dc:	4b0a      	ldr	r3, [pc, #40]	; (8007308 <vTaskPlaceOnEventListRestricted+0x54>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3318      	adds	r3, #24
 80072e2:	4619      	mov	r1, r3
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f7fe fa78 	bl	80057da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072f0:	f04f 33ff 	mov.w	r3, #4294967295
 80072f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	68b8      	ldr	r0, [r7, #8]
 80072fa:	f000 fb53 	bl	80079a4 <prvAddCurrentTaskToDelayedList>
	}
 80072fe:	bf00      	nop
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	2000098c 	.word	0x2000098c

0800730c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10a      	bne.n	8007338 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	60fb      	str	r3, [r7, #12]
}
 8007334:	bf00      	nop
 8007336:	e7fe      	b.n	8007336 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	3318      	adds	r3, #24
 800733c:	4618      	mov	r0, r3
 800733e:	f7fe faa9 	bl	8005894 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007342:	4b1e      	ldr	r3, [pc, #120]	; (80073bc <xTaskRemoveFromEventList+0xb0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d11d      	bne.n	8007386 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	3304      	adds	r3, #4
 800734e:	4618      	mov	r0, r3
 8007350:	f7fe faa0 	bl	8005894 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007358:	4b19      	ldr	r3, [pc, #100]	; (80073c0 <xTaskRemoveFromEventList+0xb4>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	429a      	cmp	r2, r3
 800735e:	d903      	bls.n	8007368 <xTaskRemoveFromEventList+0x5c>
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007364:	4a16      	ldr	r2, [pc, #88]	; (80073c0 <xTaskRemoveFromEventList+0xb4>)
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4a13      	ldr	r2, [pc, #76]	; (80073c4 <xTaskRemoveFromEventList+0xb8>)
 8007376:	441a      	add	r2, r3
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	3304      	adds	r3, #4
 800737c:	4619      	mov	r1, r3
 800737e:	4610      	mov	r0, r2
 8007380:	f7fe fa2b 	bl	80057da <vListInsertEnd>
 8007384:	e005      	b.n	8007392 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	3318      	adds	r3, #24
 800738a:	4619      	mov	r1, r3
 800738c:	480e      	ldr	r0, [pc, #56]	; (80073c8 <xTaskRemoveFromEventList+0xbc>)
 800738e:	f7fe fa24 	bl	80057da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007396:	4b0d      	ldr	r3, [pc, #52]	; (80073cc <xTaskRemoveFromEventList+0xc0>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	429a      	cmp	r2, r3
 800739e:	d905      	bls.n	80073ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073a0:	2301      	movs	r3, #1
 80073a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073a4:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <xTaskRemoveFromEventList+0xc4>)
 80073a6:	2201      	movs	r2, #1
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	e001      	b.n	80073b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073b0:	697b      	ldr	r3, [r7, #20]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000e88 	.word	0x20000e88
 80073c0:	20000e68 	.word	0x20000e68
 80073c4:	20000990 	.word	0x20000990
 80073c8:	20000e20 	.word	0x20000e20
 80073cc:	2000098c 	.word	0x2000098c
 80073d0:	20000e74 	.word	0x20000e74

080073d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073dc:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <vTaskInternalSetTimeOutState+0x24>)
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <vTaskInternalSetTimeOutState+0x28>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	605a      	str	r2, [r3, #4]
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	20000e78 	.word	0x20000e78
 80073fc:	20000e64 	.word	0x20000e64

08007400 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	613b      	str	r3, [r7, #16]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10a      	bne.n	8007442 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	60fb      	str	r3, [r7, #12]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007442:	f000 ff7f 	bl	8008344 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007446:	4b1d      	ldr	r3, [pc, #116]	; (80074bc <xTaskCheckForTimeOut+0xbc>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745e:	d102      	bne.n	8007466 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007460:	2300      	movs	r3, #0
 8007462:	61fb      	str	r3, [r7, #28]
 8007464:	e023      	b.n	80074ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b15      	ldr	r3, [pc, #84]	; (80074c0 <xTaskCheckForTimeOut+0xc0>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d007      	beq.n	8007482 <xTaskCheckForTimeOut+0x82>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	429a      	cmp	r2, r3
 800747a:	d302      	bcc.n	8007482 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800747c:	2301      	movs	r3, #1
 800747e:	61fb      	str	r3, [r7, #28]
 8007480:	e015      	b.n	80074ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	429a      	cmp	r2, r3
 800748a:	d20b      	bcs.n	80074a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	1ad2      	subs	r2, r2, r3
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff ff9b 	bl	80073d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800749e:	2300      	movs	r3, #0
 80074a0:	61fb      	str	r3, [r7, #28]
 80074a2:	e004      	b.n	80074ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074aa:	2301      	movs	r3, #1
 80074ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074ae:	f000 ff79 	bl	80083a4 <vPortExitCritical>

	return xReturn;
 80074b2:	69fb      	ldr	r3, [r7, #28]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3720      	adds	r7, #32
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	20000e64 	.word	0x20000e64
 80074c0:	20000e78 	.word	0x20000e78

080074c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074c8:	4b03      	ldr	r3, [pc, #12]	; (80074d8 <vTaskMissedYield+0x14>)
 80074ca:	2201      	movs	r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
}
 80074ce:	bf00      	nop
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	20000e74 	.word	0x20000e74

080074dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074e4:	f000 f852 	bl	800758c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074e8:	4b06      	ldr	r3, [pc, #24]	; (8007504 <prvIdleTask+0x28>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d9f9      	bls.n	80074e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074f0:	4b05      	ldr	r3, [pc, #20]	; (8007508 <prvIdleTask+0x2c>)
 80074f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007500:	e7f0      	b.n	80074e4 <prvIdleTask+0x8>
 8007502:	bf00      	nop
 8007504:	20000990 	.word	0x20000990
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007512:	2300      	movs	r3, #0
 8007514:	607b      	str	r3, [r7, #4]
 8007516:	e00c      	b.n	8007532 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	4613      	mov	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4a12      	ldr	r2, [pc, #72]	; (800756c <prvInitialiseTaskLists+0x60>)
 8007524:	4413      	add	r3, r2
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe f92a 	bl	8005780 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3301      	adds	r3, #1
 8007530:	607b      	str	r3, [r7, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b37      	cmp	r3, #55	; 0x37
 8007536:	d9ef      	bls.n	8007518 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007538:	480d      	ldr	r0, [pc, #52]	; (8007570 <prvInitialiseTaskLists+0x64>)
 800753a:	f7fe f921 	bl	8005780 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800753e:	480d      	ldr	r0, [pc, #52]	; (8007574 <prvInitialiseTaskLists+0x68>)
 8007540:	f7fe f91e 	bl	8005780 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007544:	480c      	ldr	r0, [pc, #48]	; (8007578 <prvInitialiseTaskLists+0x6c>)
 8007546:	f7fe f91b 	bl	8005780 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800754a:	480c      	ldr	r0, [pc, #48]	; (800757c <prvInitialiseTaskLists+0x70>)
 800754c:	f7fe f918 	bl	8005780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007550:	480b      	ldr	r0, [pc, #44]	; (8007580 <prvInitialiseTaskLists+0x74>)
 8007552:	f7fe f915 	bl	8005780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007556:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <prvInitialiseTaskLists+0x78>)
 8007558:	4a05      	ldr	r2, [pc, #20]	; (8007570 <prvInitialiseTaskLists+0x64>)
 800755a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800755c:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <prvInitialiseTaskLists+0x7c>)
 800755e:	4a05      	ldr	r2, [pc, #20]	; (8007574 <prvInitialiseTaskLists+0x68>)
 8007560:	601a      	str	r2, [r3, #0]
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20000990 	.word	0x20000990
 8007570:	20000df0 	.word	0x20000df0
 8007574:	20000e04 	.word	0x20000e04
 8007578:	20000e20 	.word	0x20000e20
 800757c:	20000e34 	.word	0x20000e34
 8007580:	20000e4c 	.word	0x20000e4c
 8007584:	20000e18 	.word	0x20000e18
 8007588:	20000e1c 	.word	0x20000e1c

0800758c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007592:	e019      	b.n	80075c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007594:	f000 fed6 	bl	8008344 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007598:	4b10      	ldr	r3, [pc, #64]	; (80075dc <prvCheckTasksWaitingTermination+0x50>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3304      	adds	r3, #4
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fe f975 	bl	8005894 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075aa:	4b0d      	ldr	r3, [pc, #52]	; (80075e0 <prvCheckTasksWaitingTermination+0x54>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	4a0b      	ldr	r2, [pc, #44]	; (80075e0 <prvCheckTasksWaitingTermination+0x54>)
 80075b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075b4:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <prvCheckTasksWaitingTermination+0x58>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	4a0a      	ldr	r2, [pc, #40]	; (80075e4 <prvCheckTasksWaitingTermination+0x58>)
 80075bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075be:	f000 fef1 	bl	80083a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f810 	bl	80075e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075c8:	4b06      	ldr	r3, [pc, #24]	; (80075e4 <prvCheckTasksWaitingTermination+0x58>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e1      	bne.n	8007594 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075d0:	bf00      	nop
 80075d2:	bf00      	nop
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20000e34 	.word	0x20000e34
 80075e0:	20000e60 	.word	0x20000e60
 80075e4:	20000e48 	.word	0x20000e48

080075e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3354      	adds	r3, #84	; 0x54
 80075f4:	4618      	mov	r0, r3
 80075f6:	f001 f9b9 	bl	800896c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007600:	2b00      	cmp	r3, #0
 8007602:	d108      	bne.n	8007616 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007608:	4618      	mov	r0, r3
 800760a:	f001 f889 	bl	8008720 <vPortFree>
				vPortFree( pxTCB );
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 f886 	bl	8008720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007614:	e018      	b.n	8007648 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800761c:	2b01      	cmp	r3, #1
 800761e:	d103      	bne.n	8007628 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 f87d 	bl	8008720 <vPortFree>
	}
 8007626:	e00f      	b.n	8007648 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800762e:	2b02      	cmp	r3, #2
 8007630:	d00a      	beq.n	8007648 <prvDeleteTCB+0x60>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	60fb      	str	r3, [r7, #12]
}
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <prvDeleteTCB+0x5e>
	}
 8007648:	bf00      	nop
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007656:	4b0c      	ldr	r3, [pc, #48]	; (8007688 <prvResetNextTaskUnblockTime+0x38>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d104      	bne.n	800766a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007660:	4b0a      	ldr	r3, [pc, #40]	; (800768c <prvResetNextTaskUnblockTime+0x3c>)
 8007662:	f04f 32ff 	mov.w	r2, #4294967295
 8007666:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007668:	e008      	b.n	800767c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766a:	4b07      	ldr	r3, [pc, #28]	; (8007688 <prvResetNextTaskUnblockTime+0x38>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	4a04      	ldr	r2, [pc, #16]	; (800768c <prvResetNextTaskUnblockTime+0x3c>)
 800767a:	6013      	str	r3, [r2, #0]
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	20000e18 	.word	0x20000e18
 800768c:	20000e80 	.word	0x20000e80

08007690 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007696:	4b0b      	ldr	r3, [pc, #44]	; (80076c4 <xTaskGetSchedulerState+0x34>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d102      	bne.n	80076a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800769e:	2301      	movs	r3, #1
 80076a0:	607b      	str	r3, [r7, #4]
 80076a2:	e008      	b.n	80076b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076a4:	4b08      	ldr	r3, [pc, #32]	; (80076c8 <xTaskGetSchedulerState+0x38>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d102      	bne.n	80076b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076ac:	2302      	movs	r3, #2
 80076ae:	607b      	str	r3, [r7, #4]
 80076b0:	e001      	b.n	80076b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076b2:	2300      	movs	r3, #0
 80076b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076b6:	687b      	ldr	r3, [r7, #4]
	}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	20000e6c 	.word	0x20000e6c
 80076c8:	20000e88 	.word	0x20000e88

080076cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d051      	beq.n	8007786 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e6:	4b2a      	ldr	r3, [pc, #168]	; (8007790 <xTaskPriorityInherit+0xc4>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d241      	bcs.n	8007774 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	db06      	blt.n	8007706 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076f8:	4b25      	ldr	r3, [pc, #148]	; (8007790 <xTaskPriorityInherit+0xc4>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	6959      	ldr	r1, [r3, #20]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4a1f      	ldr	r2, [pc, #124]	; (8007794 <xTaskPriorityInherit+0xc8>)
 8007718:	4413      	add	r3, r2
 800771a:	4299      	cmp	r1, r3
 800771c:	d122      	bne.n	8007764 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	3304      	adds	r3, #4
 8007722:	4618      	mov	r0, r3
 8007724:	f7fe f8b6 	bl	8005894 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007728:	4b19      	ldr	r3, [pc, #100]	; (8007790 <xTaskPriorityInherit+0xc4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007736:	4b18      	ldr	r3, [pc, #96]	; (8007798 <xTaskPriorityInherit+0xcc>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d903      	bls.n	8007746 <xTaskPriorityInherit+0x7a>
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007742:	4a15      	ldr	r2, [pc, #84]	; (8007798 <xTaskPriorityInherit+0xcc>)
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4a10      	ldr	r2, [pc, #64]	; (8007794 <xTaskPriorityInherit+0xc8>)
 8007754:	441a      	add	r2, r3
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	3304      	adds	r3, #4
 800775a:	4619      	mov	r1, r3
 800775c:	4610      	mov	r0, r2
 800775e:	f7fe f83c 	bl	80057da <vListInsertEnd>
 8007762:	e004      	b.n	800776e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007764:	4b0a      	ldr	r3, [pc, #40]	; (8007790 <xTaskPriorityInherit+0xc4>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800776e:	2301      	movs	r3, #1
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	e008      	b.n	8007786 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007778:	4b05      	ldr	r3, [pc, #20]	; (8007790 <xTaskPriorityInherit+0xc4>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	429a      	cmp	r2, r3
 8007780:	d201      	bcs.n	8007786 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007782:	2301      	movs	r3, #1
 8007784:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007786:	68fb      	ldr	r3, [r7, #12]
	}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	2000098c 	.word	0x2000098c
 8007794:	20000990 	.word	0x20000990
 8007798:	20000e68 	.word	0x20000e68

0800779c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077a8:	2300      	movs	r3, #0
 80077aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d056      	beq.n	8007860 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077b2:	4b2e      	ldr	r3, [pc, #184]	; (800786c <xTaskPriorityDisinherit+0xd0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d00a      	beq.n	80077d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	60fb      	str	r3, [r7, #12]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10a      	bne.n	80077f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	60bb      	str	r3, [r7, #8]
}
 80077ec:	bf00      	nop
 80077ee:	e7fe      	b.n	80077ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f4:	1e5a      	subs	r2, r3, #1
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007802:	429a      	cmp	r2, r3
 8007804:	d02c      	beq.n	8007860 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780a:	2b00      	cmp	r3, #0
 800780c:	d128      	bne.n	8007860 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	3304      	adds	r3, #4
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe f83e 	bl	8005894 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007830:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <xTaskPriorityDisinherit+0xd4>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	429a      	cmp	r2, r3
 8007836:	d903      	bls.n	8007840 <xTaskPriorityDisinherit+0xa4>
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	4a0c      	ldr	r2, [pc, #48]	; (8007870 <xTaskPriorityDisinherit+0xd4>)
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007844:	4613      	mov	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4a09      	ldr	r2, [pc, #36]	; (8007874 <xTaskPriorityDisinherit+0xd8>)
 800784e:	441a      	add	r2, r3
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	3304      	adds	r3, #4
 8007854:	4619      	mov	r1, r3
 8007856:	4610      	mov	r0, r2
 8007858:	f7fd ffbf 	bl	80057da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800785c:	2301      	movs	r3, #1
 800785e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007860:	697b      	ldr	r3, [r7, #20]
	}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	2000098c 	.word	0x2000098c
 8007870:	20000e68 	.word	0x20000e68
 8007874:	20000990 	.word	0x20000990

08007878 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007886:	2301      	movs	r3, #1
 8007888:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d06a      	beq.n	8007966 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10a      	bne.n	80078ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	60fb      	str	r3, [r7, #12]
}
 80078aa:	bf00      	nop
 80078ac:	e7fe      	b.n	80078ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d902      	bls.n	80078be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	61fb      	str	r3, [r7, #28]
 80078bc:	e002      	b.n	80078c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c8:	69fa      	ldr	r2, [r7, #28]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d04b      	beq.n	8007966 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d146      	bne.n	8007966 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80078d8:	4b25      	ldr	r3, [pc, #148]	; (8007970 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d10a      	bne.n	80078f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	60bb      	str	r3, [r7, #8]
}
 80078f4:	bf00      	nop
 80078f6:	e7fe      	b.n	80078f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	69fa      	ldr	r2, [r7, #28]
 8007902:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	2b00      	cmp	r3, #0
 800790a:	db04      	blt.n	8007916 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	6959      	ldr	r1, [r3, #20]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4613      	mov	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4a13      	ldr	r2, [pc, #76]	; (8007974 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007926:	4413      	add	r3, r2
 8007928:	4299      	cmp	r1, r3
 800792a:	d11c      	bne.n	8007966 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	3304      	adds	r3, #4
 8007930:	4618      	mov	r0, r3
 8007932:	f7fd ffaf 	bl	8005894 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793a:	4b0f      	ldr	r3, [pc, #60]	; (8007978 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	429a      	cmp	r2, r3
 8007940:	d903      	bls.n	800794a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007946:	4a0c      	ldr	r2, [pc, #48]	; (8007978 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794e:	4613      	mov	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4a07      	ldr	r2, [pc, #28]	; (8007974 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007958:	441a      	add	r2, r3
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	3304      	adds	r3, #4
 800795e:	4619      	mov	r1, r3
 8007960:	4610      	mov	r0, r2
 8007962:	f7fd ff3a 	bl	80057da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007966:	bf00      	nop
 8007968:	3720      	adds	r7, #32
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	2000098c 	.word	0x2000098c
 8007974:	20000990 	.word	0x20000990
 8007978:	20000e68 	.word	0x20000e68

0800797c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007980:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d004      	beq.n	8007992 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007988:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800798e:	3201      	adds	r2, #1
 8007990:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007992:	4b03      	ldr	r3, [pc, #12]	; (80079a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007994:	681b      	ldr	r3, [r3, #0]
	}
 8007996:	4618      	mov	r0, r3
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	2000098c 	.word	0x2000098c

080079a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079ae:	4b21      	ldr	r3, [pc, #132]	; (8007a34 <prvAddCurrentTaskToDelayedList+0x90>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079b4:	4b20      	ldr	r3, [pc, #128]	; (8007a38 <prvAddCurrentTaskToDelayedList+0x94>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3304      	adds	r3, #4
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fd ff6a 	bl	8005894 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c6:	d10a      	bne.n	80079de <prvAddCurrentTaskToDelayedList+0x3a>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ce:	4b1a      	ldr	r3, [pc, #104]	; (8007a38 <prvAddCurrentTaskToDelayedList+0x94>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3304      	adds	r3, #4
 80079d4:	4619      	mov	r1, r3
 80079d6:	4819      	ldr	r0, [pc, #100]	; (8007a3c <prvAddCurrentTaskToDelayedList+0x98>)
 80079d8:	f7fd feff 	bl	80057da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079dc:	e026      	b.n	8007a2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4413      	add	r3, r2
 80079e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079e6:	4b14      	ldr	r3, [pc, #80]	; (8007a38 <prvAddCurrentTaskToDelayedList+0x94>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d209      	bcs.n	8007a0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079f6:	4b12      	ldr	r3, [pc, #72]	; (8007a40 <prvAddCurrentTaskToDelayedList+0x9c>)
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	4b0f      	ldr	r3, [pc, #60]	; (8007a38 <prvAddCurrentTaskToDelayedList+0x94>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3304      	adds	r3, #4
 8007a00:	4619      	mov	r1, r3
 8007a02:	4610      	mov	r0, r2
 8007a04:	f7fd ff0d 	bl	8005822 <vListInsert>
}
 8007a08:	e010      	b.n	8007a2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a0a:	4b0e      	ldr	r3, [pc, #56]	; (8007a44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3304      	adds	r3, #4
 8007a14:	4619      	mov	r1, r3
 8007a16:	4610      	mov	r0, r2
 8007a18:	f7fd ff03 	bl	8005822 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a1c:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d202      	bcs.n	8007a2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a26:	4a08      	ldr	r2, [pc, #32]	; (8007a48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	6013      	str	r3, [r2, #0]
}
 8007a2c:	bf00      	nop
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	20000e64 	.word	0x20000e64
 8007a38:	2000098c 	.word	0x2000098c
 8007a3c:	20000e4c 	.word	0x20000e4c
 8007a40:	20000e1c 	.word	0x20000e1c
 8007a44:	20000e18 	.word	0x20000e18
 8007a48:	20000e80 	.word	0x20000e80

08007a4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08a      	sub	sp, #40	; 0x28
 8007a50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a56:	f000 fb07 	bl	8008068 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a5a:	4b1c      	ldr	r3, [pc, #112]	; (8007acc <xTimerCreateTimerTask+0x80>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d021      	beq.n	8007aa6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a6a:	1d3a      	adds	r2, r7, #4
 8007a6c:	f107 0108 	add.w	r1, r7, #8
 8007a70:	f107 030c 	add.w	r3, r7, #12
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fd fe69 	bl	800574c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a7a:	6879      	ldr	r1, [r7, #4]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	9202      	str	r2, [sp, #8]
 8007a82:	9301      	str	r3, [sp, #4]
 8007a84:	2302      	movs	r3, #2
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	2300      	movs	r3, #0
 8007a8a:	460a      	mov	r2, r1
 8007a8c:	4910      	ldr	r1, [pc, #64]	; (8007ad0 <xTimerCreateTimerTask+0x84>)
 8007a8e:	4811      	ldr	r0, [pc, #68]	; (8007ad4 <xTimerCreateTimerTask+0x88>)
 8007a90:	f7fe ff38 	bl	8006904 <xTaskCreateStatic>
 8007a94:	4603      	mov	r3, r0
 8007a96:	4a10      	ldr	r2, [pc, #64]	; (8007ad8 <xTimerCreateTimerTask+0x8c>)
 8007a98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a9a:	4b0f      	ldr	r3, [pc, #60]	; (8007ad8 <xTimerCreateTimerTask+0x8c>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	613b      	str	r3, [r7, #16]
}
 8007abe:	bf00      	nop
 8007ac0:	e7fe      	b.n	8007ac0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ac2:	697b      	ldr	r3, [r7, #20]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3718      	adds	r7, #24
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	20000ebc 	.word	0x20000ebc
 8007ad0:	08008ba8 	.word	0x08008ba8
 8007ad4:	08007c11 	.word	0x08007c11
 8007ad8:	20000ec0 	.word	0x20000ec0

08007adc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08a      	sub	sp, #40	; 0x28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10a      	bne.n	8007b0a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	623b      	str	r3, [r7, #32]
}
 8007b06:	bf00      	nop
 8007b08:	e7fe      	b.n	8007b08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007b0a:	4b1a      	ldr	r3, [pc, #104]	; (8007b74 <xTimerGenericCommand+0x98>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d02a      	beq.n	8007b68 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2b05      	cmp	r3, #5
 8007b22:	dc18      	bgt.n	8007b56 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b24:	f7ff fdb4 	bl	8007690 <xTaskGetSchedulerState>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d109      	bne.n	8007b42 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b2e:	4b11      	ldr	r3, [pc, #68]	; (8007b74 <xTimerGenericCommand+0x98>)
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	f107 0110 	add.w	r1, r7, #16
 8007b36:	2300      	movs	r3, #0
 8007b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b3a:	f7fe f87d 	bl	8005c38 <xQueueGenericSend>
 8007b3e:	6278      	str	r0, [r7, #36]	; 0x24
 8007b40:	e012      	b.n	8007b68 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b42:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <xTimerGenericCommand+0x98>)
 8007b44:	6818      	ldr	r0, [r3, #0]
 8007b46:	f107 0110 	add.w	r1, r7, #16
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f7fe f873 	bl	8005c38 <xQueueGenericSend>
 8007b52:	6278      	str	r0, [r7, #36]	; 0x24
 8007b54:	e008      	b.n	8007b68 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b56:	4b07      	ldr	r3, [pc, #28]	; (8007b74 <xTimerGenericCommand+0x98>)
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	f107 0110 	add.w	r1, r7, #16
 8007b5e:	2300      	movs	r3, #0
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	f7fe f967 	bl	8005e34 <xQueueGenericSendFromISR>
 8007b66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3728      	adds	r7, #40	; 0x28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20000ebc 	.word	0x20000ebc

08007b78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b088      	sub	sp, #32
 8007b7c:	af02      	add	r7, sp, #8
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b82:	4b22      	ldr	r3, [pc, #136]	; (8007c0c <prvProcessExpiredTimer+0x94>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fd fe7f 	bl	8005894 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d022      	beq.n	8007bea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	699a      	ldr	r2, [r3, #24]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	18d1      	adds	r1, r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	6978      	ldr	r0, [r7, #20]
 8007bb2:	f000 f8d1 	bl	8007d58 <prvInsertTimerInActiveList>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d01f      	beq.n	8007bfc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	6978      	ldr	r0, [r7, #20]
 8007bc8:	f7ff ff88 	bl	8007adc <xTimerGenericCommand>
 8007bcc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d113      	bne.n	8007bfc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	60fb      	str	r3, [r7, #12]
}
 8007be6:	bf00      	nop
 8007be8:	e7fe      	b.n	8007be8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bf0:	f023 0301 	bic.w	r3, r3, #1
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	6978      	ldr	r0, [r7, #20]
 8007c02:	4798      	blx	r3
}
 8007c04:	bf00      	nop
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	20000eb4 	.word	0x20000eb4

08007c10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c18:	f107 0308 	add.w	r3, r7, #8
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 f857 	bl	8007cd0 <prvGetNextExpireTime>
 8007c22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	4619      	mov	r1, r3
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f803 	bl	8007c34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c2e:	f000 f8d5 	bl	8007ddc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c32:	e7f1      	b.n	8007c18 <prvTimerTask+0x8>

08007c34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c3e:	f7ff f93b 	bl	8006eb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c42:	f107 0308 	add.w	r3, r7, #8
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 f866 	bl	8007d18 <prvSampleTimeNow>
 8007c4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d130      	bne.n	8007cb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10a      	bne.n	8007c70 <prvProcessTimerOrBlockTask+0x3c>
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d806      	bhi.n	8007c70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c62:	f7ff f937 	bl	8006ed4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c66:	68f9      	ldr	r1, [r7, #12]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff ff85 	bl	8007b78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c6e:	e024      	b.n	8007cba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d008      	beq.n	8007c88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c76:	4b13      	ldr	r3, [pc, #76]	; (8007cc4 <prvProcessTimerOrBlockTask+0x90>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <prvProcessTimerOrBlockTask+0x50>
 8007c80:	2301      	movs	r3, #1
 8007c82:	e000      	b.n	8007c86 <prvProcessTimerOrBlockTask+0x52>
 8007c84:	2300      	movs	r3, #0
 8007c86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c88:	4b0f      	ldr	r3, [pc, #60]	; (8007cc8 <prvProcessTimerOrBlockTask+0x94>)
 8007c8a:	6818      	ldr	r0, [r3, #0]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	4619      	mov	r1, r3
 8007c96:	f7fe fe01 	bl	800689c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c9a:	f7ff f91b 	bl	8006ed4 <xTaskResumeAll>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10a      	bne.n	8007cba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ca4:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <prvProcessTimerOrBlockTask+0x98>)
 8007ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007caa:	601a      	str	r2, [r3, #0]
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	f3bf 8f6f 	isb	sy
}
 8007cb4:	e001      	b.n	8007cba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007cb6:	f7ff f90d 	bl	8006ed4 <xTaskResumeAll>
}
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20000eb8 	.word	0x20000eb8
 8007cc8:	20000ebc 	.word	0x20000ebc
 8007ccc:	e000ed04 	.word	0xe000ed04

08007cd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007cd8:	4b0e      	ldr	r3, [pc, #56]	; (8007d14 <prvGetNextExpireTime+0x44>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <prvGetNextExpireTime+0x16>
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	e000      	b.n	8007ce8 <prvGetNextExpireTime+0x18>
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d105      	bne.n	8007d00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cf4:	4b07      	ldr	r3, [pc, #28]	; (8007d14 <prvGetNextExpireTime+0x44>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	60fb      	str	r3, [r7, #12]
 8007cfe:	e001      	b.n	8007d04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007d00:	2300      	movs	r3, #0
 8007d02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007d04:	68fb      	ldr	r3, [r7, #12]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3714      	adds	r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	20000eb4 	.word	0x20000eb4

08007d18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d20:	f7ff f976 	bl	8007010 <xTaskGetTickCount>
 8007d24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d26:	4b0b      	ldr	r3, [pc, #44]	; (8007d54 <prvSampleTimeNow+0x3c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d205      	bcs.n	8007d3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d30:	f000 f936 	bl	8007fa0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	e002      	b.n	8007d42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d42:	4a04      	ldr	r2, [pc, #16]	; (8007d54 <prvSampleTimeNow+0x3c>)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d48:	68fb      	ldr	r3, [r7, #12]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	20000ec4 	.word	0x20000ec4

08007d58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d812      	bhi.n	8007da4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	1ad2      	subs	r2, r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d302      	bcc.n	8007d92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	e01b      	b.n	8007dca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d92:	4b10      	ldr	r3, [pc, #64]	; (8007dd4 <prvInsertTimerInActiveList+0x7c>)
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3304      	adds	r3, #4
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	f7fd fd40 	bl	8005822 <vListInsert>
 8007da2:	e012      	b.n	8007dca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d206      	bcs.n	8007dba <prvInsertTimerInActiveList+0x62>
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d302      	bcc.n	8007dba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007db4:	2301      	movs	r3, #1
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	e007      	b.n	8007dca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dba:	4b07      	ldr	r3, [pc, #28]	; (8007dd8 <prvInsertTimerInActiveList+0x80>)
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	f7fd fd2c 	bl	8005822 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007dca:	697b      	ldr	r3, [r7, #20]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	20000eb8 	.word	0x20000eb8
 8007dd8:	20000eb4 	.word	0x20000eb4

08007ddc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08e      	sub	sp, #56	; 0x38
 8007de0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007de2:	e0ca      	b.n	8007f7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	da18      	bge.n	8007e1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007dea:	1d3b      	adds	r3, r7, #4
 8007dec:	3304      	adds	r3, #4
 8007dee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10a      	bne.n	8007e0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	61fb      	str	r3, [r7, #28]
}
 8007e08:	bf00      	nop
 8007e0a:	e7fe      	b.n	8007e0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e12:	6850      	ldr	r0, [r2, #4]
 8007e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e16:	6892      	ldr	r2, [r2, #8]
 8007e18:	4611      	mov	r1, r2
 8007e1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f2c0 80ab 	blt.w	8007f7a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d004      	beq.n	8007e3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	3304      	adds	r3, #4
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fd fd2d 	bl	8005894 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e3a:	463b      	mov	r3, r7
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7ff ff6b 	bl	8007d18 <prvSampleTimeNow>
 8007e42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b09      	cmp	r3, #9
 8007e48:	f200 8096 	bhi.w	8007f78 <prvProcessReceivedCommands+0x19c>
 8007e4c:	a201      	add	r2, pc, #4	; (adr r2, 8007e54 <prvProcessReceivedCommands+0x78>)
 8007e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e52:	bf00      	nop
 8007e54:	08007e7d 	.word	0x08007e7d
 8007e58:	08007e7d 	.word	0x08007e7d
 8007e5c:	08007e7d 	.word	0x08007e7d
 8007e60:	08007ef1 	.word	0x08007ef1
 8007e64:	08007f05 	.word	0x08007f05
 8007e68:	08007f4f 	.word	0x08007f4f
 8007e6c:	08007e7d 	.word	0x08007e7d
 8007e70:	08007e7d 	.word	0x08007e7d
 8007e74:	08007ef1 	.word	0x08007ef1
 8007e78:	08007f05 	.word	0x08007f05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e82:	f043 0301 	orr.w	r3, r3, #1
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	18d1      	adds	r1, r2, r3
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e9c:	f7ff ff5c 	bl	8007d58 <prvInsertTimerInActiveList>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d069      	beq.n	8007f7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d05e      	beq.n	8007f7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	441a      	add	r2, r3
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	2300      	movs	r3, #0
 8007eca:	2100      	movs	r1, #0
 8007ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ece:	f7ff fe05 	bl	8007adc <xTimerGenericCommand>
 8007ed2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d14f      	bne.n	8007f7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	61bb      	str	r3, [r7, #24]
}
 8007eec:	bf00      	nop
 8007eee:	e7fe      	b.n	8007eee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ef6:	f023 0301 	bic.w	r3, r3, #1
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007f02:	e03a      	b.n	8007f7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f0a:	f043 0301 	orr.w	r3, r3, #1
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10a      	bne.n	8007f3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	617b      	str	r3, [r7, #20]
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3c:	699a      	ldr	r2, [r3, #24]
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	18d1      	adds	r1, r2, r3
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f48:	f7ff ff06 	bl	8007d58 <prvInsertTimerInActiveList>
					break;
 8007f4c:	e015      	b.n	8007f7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d103      	bne.n	8007f64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f5e:	f000 fbdf 	bl	8008720 <vPortFree>
 8007f62:	e00a      	b.n	8007f7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f6a:	f023 0301 	bic.w	r3, r3, #1
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f76:	e000      	b.n	8007f7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007f78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f7a:	4b08      	ldr	r3, [pc, #32]	; (8007f9c <prvProcessReceivedCommands+0x1c0>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	1d39      	adds	r1, r7, #4
 8007f80:	2200      	movs	r2, #0
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe f87e 	bl	8006084 <xQueueReceive>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f47f af2a 	bne.w	8007de4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007f90:	bf00      	nop
 8007f92:	bf00      	nop
 8007f94:	3730      	adds	r7, #48	; 0x30
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20000ebc 	.word	0x20000ebc

08007fa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b088      	sub	sp, #32
 8007fa4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fa6:	e048      	b.n	800803a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fa8:	4b2d      	ldr	r3, [pc, #180]	; (8008060 <prvSwitchTimerLists+0xc0>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fb2:	4b2b      	ldr	r3, [pc, #172]	; (8008060 <prvSwitchTimerLists+0xc0>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7fd fc67 	bl	8005894 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fd4:	f003 0304 	and.w	r3, r3, #4
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d02e      	beq.n	800803a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d90e      	bls.n	800800c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ffa:	4b19      	ldr	r3, [pc, #100]	; (8008060 <prvSwitchTimerLists+0xc0>)
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3304      	adds	r3, #4
 8008002:	4619      	mov	r1, r3
 8008004:	4610      	mov	r0, r2
 8008006:	f7fd fc0c 	bl	8005822 <vListInsert>
 800800a:	e016      	b.n	800803a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800800c:	2300      	movs	r3, #0
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	2300      	movs	r3, #0
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	2100      	movs	r1, #0
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f7ff fd60 	bl	8007adc <xTimerGenericCommand>
 800801c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10a      	bne.n	800803a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	603b      	str	r3, [r7, #0]
}
 8008036:	bf00      	nop
 8008038:	e7fe      	b.n	8008038 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800803a:	4b09      	ldr	r3, [pc, #36]	; (8008060 <prvSwitchTimerLists+0xc0>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1b1      	bne.n	8007fa8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008044:	4b06      	ldr	r3, [pc, #24]	; (8008060 <prvSwitchTimerLists+0xc0>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800804a:	4b06      	ldr	r3, [pc, #24]	; (8008064 <prvSwitchTimerLists+0xc4>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a04      	ldr	r2, [pc, #16]	; (8008060 <prvSwitchTimerLists+0xc0>)
 8008050:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008052:	4a04      	ldr	r2, [pc, #16]	; (8008064 <prvSwitchTimerLists+0xc4>)
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	6013      	str	r3, [r2, #0]
}
 8008058:	bf00      	nop
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	20000eb4 	.word	0x20000eb4
 8008064:	20000eb8 	.word	0x20000eb8

08008068 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800806e:	f000 f969 	bl	8008344 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008072:	4b15      	ldr	r3, [pc, #84]	; (80080c8 <prvCheckForValidListAndQueue+0x60>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d120      	bne.n	80080bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800807a:	4814      	ldr	r0, [pc, #80]	; (80080cc <prvCheckForValidListAndQueue+0x64>)
 800807c:	f7fd fb80 	bl	8005780 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008080:	4813      	ldr	r0, [pc, #76]	; (80080d0 <prvCheckForValidListAndQueue+0x68>)
 8008082:	f7fd fb7d 	bl	8005780 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008086:	4b13      	ldr	r3, [pc, #76]	; (80080d4 <prvCheckForValidListAndQueue+0x6c>)
 8008088:	4a10      	ldr	r2, [pc, #64]	; (80080cc <prvCheckForValidListAndQueue+0x64>)
 800808a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800808c:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <prvCheckForValidListAndQueue+0x70>)
 800808e:	4a10      	ldr	r2, [pc, #64]	; (80080d0 <prvCheckForValidListAndQueue+0x68>)
 8008090:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008092:	2300      	movs	r3, #0
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	4b11      	ldr	r3, [pc, #68]	; (80080dc <prvCheckForValidListAndQueue+0x74>)
 8008098:	4a11      	ldr	r2, [pc, #68]	; (80080e0 <prvCheckForValidListAndQueue+0x78>)
 800809a:	2110      	movs	r1, #16
 800809c:	200a      	movs	r0, #10
 800809e:	f7fd fc8b 	bl	80059b8 <xQueueGenericCreateStatic>
 80080a2:	4603      	mov	r3, r0
 80080a4:	4a08      	ldr	r2, [pc, #32]	; (80080c8 <prvCheckForValidListAndQueue+0x60>)
 80080a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80080a8:	4b07      	ldr	r3, [pc, #28]	; (80080c8 <prvCheckForValidListAndQueue+0x60>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80080b0:	4b05      	ldr	r3, [pc, #20]	; (80080c8 <prvCheckForValidListAndQueue+0x60>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	490b      	ldr	r1, [pc, #44]	; (80080e4 <prvCheckForValidListAndQueue+0x7c>)
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe fb9c 	bl	80067f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080bc:	f000 f972 	bl	80083a4 <vPortExitCritical>
}
 80080c0:	bf00      	nop
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20000ebc 	.word	0x20000ebc
 80080cc:	20000e8c 	.word	0x20000e8c
 80080d0:	20000ea0 	.word	0x20000ea0
 80080d4:	20000eb4 	.word	0x20000eb4
 80080d8:	20000eb8 	.word	0x20000eb8
 80080dc:	20000f68 	.word	0x20000f68
 80080e0:	20000ec8 	.word	0x20000ec8
 80080e4:	08008bb0 	.word	0x08008bb0

080080e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	3b04      	subs	r3, #4
 80080f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008100:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3b04      	subs	r3, #4
 8008106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f023 0201 	bic.w	r2, r3, #1
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3b04      	subs	r3, #4
 8008116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008118:	4a0c      	ldr	r2, [pc, #48]	; (800814c <pxPortInitialiseStack+0x64>)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3b14      	subs	r3, #20
 8008122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3b04      	subs	r3, #4
 800812e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f06f 0202 	mvn.w	r2, #2
 8008136:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	3b20      	subs	r3, #32
 800813c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800813e:	68fb      	ldr	r3, [r7, #12]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	08008151 	.word	0x08008151

08008150 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800815a:	4b12      	ldr	r3, [pc, #72]	; (80081a4 <prvTaskExitError+0x54>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008162:	d00a      	beq.n	800817a <prvTaskExitError+0x2a>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	60fb      	str	r3, [r7, #12]
}
 8008176:	bf00      	nop
 8008178:	e7fe      	b.n	8008178 <prvTaskExitError+0x28>
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	60bb      	str	r3, [r7, #8]
}
 800818c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800818e:	bf00      	nop
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0fc      	beq.n	8008190 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008196:	bf00      	nop
 8008198:	bf00      	nop
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	2000001c 	.word	0x2000001c
	...

080081b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081b0:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <pxCurrentTCBConst2>)
 80081b2:	6819      	ldr	r1, [r3, #0]
 80081b4:	6808      	ldr	r0, [r1, #0]
 80081b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ba:	f380 8809 	msr	PSP, r0
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f380 8811 	msr	BASEPRI, r0
 80081ca:	4770      	bx	lr
 80081cc:	f3af 8000 	nop.w

080081d0 <pxCurrentTCBConst2>:
 80081d0:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop

080081d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081d8:	4808      	ldr	r0, [pc, #32]	; (80081fc <prvPortStartFirstTask+0x24>)
 80081da:	6800      	ldr	r0, [r0, #0]
 80081dc:	6800      	ldr	r0, [r0, #0]
 80081de:	f380 8808 	msr	MSP, r0
 80081e2:	f04f 0000 	mov.w	r0, #0
 80081e6:	f380 8814 	msr	CONTROL, r0
 80081ea:	b662      	cpsie	i
 80081ec:	b661      	cpsie	f
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	df00      	svc	0
 80081f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081fa:	bf00      	nop
 80081fc:	e000ed08 	.word	0xe000ed08

08008200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008206:	4b46      	ldr	r3, [pc, #280]	; (8008320 <xPortStartScheduler+0x120>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a46      	ldr	r2, [pc, #280]	; (8008324 <xPortStartScheduler+0x124>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d10a      	bne.n	8008226 <xPortStartScheduler+0x26>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	613b      	str	r3, [r7, #16]
}
 8008222:	bf00      	nop
 8008224:	e7fe      	b.n	8008224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008226:	4b3e      	ldr	r3, [pc, #248]	; (8008320 <xPortStartScheduler+0x120>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a3f      	ldr	r2, [pc, #252]	; (8008328 <xPortStartScheduler+0x128>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d10a      	bne.n	8008246 <xPortStartScheduler+0x46>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	60fb      	str	r3, [r7, #12]
}
 8008242:	bf00      	nop
 8008244:	e7fe      	b.n	8008244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008246:	4b39      	ldr	r3, [pc, #228]	; (800832c <xPortStartScheduler+0x12c>)
 8008248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	b2db      	uxtb	r3, r3
 8008250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	22ff      	movs	r2, #255	; 0xff
 8008256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	b2db      	uxtb	r3, r3
 800825e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008268:	b2da      	uxtb	r2, r3
 800826a:	4b31      	ldr	r3, [pc, #196]	; (8008330 <xPortStartScheduler+0x130>)
 800826c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800826e:	4b31      	ldr	r3, [pc, #196]	; (8008334 <xPortStartScheduler+0x134>)
 8008270:	2207      	movs	r2, #7
 8008272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008274:	e009      	b.n	800828a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008276:	4b2f      	ldr	r3, [pc, #188]	; (8008334 <xPortStartScheduler+0x134>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3b01      	subs	r3, #1
 800827c:	4a2d      	ldr	r2, [pc, #180]	; (8008334 <xPortStartScheduler+0x134>)
 800827e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	b2db      	uxtb	r3, r3
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	b2db      	uxtb	r3, r3
 8008288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800828a:	78fb      	ldrb	r3, [r7, #3]
 800828c:	b2db      	uxtb	r3, r3
 800828e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008292:	2b80      	cmp	r3, #128	; 0x80
 8008294:	d0ef      	beq.n	8008276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008296:	4b27      	ldr	r3, [pc, #156]	; (8008334 <xPortStartScheduler+0x134>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f1c3 0307 	rsb	r3, r3, #7
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d00a      	beq.n	80082b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	60bb      	str	r3, [r7, #8]
}
 80082b4:	bf00      	nop
 80082b6:	e7fe      	b.n	80082b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082b8:	4b1e      	ldr	r3, [pc, #120]	; (8008334 <xPortStartScheduler+0x134>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	021b      	lsls	r3, r3, #8
 80082be:	4a1d      	ldr	r2, [pc, #116]	; (8008334 <xPortStartScheduler+0x134>)
 80082c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082c2:	4b1c      	ldr	r3, [pc, #112]	; (8008334 <xPortStartScheduler+0x134>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082ca:	4a1a      	ldr	r2, [pc, #104]	; (8008334 <xPortStartScheduler+0x134>)
 80082cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082d6:	4b18      	ldr	r3, [pc, #96]	; (8008338 <xPortStartScheduler+0x138>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a17      	ldr	r2, [pc, #92]	; (8008338 <xPortStartScheduler+0x138>)
 80082dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082e2:	4b15      	ldr	r3, [pc, #84]	; (8008338 <xPortStartScheduler+0x138>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a14      	ldr	r2, [pc, #80]	; (8008338 <xPortStartScheduler+0x138>)
 80082e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082ee:	f000 f8dd 	bl	80084ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082f2:	4b12      	ldr	r3, [pc, #72]	; (800833c <xPortStartScheduler+0x13c>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082f8:	f000 f8fc 	bl	80084f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082fc:	4b10      	ldr	r3, [pc, #64]	; (8008340 <xPortStartScheduler+0x140>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a0f      	ldr	r2, [pc, #60]	; (8008340 <xPortStartScheduler+0x140>)
 8008302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008308:	f7ff ff66 	bl	80081d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800830c:	f7fe ff4a 	bl	80071a4 <vTaskSwitchContext>
	prvTaskExitError();
 8008310:	f7ff ff1e 	bl	8008150 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	e000ed00 	.word	0xe000ed00
 8008324:	410fc271 	.word	0x410fc271
 8008328:	410fc270 	.word	0x410fc270
 800832c:	e000e400 	.word	0xe000e400
 8008330:	20000fb8 	.word	0x20000fb8
 8008334:	20000fbc 	.word	0x20000fbc
 8008338:	e000ed20 	.word	0xe000ed20
 800833c:	2000001c 	.word	0x2000001c
 8008340:	e000ef34 	.word	0xe000ef34

08008344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	607b      	str	r3, [r7, #4]
}
 800835c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800835e:	4b0f      	ldr	r3, [pc, #60]	; (800839c <vPortEnterCritical+0x58>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3301      	adds	r3, #1
 8008364:	4a0d      	ldr	r2, [pc, #52]	; (800839c <vPortEnterCritical+0x58>)
 8008366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008368:	4b0c      	ldr	r3, [pc, #48]	; (800839c <vPortEnterCritical+0x58>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d10f      	bne.n	8008390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008370:	4b0b      	ldr	r3, [pc, #44]	; (80083a0 <vPortEnterCritical+0x5c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <vPortEnterCritical+0x4c>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	603b      	str	r3, [r7, #0]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <vPortEnterCritical+0x4a>
	}
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	2000001c 	.word	0x2000001c
 80083a0:	e000ed04 	.word	0xe000ed04

080083a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083aa:	4b12      	ldr	r3, [pc, #72]	; (80083f4 <vPortExitCritical+0x50>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10a      	bne.n	80083c8 <vPortExitCritical+0x24>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	607b      	str	r3, [r7, #4]
}
 80083c4:	bf00      	nop
 80083c6:	e7fe      	b.n	80083c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083c8:	4b0a      	ldr	r3, [pc, #40]	; (80083f4 <vPortExitCritical+0x50>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	4a09      	ldr	r2, [pc, #36]	; (80083f4 <vPortExitCritical+0x50>)
 80083d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083d2:	4b08      	ldr	r3, [pc, #32]	; (80083f4 <vPortExitCritical+0x50>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d105      	bne.n	80083e6 <vPortExitCritical+0x42>
 80083da:	2300      	movs	r3, #0
 80083dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	f383 8811 	msr	BASEPRI, r3
}
 80083e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	2000001c 	.word	0x2000001c
	...

08008400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008400:	f3ef 8009 	mrs	r0, PSP
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	4b15      	ldr	r3, [pc, #84]	; (8008460 <pxCurrentTCBConst>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	f01e 0f10 	tst.w	lr, #16
 8008410:	bf08      	it	eq
 8008412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841a:	6010      	str	r0, [r2, #0]
 800841c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008424:	f380 8811 	msr	BASEPRI, r0
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f7fe feb8 	bl	80071a4 <vTaskSwitchContext>
 8008434:	f04f 0000 	mov.w	r0, #0
 8008438:	f380 8811 	msr	BASEPRI, r0
 800843c:	bc09      	pop	{r0, r3}
 800843e:	6819      	ldr	r1, [r3, #0]
 8008440:	6808      	ldr	r0, [r1, #0]
 8008442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008446:	f01e 0f10 	tst.w	lr, #16
 800844a:	bf08      	it	eq
 800844c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008450:	f380 8809 	msr	PSP, r0
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	f3af 8000 	nop.w

08008460 <pxCurrentTCBConst>:
 8008460:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop

08008468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	607b      	str	r3, [r7, #4]
}
 8008480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008482:	f7fe fdd5 	bl	8007030 <xTaskIncrementTick>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <xPortSysTickHandler+0x40>)
 800848e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	2300      	movs	r3, #0
 8008496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	f383 8811 	msr	BASEPRI, r3
}
 800849e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084a0:	bf00      	nop
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	e000ed04 	.word	0xe000ed04

080084ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084ac:	b480      	push	{r7}
 80084ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084b0:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <vPortSetupTimerInterrupt+0x34>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084b6:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <vPortSetupTimerInterrupt+0x38>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084bc:	4b0a      	ldr	r3, [pc, #40]	; (80084e8 <vPortSetupTimerInterrupt+0x3c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a0a      	ldr	r2, [pc, #40]	; (80084ec <vPortSetupTimerInterrupt+0x40>)
 80084c2:	fba2 2303 	umull	r2, r3, r2, r3
 80084c6:	099b      	lsrs	r3, r3, #6
 80084c8:	4a09      	ldr	r2, [pc, #36]	; (80084f0 <vPortSetupTimerInterrupt+0x44>)
 80084ca:	3b01      	subs	r3, #1
 80084cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084ce:	4b04      	ldr	r3, [pc, #16]	; (80084e0 <vPortSetupTimerInterrupt+0x34>)
 80084d0:	2207      	movs	r2, #7
 80084d2:	601a      	str	r2, [r3, #0]
}
 80084d4:	bf00      	nop
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	e000e010 	.word	0xe000e010
 80084e4:	e000e018 	.word	0xe000e018
 80084e8:	20000010 	.word	0x20000010
 80084ec:	10624dd3 	.word	0x10624dd3
 80084f0:	e000e014 	.word	0xe000e014

080084f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008504 <vPortEnableVFP+0x10>
 80084f8:	6801      	ldr	r1, [r0, #0]
 80084fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084fe:	6001      	str	r1, [r0, #0]
 8008500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008502:	bf00      	nop
 8008504:	e000ed88 	.word	0xe000ed88

08008508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800850e:	f3ef 8305 	mrs	r3, IPSR
 8008512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b0f      	cmp	r3, #15
 8008518:	d914      	bls.n	8008544 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800851a:	4a17      	ldr	r2, [pc, #92]	; (8008578 <vPortValidateInterruptPriority+0x70>)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4413      	add	r3, r2
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008524:	4b15      	ldr	r3, [pc, #84]	; (800857c <vPortValidateInterruptPriority+0x74>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	7afa      	ldrb	r2, [r7, #11]
 800852a:	429a      	cmp	r2, r3
 800852c:	d20a      	bcs.n	8008544 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	607b      	str	r3, [r7, #4]
}
 8008540:	bf00      	nop
 8008542:	e7fe      	b.n	8008542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008544:	4b0e      	ldr	r3, [pc, #56]	; (8008580 <vPortValidateInterruptPriority+0x78>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800854c:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <vPortValidateInterruptPriority+0x7c>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	429a      	cmp	r2, r3
 8008552:	d90a      	bls.n	800856a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	603b      	str	r3, [r7, #0]
}
 8008566:	bf00      	nop
 8008568:	e7fe      	b.n	8008568 <vPortValidateInterruptPriority+0x60>
	}
 800856a:	bf00      	nop
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	e000e3f0 	.word	0xe000e3f0
 800857c:	20000fb8 	.word	0x20000fb8
 8008580:	e000ed0c 	.word	0xe000ed0c
 8008584:	20000fbc 	.word	0x20000fbc

08008588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b08a      	sub	sp, #40	; 0x28
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008590:	2300      	movs	r3, #0
 8008592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008594:	f7fe fc90 	bl	8006eb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008598:	4b5b      	ldr	r3, [pc, #364]	; (8008708 <pvPortMalloc+0x180>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085a0:	f000 f920 	bl	80087e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085a4:	4b59      	ldr	r3, [pc, #356]	; (800870c <pvPortMalloc+0x184>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4013      	ands	r3, r2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f040 8093 	bne.w	80086d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01d      	beq.n	80085f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80085b8:	2208      	movs	r2, #8
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4413      	add	r3, r2
 80085be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d014      	beq.n	80085f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f023 0307 	bic.w	r3, r3, #7
 80085d0:	3308      	adds	r3, #8
 80085d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <pvPortMalloc+0x6c>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	617b      	str	r3, [r7, #20]
}
 80085f0:	bf00      	nop
 80085f2:	e7fe      	b.n	80085f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d06e      	beq.n	80086d8 <pvPortMalloc+0x150>
 80085fa:	4b45      	ldr	r3, [pc, #276]	; (8008710 <pvPortMalloc+0x188>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	429a      	cmp	r2, r3
 8008602:	d869      	bhi.n	80086d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008604:	4b43      	ldr	r3, [pc, #268]	; (8008714 <pvPortMalloc+0x18c>)
 8008606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008608:	4b42      	ldr	r3, [pc, #264]	; (8008714 <pvPortMalloc+0x18c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800860e:	e004      	b.n	800861a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	429a      	cmp	r2, r3
 8008622:	d903      	bls.n	800862c <pvPortMalloc+0xa4>
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1f1      	bne.n	8008610 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800862c:	4b36      	ldr	r3, [pc, #216]	; (8008708 <pvPortMalloc+0x180>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008632:	429a      	cmp	r2, r3
 8008634:	d050      	beq.n	80086d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008636:	6a3b      	ldr	r3, [r7, #32]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2208      	movs	r2, #8
 800863c:	4413      	add	r3, r2
 800863e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	1ad2      	subs	r2, r2, r3
 8008650:	2308      	movs	r3, #8
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	429a      	cmp	r2, r3
 8008656:	d91f      	bls.n	8008698 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4413      	add	r3, r2
 800865e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <pvPortMalloc+0xf8>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	613b      	str	r3, [r7, #16]
}
 800867c:	bf00      	nop
 800867e:	e7fe      	b.n	800867e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	1ad2      	subs	r2, r2, r3
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008692:	69b8      	ldr	r0, [r7, #24]
 8008694:	f000 f908 	bl	80088a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008698:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <pvPortMalloc+0x188>)
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	4a1b      	ldr	r2, [pc, #108]	; (8008710 <pvPortMalloc+0x188>)
 80086a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086a6:	4b1a      	ldr	r3, [pc, #104]	; (8008710 <pvPortMalloc+0x188>)
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	4b1b      	ldr	r3, [pc, #108]	; (8008718 <pvPortMalloc+0x190>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d203      	bcs.n	80086ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086b2:	4b17      	ldr	r3, [pc, #92]	; (8008710 <pvPortMalloc+0x188>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a18      	ldr	r2, [pc, #96]	; (8008718 <pvPortMalloc+0x190>)
 80086b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	4b13      	ldr	r3, [pc, #76]	; (800870c <pvPortMalloc+0x184>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	431a      	orrs	r2, r3
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	2200      	movs	r2, #0
 80086cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80086ce:	4b13      	ldr	r3, [pc, #76]	; (800871c <pvPortMalloc+0x194>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3301      	adds	r3, #1
 80086d4:	4a11      	ldr	r2, [pc, #68]	; (800871c <pvPortMalloc+0x194>)
 80086d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086d8:	f7fe fbfc 	bl	8006ed4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	f003 0307 	and.w	r3, r3, #7
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00a      	beq.n	80086fc <pvPortMalloc+0x174>
	__asm volatile
 80086e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	60fb      	str	r3, [r7, #12]
}
 80086f8:	bf00      	nop
 80086fa:	e7fe      	b.n	80086fa <pvPortMalloc+0x172>
	return pvReturn;
 80086fc:	69fb      	ldr	r3, [r7, #28]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3728      	adds	r7, #40	; 0x28
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	20001f68 	.word	0x20001f68
 800870c:	20001f7c 	.word	0x20001f7c
 8008710:	20001f6c 	.word	0x20001f6c
 8008714:	20001f60 	.word	0x20001f60
 8008718:	20001f70 	.word	0x20001f70
 800871c:	20001f74 	.word	0x20001f74

08008720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d04d      	beq.n	80087ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008732:	2308      	movs	r3, #8
 8008734:	425b      	negs	r3, r3
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	4413      	add	r3, r2
 800873a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	4b24      	ldr	r3, [pc, #144]	; (80087d8 <vPortFree+0xb8>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4013      	ands	r3, r2
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10a      	bne.n	8008764 <vPortFree+0x44>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	60fb      	str	r3, [r7, #12]
}
 8008760:	bf00      	nop
 8008762:	e7fe      	b.n	8008762 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00a      	beq.n	8008782 <vPortFree+0x62>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	60bb      	str	r3, [r7, #8]
}
 800877e:	bf00      	nop
 8008780:	e7fe      	b.n	8008780 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <vPortFree+0xb8>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4013      	ands	r3, r2
 800878c:	2b00      	cmp	r3, #0
 800878e:	d01e      	beq.n	80087ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d11a      	bne.n	80087ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	4b0e      	ldr	r3, [pc, #56]	; (80087d8 <vPortFree+0xb8>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	43db      	mvns	r3, r3
 80087a2:	401a      	ands	r2, r3
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087a8:	f7fe fb86 	bl	8006eb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	685a      	ldr	r2, [r3, #4]
 80087b0:	4b0a      	ldr	r3, [pc, #40]	; (80087dc <vPortFree+0xbc>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4413      	add	r3, r2
 80087b6:	4a09      	ldr	r2, [pc, #36]	; (80087dc <vPortFree+0xbc>)
 80087b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087ba:	6938      	ldr	r0, [r7, #16]
 80087bc:	f000 f874 	bl	80088a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80087c0:	4b07      	ldr	r3, [pc, #28]	; (80087e0 <vPortFree+0xc0>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3301      	adds	r3, #1
 80087c6:	4a06      	ldr	r2, [pc, #24]	; (80087e0 <vPortFree+0xc0>)
 80087c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80087ca:	f7fe fb83 	bl	8006ed4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087ce:	bf00      	nop
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20001f7c 	.word	0x20001f7c
 80087dc:	20001f6c 	.word	0x20001f6c
 80087e0:	20001f78 	.word	0x20001f78

080087e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087ea:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80087ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087f0:	4b27      	ldr	r3, [pc, #156]	; (8008890 <prvHeapInit+0xac>)
 80087f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00c      	beq.n	8008818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3307      	adds	r3, #7
 8008802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 0307 	bic.w	r3, r3, #7
 800880a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	4a1f      	ldr	r2, [pc, #124]	; (8008890 <prvHeapInit+0xac>)
 8008814:	4413      	add	r3, r2
 8008816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800881c:	4a1d      	ldr	r2, [pc, #116]	; (8008894 <prvHeapInit+0xb0>)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008822:	4b1c      	ldr	r3, [pc, #112]	; (8008894 <prvHeapInit+0xb0>)
 8008824:	2200      	movs	r2, #0
 8008826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	4413      	add	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008830:	2208      	movs	r2, #8
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	1a9b      	subs	r3, r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0307 	bic.w	r3, r3, #7
 800883e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4a15      	ldr	r2, [pc, #84]	; (8008898 <prvHeapInit+0xb4>)
 8008844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008846:	4b14      	ldr	r3, [pc, #80]	; (8008898 <prvHeapInit+0xb4>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2200      	movs	r2, #0
 800884c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800884e:	4b12      	ldr	r3, [pc, #72]	; (8008898 <prvHeapInit+0xb4>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	1ad2      	subs	r2, r2, r3
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008864:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <prvHeapInit+0xb4>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	4a0a      	ldr	r2, [pc, #40]	; (800889c <prvHeapInit+0xb8>)
 8008872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	4a09      	ldr	r2, [pc, #36]	; (80088a0 <prvHeapInit+0xbc>)
 800887a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800887c:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <prvHeapInit+0xc0>)
 800887e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008882:	601a      	str	r2, [r3, #0]
}
 8008884:	bf00      	nop
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	20000fc0 	.word	0x20000fc0
 8008894:	20001f60 	.word	0x20001f60
 8008898:	20001f68 	.word	0x20001f68
 800889c:	20001f70 	.word	0x20001f70
 80088a0:	20001f6c 	.word	0x20001f6c
 80088a4:	20001f7c 	.word	0x20001f7c

080088a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088b0:	4b28      	ldr	r3, [pc, #160]	; (8008954 <prvInsertBlockIntoFreeList+0xac>)
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	e002      	b.n	80088bc <prvInsertBlockIntoFreeList+0x14>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d8f7      	bhi.n	80088b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	4413      	add	r3, r2
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d108      	bne.n	80088ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	441a      	add	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	441a      	add	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d118      	bne.n	8008930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	4b15      	ldr	r3, [pc, #84]	; (8008958 <prvInsertBlockIntoFreeList+0xb0>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	d00d      	beq.n	8008926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	441a      	add	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	e008      	b.n	8008938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008926:	4b0c      	ldr	r3, [pc, #48]	; (8008958 <prvInsertBlockIntoFreeList+0xb0>)
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	e003      	b.n	8008938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	429a      	cmp	r2, r3
 800893e:	d002      	beq.n	8008946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008946:	bf00      	nop
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	20001f60 	.word	0x20001f60
 8008958:	20001f68 	.word	0x20001f68

0800895c <memset>:
 800895c:	4402      	add	r2, r0
 800895e:	4603      	mov	r3, r0
 8008960:	4293      	cmp	r3, r2
 8008962:	d100      	bne.n	8008966 <memset+0xa>
 8008964:	4770      	bx	lr
 8008966:	f803 1b01 	strb.w	r1, [r3], #1
 800896a:	e7f9      	b.n	8008960 <memset+0x4>

0800896c <_reclaim_reent>:
 800896c:	4b29      	ldr	r3, [pc, #164]	; (8008a14 <_reclaim_reent+0xa8>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4283      	cmp	r3, r0
 8008972:	b570      	push	{r4, r5, r6, lr}
 8008974:	4604      	mov	r4, r0
 8008976:	d04b      	beq.n	8008a10 <_reclaim_reent+0xa4>
 8008978:	69c3      	ldr	r3, [r0, #28]
 800897a:	b143      	cbz	r3, 800898e <_reclaim_reent+0x22>
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d144      	bne.n	8008a0c <_reclaim_reent+0xa0>
 8008982:	69e3      	ldr	r3, [r4, #28]
 8008984:	6819      	ldr	r1, [r3, #0]
 8008986:	b111      	cbz	r1, 800898e <_reclaim_reent+0x22>
 8008988:	4620      	mov	r0, r4
 800898a:	f000 f879 	bl	8008a80 <_free_r>
 800898e:	6961      	ldr	r1, [r4, #20]
 8008990:	b111      	cbz	r1, 8008998 <_reclaim_reent+0x2c>
 8008992:	4620      	mov	r0, r4
 8008994:	f000 f874 	bl	8008a80 <_free_r>
 8008998:	69e1      	ldr	r1, [r4, #28]
 800899a:	b111      	cbz	r1, 80089a2 <_reclaim_reent+0x36>
 800899c:	4620      	mov	r0, r4
 800899e:	f000 f86f 	bl	8008a80 <_free_r>
 80089a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80089a4:	b111      	cbz	r1, 80089ac <_reclaim_reent+0x40>
 80089a6:	4620      	mov	r0, r4
 80089a8:	f000 f86a 	bl	8008a80 <_free_r>
 80089ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089ae:	b111      	cbz	r1, 80089b6 <_reclaim_reent+0x4a>
 80089b0:	4620      	mov	r0, r4
 80089b2:	f000 f865 	bl	8008a80 <_free_r>
 80089b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80089b8:	b111      	cbz	r1, 80089c0 <_reclaim_reent+0x54>
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 f860 	bl	8008a80 <_free_r>
 80089c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80089c2:	b111      	cbz	r1, 80089ca <_reclaim_reent+0x5e>
 80089c4:	4620      	mov	r0, r4
 80089c6:	f000 f85b 	bl	8008a80 <_free_r>
 80089ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80089cc:	b111      	cbz	r1, 80089d4 <_reclaim_reent+0x68>
 80089ce:	4620      	mov	r0, r4
 80089d0:	f000 f856 	bl	8008a80 <_free_r>
 80089d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80089d6:	b111      	cbz	r1, 80089de <_reclaim_reent+0x72>
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 f851 	bl	8008a80 <_free_r>
 80089de:	6a23      	ldr	r3, [r4, #32]
 80089e0:	b1b3      	cbz	r3, 8008a10 <_reclaim_reent+0xa4>
 80089e2:	4620      	mov	r0, r4
 80089e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80089e8:	4718      	bx	r3
 80089ea:	5949      	ldr	r1, [r1, r5]
 80089ec:	b941      	cbnz	r1, 8008a00 <_reclaim_reent+0x94>
 80089ee:	3504      	adds	r5, #4
 80089f0:	69e3      	ldr	r3, [r4, #28]
 80089f2:	2d80      	cmp	r5, #128	; 0x80
 80089f4:	68d9      	ldr	r1, [r3, #12]
 80089f6:	d1f8      	bne.n	80089ea <_reclaim_reent+0x7e>
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 f841 	bl	8008a80 <_free_r>
 80089fe:	e7c0      	b.n	8008982 <_reclaim_reent+0x16>
 8008a00:	680e      	ldr	r6, [r1, #0]
 8008a02:	4620      	mov	r0, r4
 8008a04:	f000 f83c 	bl	8008a80 <_free_r>
 8008a08:	4631      	mov	r1, r6
 8008a0a:	e7ef      	b.n	80089ec <_reclaim_reent+0x80>
 8008a0c:	2500      	movs	r5, #0
 8008a0e:	e7ef      	b.n	80089f0 <_reclaim_reent+0x84>
 8008a10:	bd70      	pop	{r4, r5, r6, pc}
 8008a12:	bf00      	nop
 8008a14:	2000006c 	.word	0x2000006c

08008a18 <__libc_init_array>:
 8008a18:	b570      	push	{r4, r5, r6, lr}
 8008a1a:	4d0d      	ldr	r5, [pc, #52]	; (8008a50 <__libc_init_array+0x38>)
 8008a1c:	4c0d      	ldr	r4, [pc, #52]	; (8008a54 <__libc_init_array+0x3c>)
 8008a1e:	1b64      	subs	r4, r4, r5
 8008a20:	10a4      	asrs	r4, r4, #2
 8008a22:	2600      	movs	r6, #0
 8008a24:	42a6      	cmp	r6, r4
 8008a26:	d109      	bne.n	8008a3c <__libc_init_array+0x24>
 8008a28:	4d0b      	ldr	r5, [pc, #44]	; (8008a58 <__libc_init_array+0x40>)
 8008a2a:	4c0c      	ldr	r4, [pc, #48]	; (8008a5c <__libc_init_array+0x44>)
 8008a2c:	f000 f880 	bl	8008b30 <_init>
 8008a30:	1b64      	subs	r4, r4, r5
 8008a32:	10a4      	asrs	r4, r4, #2
 8008a34:	2600      	movs	r6, #0
 8008a36:	42a6      	cmp	r6, r4
 8008a38:	d105      	bne.n	8008a46 <__libc_init_array+0x2e>
 8008a3a:	bd70      	pop	{r4, r5, r6, pc}
 8008a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a40:	4798      	blx	r3
 8008a42:	3601      	adds	r6, #1
 8008a44:	e7ee      	b.n	8008a24 <__libc_init_array+0xc>
 8008a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a4a:	4798      	blx	r3
 8008a4c:	3601      	adds	r6, #1
 8008a4e:	e7f2      	b.n	8008a36 <__libc_init_array+0x1e>
 8008a50:	08008ccc 	.word	0x08008ccc
 8008a54:	08008ccc 	.word	0x08008ccc
 8008a58:	08008ccc 	.word	0x08008ccc
 8008a5c:	08008cd0 	.word	0x08008cd0

08008a60 <__retarget_lock_acquire_recursive>:
 8008a60:	4770      	bx	lr

08008a62 <__retarget_lock_release_recursive>:
 8008a62:	4770      	bx	lr

08008a64 <memcpy>:
 8008a64:	440a      	add	r2, r1
 8008a66:	4291      	cmp	r1, r2
 8008a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a6c:	d100      	bne.n	8008a70 <memcpy+0xc>
 8008a6e:	4770      	bx	lr
 8008a70:	b510      	push	{r4, lr}
 8008a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a7a:	4291      	cmp	r1, r2
 8008a7c:	d1f9      	bne.n	8008a72 <memcpy+0xe>
 8008a7e:	bd10      	pop	{r4, pc}

08008a80 <_free_r>:
 8008a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a82:	2900      	cmp	r1, #0
 8008a84:	d044      	beq.n	8008b10 <_free_r+0x90>
 8008a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a8a:	9001      	str	r0, [sp, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a92:	bfb8      	it	lt
 8008a94:	18e4      	addlt	r4, r4, r3
 8008a96:	f000 f83f 	bl	8008b18 <__malloc_lock>
 8008a9a:	4a1e      	ldr	r2, [pc, #120]	; (8008b14 <_free_r+0x94>)
 8008a9c:	9801      	ldr	r0, [sp, #4]
 8008a9e:	6813      	ldr	r3, [r2, #0]
 8008aa0:	b933      	cbnz	r3, 8008ab0 <_free_r+0x30>
 8008aa2:	6063      	str	r3, [r4, #4]
 8008aa4:	6014      	str	r4, [r2, #0]
 8008aa6:	b003      	add	sp, #12
 8008aa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008aac:	f000 b83a 	b.w	8008b24 <__malloc_unlock>
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	d908      	bls.n	8008ac6 <_free_r+0x46>
 8008ab4:	6825      	ldr	r5, [r4, #0]
 8008ab6:	1961      	adds	r1, r4, r5
 8008ab8:	428b      	cmp	r3, r1
 8008aba:	bf01      	itttt	eq
 8008abc:	6819      	ldreq	r1, [r3, #0]
 8008abe:	685b      	ldreq	r3, [r3, #4]
 8008ac0:	1949      	addeq	r1, r1, r5
 8008ac2:	6021      	streq	r1, [r4, #0]
 8008ac4:	e7ed      	b.n	8008aa2 <_free_r+0x22>
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	b10b      	cbz	r3, 8008ad0 <_free_r+0x50>
 8008acc:	42a3      	cmp	r3, r4
 8008ace:	d9fa      	bls.n	8008ac6 <_free_r+0x46>
 8008ad0:	6811      	ldr	r1, [r2, #0]
 8008ad2:	1855      	adds	r5, r2, r1
 8008ad4:	42a5      	cmp	r5, r4
 8008ad6:	d10b      	bne.n	8008af0 <_free_r+0x70>
 8008ad8:	6824      	ldr	r4, [r4, #0]
 8008ada:	4421      	add	r1, r4
 8008adc:	1854      	adds	r4, r2, r1
 8008ade:	42a3      	cmp	r3, r4
 8008ae0:	6011      	str	r1, [r2, #0]
 8008ae2:	d1e0      	bne.n	8008aa6 <_free_r+0x26>
 8008ae4:	681c      	ldr	r4, [r3, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	6053      	str	r3, [r2, #4]
 8008aea:	440c      	add	r4, r1
 8008aec:	6014      	str	r4, [r2, #0]
 8008aee:	e7da      	b.n	8008aa6 <_free_r+0x26>
 8008af0:	d902      	bls.n	8008af8 <_free_r+0x78>
 8008af2:	230c      	movs	r3, #12
 8008af4:	6003      	str	r3, [r0, #0]
 8008af6:	e7d6      	b.n	8008aa6 <_free_r+0x26>
 8008af8:	6825      	ldr	r5, [r4, #0]
 8008afa:	1961      	adds	r1, r4, r5
 8008afc:	428b      	cmp	r3, r1
 8008afe:	bf04      	itt	eq
 8008b00:	6819      	ldreq	r1, [r3, #0]
 8008b02:	685b      	ldreq	r3, [r3, #4]
 8008b04:	6063      	str	r3, [r4, #4]
 8008b06:	bf04      	itt	eq
 8008b08:	1949      	addeq	r1, r1, r5
 8008b0a:	6021      	streq	r1, [r4, #0]
 8008b0c:	6054      	str	r4, [r2, #4]
 8008b0e:	e7ca      	b.n	8008aa6 <_free_r+0x26>
 8008b10:	b003      	add	sp, #12
 8008b12:	bd30      	pop	{r4, r5, pc}
 8008b14:	200020bc 	.word	0x200020bc

08008b18 <__malloc_lock>:
 8008b18:	4801      	ldr	r0, [pc, #4]	; (8008b20 <__malloc_lock+0x8>)
 8008b1a:	f7ff bfa1 	b.w	8008a60 <__retarget_lock_acquire_recursive>
 8008b1e:	bf00      	nop
 8008b20:	200020b8 	.word	0x200020b8

08008b24 <__malloc_unlock>:
 8008b24:	4801      	ldr	r0, [pc, #4]	; (8008b2c <__malloc_unlock+0x8>)
 8008b26:	f7ff bf9c 	b.w	8008a62 <__retarget_lock_release_recursive>
 8008b2a:	bf00      	nop
 8008b2c:	200020b8 	.word	0x200020b8

08008b30 <_init>:
 8008b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b32:	bf00      	nop
 8008b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b36:	bc08      	pop	{r3}
 8008b38:	469e      	mov	lr, r3
 8008b3a:	4770      	bx	lr

08008b3c <_fini>:
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3e:	bf00      	nop
 8008b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b42:	bc08      	pop	{r3}
 8008b44:	469e      	mov	lr, r3
 8008b46:	4770      	bx	lr
